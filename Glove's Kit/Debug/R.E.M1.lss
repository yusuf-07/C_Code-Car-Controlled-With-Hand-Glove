
R.E.M1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007a3e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  00007a3e  00007ab2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00007050  00000000  00000000  00007bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00002c3a  00000000  00000000  0000ec48  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00011882  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00011a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00011c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0001401f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  000153a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0001657c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0001673c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  00016a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000173a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	fa e7       	ldi	r31, 0x7A	; 122
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <main>
      7a:	0c 94 1d 3d 	jmp	0x7a3a	; 0x7a3a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 45 3a 	jmp	0x748a	; 0x748a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 e8       	ldi	r26, 0x85	; 133
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 61 3a 	jmp	0x74c2	; 0x74c2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 51 3a 	jmp	0x74a2	; 0x74a2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 6d 3a 	jmp	0x74da	; 0x74da <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 51 3a 	jmp	0x74a2	; 0x74a2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 6d 3a 	jmp	0x74da	; 0x74da <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 45 3a 	jmp	0x748a	; 0x748a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	85 e8       	ldi	r24, 0x85	; 133
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 61 3a 	jmp	0x74c2	; 0x74c2 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 4d 3a 	jmp	0x749a	; 0x749a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	65 e8       	ldi	r22, 0x85	; 133
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 69 3a 	jmp	0x74d2	; 0x74d2 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 51 3a 	jmp	0x74a2	; 0x74a2 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 6d 3a 	jmp	0x74da	; 0x74da <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 51 3a 	jmp	0x74a2	; 0x74a2 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 6d 3a 	jmp	0x74da	; 0x74da <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 51 3a 	jmp	0x74a2	; 0x74a2 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 6d 3a 	jmp	0x74da	; 0x74da <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 55 3a 	jmp	0x74aa	; 0x74aa <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 71 3a 	jmp	0x74e2	; 0x74e2 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 4d 3a 	jmp	0x749a	; 0x749a <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 69 3a 	jmp	0x74d2	; 0x74d2 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e3 57       	subi	r30, 0x73	; 115
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ReadySteadyGo>:
#define thumb ADC_u16ReadSteps(ADC_ADC4)
#define index_finger ADC_u16ReadSteps(ADC_ADC5)
#define middle_finger ADC_u16ReadSteps(ADC_ADC6)

void ReadySteadyGo(void)
{
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	ce 57       	subi	r28, 0x7E	; 126
     e2c:	d0 40       	sbci	r29, 0x00	; 0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
	LCD_voidCMD(_LCD_CLEAR);
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	0e 94 6f 2a 	call	0x54de	; 0x54de <LCD_voidCMD>
	LCD_voidMatrix(0,0);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	0e 94 81 2b 	call	0x5702	; 0x5702 <LCD_voidMatrix>
	//LCD_voidDisplayStr("ADC STEPS: ");
	LCD_voidDisplayStr("HI!!!");
     e46:	80 e6       	ldi	r24, 0x60	; 96
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 a8 2b 	call	0x5750	; 0x5750 <LCD_voidDisplayStr>
     e4e:	fe 01       	movw	r30, r28
     e50:	e5 58       	subi	r30, 0x85	; 133
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	aa e7       	ldi	r26, 0x7A	; 122
     e5a:	b5 e4       	ldi	r27, 0x45	; 69
     e5c:	80 83       	st	Z, r24
     e5e:	91 83       	std	Z+1, r25	; 0x01
     e60:	a2 83       	std	Z+2, r26	; 0x02
     e62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e64:	8e 01       	movw	r16, r28
     e66:	09 58       	subi	r16, 0x89	; 137
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
     e6a:	fe 01       	movw	r30, r28
     e6c:	e5 58       	subi	r30, 0x85	; 133
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	60 81       	ld	r22, Z
     e72:	71 81       	ldd	r23, Z+1	; 0x01
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	93 81       	ldd	r25, Z+3	; 0x03
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4a e7       	ldi	r20, 0x7A	; 122
     e7e:	55 e4       	ldi	r21, 0x45	; 69
     e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	f8 01       	movw	r30, r16
     e8a:	80 83       	st	Z, r24
     e8c:	91 83       	std	Z+1, r25	; 0x01
     e8e:	a2 83       	std	Z+2, r26	; 0x02
     e90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e92:	fe 01       	movw	r30, r28
     e94:	e9 58       	subi	r30, 0x89	; 137
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	60 81       	ld	r22, Z
     e9a:	71 81       	ldd	r23, Z+1	; 0x01
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e8       	ldi	r20, 0x80	; 128
     ea6:	5f e3       	ldi	r21, 0x3F	; 63
     ea8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     eac:	88 23       	and	r24, r24
     eae:	44 f4       	brge	.+16     	; 0xec0 <ReadySteadyGo+0xa2>
		__ticks = 1;
     eb0:	fe 01       	movw	r30, r28
     eb2:	eb 58       	subi	r30, 0x8B	; 139
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	91 83       	std	Z+1, r25	; 0x01
     ebc:	80 83       	st	Z, r24
     ebe:	64 c0       	rjmp	.+200    	; 0xf88 <ReadySteadyGo+0x16a>
	else if (__tmp > 65535)
     ec0:	fe 01       	movw	r30, r28
     ec2:	e9 58       	subi	r30, 0x89	; 137
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	3f ef       	ldi	r19, 0xFF	; 255
     ed2:	4f e7       	ldi	r20, 0x7F	; 127
     ed4:	57 e4       	ldi	r21, 0x47	; 71
     ed6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     eda:	18 16       	cp	r1, r24
     edc:	0c f0       	brlt	.+2      	; 0xee0 <ReadySteadyGo+0xc2>
     ede:	43 c0       	rjmp	.+134    	; 0xf66 <ReadySteadyGo+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee0:	fe 01       	movw	r30, r28
     ee2:	e5 58       	subi	r30, 0x85	; 133
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	60 81       	ld	r22, Z
     ee8:	71 81       	ldd	r23, Z+1	; 0x01
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	93 81       	ldd	r25, Z+3	; 0x03
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e2       	ldi	r20, 0x20	; 32
     ef4:	51 e4       	ldi	r21, 0x41	; 65
     ef6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	8e 01       	movw	r16, r28
     f00:	0b 58       	subi	r16, 0x8B	; 139
     f02:	1f 4f       	sbci	r17, 0xFF	; 255
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	f8 01       	movw	r30, r16
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	80 83       	st	Z, r24
     f16:	1f c0       	rjmp	.+62     	; 0xf56 <ReadySteadyGo+0x138>
     f18:	fe 01       	movw	r30, r28
     f1a:	ed 58       	subi	r30, 0x8D	; 141
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	80 e9       	ldi	r24, 0x90	; 144
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f26:	fe 01       	movw	r30, r28
     f28:	ed 58       	subi	r30, 0x8D	; 141
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	80 81       	ld	r24, Z
     f2e:	91 81       	ldd	r25, Z+1	; 0x01
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <ReadySteadyGo+0x112>
     f34:	fe 01       	movw	r30, r28
     f36:	ed 58       	subi	r30, 0x8D	; 141
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3e:	de 01       	movw	r26, r28
     f40:	ab 58       	subi	r26, 0x8B	; 139
     f42:	bf 4f       	sbci	r27, 0xFF	; 255
     f44:	fe 01       	movw	r30, r28
     f46:	eb 58       	subi	r30, 0x8B	; 139
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	80 81       	ld	r24, Z
     f4c:	91 81       	ldd	r25, Z+1	; 0x01
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	11 96       	adiw	r26, 0x01	; 1
     f52:	9c 93       	st	X, r25
     f54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f56:	fe 01       	movw	r30, r28
     f58:	eb 58       	subi	r30, 0x8B	; 139
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	d1 f6       	brne	.-76     	; 0xf18 <ReadySteadyGo+0xfa>
     f64:	27 c0       	rjmp	.+78     	; 0xfb4 <ReadySteadyGo+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f66:	8e 01       	movw	r16, r28
     f68:	0b 58       	subi	r16, 0x8B	; 139
     f6a:	1f 4f       	sbci	r17, 0xFF	; 255
     f6c:	fe 01       	movw	r30, r28
     f6e:	e9 58       	subi	r30, 0x89	; 137
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	60 81       	ld	r22, Z
     f74:	71 81       	ldd	r23, Z+1	; 0x01
     f76:	82 81       	ldd	r24, Z+2	; 0x02
     f78:	93 81       	ldd	r25, Z+3	; 0x03
     f7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	f8 01       	movw	r30, r16
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	80 83       	st	Z, r24
     f88:	de 01       	movw	r26, r28
     f8a:	af 58       	subi	r26, 0x8F	; 143
     f8c:	bf 4f       	sbci	r27, 0xFF	; 255
     f8e:	fe 01       	movw	r30, r28
     f90:	eb 58       	subi	r30, 0x8B	; 139
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	8d 93       	st	X+, r24
     f9a:	9c 93       	st	X, r25
     f9c:	fe 01       	movw	r30, r28
     f9e:	ef 58       	subi	r30, 0x8F	; 143
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <ReadySteadyGo+0x188>
     faa:	fe 01       	movw	r30, r28
     fac:	ef 58       	subi	r30, 0x8F	; 143
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
	_delay_ms(4000);
	LCD_voidCMD(_LCD_CLEAR);
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	0e 94 6f 2a 	call	0x54de	; 0x54de <LCD_voidCMD>
	LCD_voidMatrix(0,0);
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	0e 94 81 2b 	call	0x5702	; 0x5702 <LCD_voidMatrix>
	LCD_voidDisplayStr("READY");
     fc2:	86 e6       	ldi	r24, 0x66	; 102
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 a8 2b 	call	0x5750	; 0x5750 <LCD_voidDisplayStr>
     fca:	fe 01       	movw	r30, r28
     fcc:	e3 59       	subi	r30, 0x93	; 147
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a8 ec       	ldi	r26, 0xC8	; 200
     fd6:	b3 e4       	ldi	r27, 0x43	; 67
     fd8:	80 83       	st	Z, r24
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	a2 83       	std	Z+2, r26	; 0x02
     fde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe0:	8e 01       	movw	r16, r28
     fe2:	07 59       	subi	r16, 0x97	; 151
     fe4:	1f 4f       	sbci	r17, 0xFF	; 255
     fe6:	fe 01       	movw	r30, r28
     fe8:	e3 59       	subi	r30, 0x93	; 147
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	60 81       	ld	r22, Z
     fee:	71 81       	ldd	r23, Z+1	; 0x01
     ff0:	82 81       	ldd	r24, Z+2	; 0x02
     ff2:	93 81       	ldd	r25, Z+3	; 0x03
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	4a e7       	ldi	r20, 0x7A	; 122
     ffa:	55 e4       	ldi	r21, 0x45	; 69
     ffc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	f8 01       	movw	r30, r16
    1006:	80 83       	st	Z, r24
    1008:	91 83       	std	Z+1, r25	; 0x01
    100a:	a2 83       	std	Z+2, r26	; 0x02
    100c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    100e:	fe 01       	movw	r30, r28
    1010:	e7 59       	subi	r30, 0x97	; 151
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	60 81       	ld	r22, Z
    1016:	71 81       	ldd	r23, Z+1	; 0x01
    1018:	82 81       	ldd	r24, Z+2	; 0x02
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e8       	ldi	r20, 0x80	; 128
    1022:	5f e3       	ldi	r21, 0x3F	; 63
    1024:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1028:	88 23       	and	r24, r24
    102a:	44 f4       	brge	.+16     	; 0x103c <ReadySteadyGo+0x21e>
		__ticks = 1;
    102c:	fe 01       	movw	r30, r28
    102e:	e9 59       	subi	r30, 0x99	; 153
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	91 83       	std	Z+1, r25	; 0x01
    1038:	80 83       	st	Z, r24
    103a:	64 c0       	rjmp	.+200    	; 0x1104 <ReadySteadyGo+0x2e6>
	else if (__tmp > 65535)
    103c:	fe 01       	movw	r30, r28
    103e:	e7 59       	subi	r30, 0x97	; 151
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	60 81       	ld	r22, Z
    1044:	71 81       	ldd	r23, Z+1	; 0x01
    1046:	82 81       	ldd	r24, Z+2	; 0x02
    1048:	93 81       	ldd	r25, Z+3	; 0x03
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	3f ef       	ldi	r19, 0xFF	; 255
    104e:	4f e7       	ldi	r20, 0x7F	; 127
    1050:	57 e4       	ldi	r21, 0x47	; 71
    1052:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1056:	18 16       	cp	r1, r24
    1058:	0c f0       	brlt	.+2      	; 0x105c <ReadySteadyGo+0x23e>
    105a:	43 c0       	rjmp	.+134    	; 0x10e2 <ReadySteadyGo+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    105c:	fe 01       	movw	r30, r28
    105e:	e3 59       	subi	r30, 0x93	; 147
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	60 81       	ld	r22, Z
    1064:	71 81       	ldd	r23, Z+1	; 0x01
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	93 81       	ldd	r25, Z+3	; 0x03
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e2       	ldi	r20, 0x20	; 32
    1070:	51 e4       	ldi	r21, 0x41	; 65
    1072:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	8e 01       	movw	r16, r28
    107c:	09 59       	subi	r16, 0x99	; 153
    107e:	1f 4f       	sbci	r17, 0xFF	; 255
    1080:	bc 01       	movw	r22, r24
    1082:	cd 01       	movw	r24, r26
    1084:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	f8 01       	movw	r30, r16
    108e:	91 83       	std	Z+1, r25	; 0x01
    1090:	80 83       	st	Z, r24
    1092:	1f c0       	rjmp	.+62     	; 0x10d2 <ReadySteadyGo+0x2b4>
    1094:	fe 01       	movw	r30, r28
    1096:	eb 59       	subi	r30, 0x9B	; 155
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	80 e9       	ldi	r24, 0x90	; 144
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	91 83       	std	Z+1, r25	; 0x01
    10a0:	80 83       	st	Z, r24
    10a2:	fe 01       	movw	r30, r28
    10a4:	eb 59       	subi	r30, 0x9B	; 155
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	80 81       	ld	r24, Z
    10aa:	91 81       	ldd	r25, Z+1	; 0x01
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <ReadySteadyGo+0x28e>
    10b0:	fe 01       	movw	r30, r28
    10b2:	eb 59       	subi	r30, 0x9B	; 155
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	91 83       	std	Z+1, r25	; 0x01
    10b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ba:	de 01       	movw	r26, r28
    10bc:	a9 59       	subi	r26, 0x99	; 153
    10be:	bf 4f       	sbci	r27, 0xFF	; 255
    10c0:	fe 01       	movw	r30, r28
    10c2:	e9 59       	subi	r30, 0x99	; 153
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	80 81       	ld	r24, Z
    10c8:	91 81       	ldd	r25, Z+1	; 0x01
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	11 96       	adiw	r26, 0x01	; 1
    10ce:	9c 93       	st	X, r25
    10d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d2:	fe 01       	movw	r30, r28
    10d4:	e9 59       	subi	r30, 0x99	; 153
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	80 81       	ld	r24, Z
    10da:	91 81       	ldd	r25, Z+1	; 0x01
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	d1 f6       	brne	.-76     	; 0x1094 <ReadySteadyGo+0x276>
    10e0:	27 c0       	rjmp	.+78     	; 0x1130 <ReadySteadyGo+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e2:	8e 01       	movw	r16, r28
    10e4:	09 59       	subi	r16, 0x99	; 153
    10e6:	1f 4f       	sbci	r17, 0xFF	; 255
    10e8:	fe 01       	movw	r30, r28
    10ea:	e7 59       	subi	r30, 0x97	; 151
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	60 81       	ld	r22, Z
    10f0:	71 81       	ldd	r23, Z+1	; 0x01
    10f2:	82 81       	ldd	r24, Z+2	; 0x02
    10f4:	93 81       	ldd	r25, Z+3	; 0x03
    10f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	f8 01       	movw	r30, r16
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24
    1104:	de 01       	movw	r26, r28
    1106:	ad 59       	subi	r26, 0x9D	; 157
    1108:	bf 4f       	sbci	r27, 0xFF	; 255
    110a:	fe 01       	movw	r30, r28
    110c:	e9 59       	subi	r30, 0x99	; 153
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	80 81       	ld	r24, Z
    1112:	91 81       	ldd	r25, Z+1	; 0x01
    1114:	8d 93       	st	X+, r24
    1116:	9c 93       	st	X, r25
    1118:	fe 01       	movw	r30, r28
    111a:	ed 59       	subi	r30, 0x9D	; 157
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	80 81       	ld	r24, Z
    1120:	91 81       	ldd	r25, Z+1	; 0x01
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	f1 f7       	brne	.-4      	; 0x1122 <ReadySteadyGo+0x304>
    1126:	fe 01       	movw	r30, r28
    1128:	ed 59       	subi	r30, 0x9D	; 157
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	91 83       	std	Z+1, r25	; 0x01
    112e:	80 83       	st	Z, r24
	_delay_ms(400);
	LCD_voidMatrix(0,5);
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	65 e0       	ldi	r22, 0x05	; 5
    1134:	0e 94 81 2b 	call	0x5702	; 0x5702 <LCD_voidMatrix>
	LCD_voidDisplayStr(".");
    1138:	8c e6       	ldi	r24, 0x6C	; 108
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 a8 2b 	call	0x5750	; 0x5750 <LCD_voidDisplayStr>
    1140:	fe 01       	movw	r30, r28
    1142:	e1 5a       	subi	r30, 0xA1	; 161
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a8 ec       	ldi	r26, 0xC8	; 200
    114c:	b3 e4       	ldi	r27, 0x43	; 67
    114e:	80 83       	st	Z, r24
    1150:	91 83       	std	Z+1, r25	; 0x01
    1152:	a2 83       	std	Z+2, r26	; 0x02
    1154:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1156:	8e 01       	movw	r16, r28
    1158:	05 5a       	subi	r16, 0xA5	; 165
    115a:	1f 4f       	sbci	r17, 0xFF	; 255
    115c:	fe 01       	movw	r30, r28
    115e:	e1 5a       	subi	r30, 0xA1	; 161
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	60 81       	ld	r22, Z
    1164:	71 81       	ldd	r23, Z+1	; 0x01
    1166:	82 81       	ldd	r24, Z+2	; 0x02
    1168:	93 81       	ldd	r25, Z+3	; 0x03
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	4a e7       	ldi	r20, 0x7A	; 122
    1170:	55 e4       	ldi	r21, 0x45	; 69
    1172:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	f8 01       	movw	r30, r16
    117c:	80 83       	st	Z, r24
    117e:	91 83       	std	Z+1, r25	; 0x01
    1180:	a2 83       	std	Z+2, r26	; 0x02
    1182:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1184:	fe 01       	movw	r30, r28
    1186:	e5 5a       	subi	r30, 0xA5	; 165
    1188:	ff 4f       	sbci	r31, 0xFF	; 255
    118a:	60 81       	ld	r22, Z
    118c:	71 81       	ldd	r23, Z+1	; 0x01
    118e:	82 81       	ldd	r24, Z+2	; 0x02
    1190:	93 81       	ldd	r25, Z+3	; 0x03
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	40 e8       	ldi	r20, 0x80	; 128
    1198:	5f e3       	ldi	r21, 0x3F	; 63
    119a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    119e:	88 23       	and	r24, r24
    11a0:	44 f4       	brge	.+16     	; 0x11b2 <ReadySteadyGo+0x394>
		__ticks = 1;
    11a2:	fe 01       	movw	r30, r28
    11a4:	e7 5a       	subi	r30, 0xA7	; 167
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	91 83       	std	Z+1, r25	; 0x01
    11ae:	80 83       	st	Z, r24
    11b0:	64 c0       	rjmp	.+200    	; 0x127a <ReadySteadyGo+0x45c>
	else if (__tmp > 65535)
    11b2:	fe 01       	movw	r30, r28
    11b4:	e5 5a       	subi	r30, 0xA5	; 165
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	60 81       	ld	r22, Z
    11ba:	71 81       	ldd	r23, Z+1	; 0x01
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	93 81       	ldd	r25, Z+3	; 0x03
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	3f ef       	ldi	r19, 0xFF	; 255
    11c4:	4f e7       	ldi	r20, 0x7F	; 127
    11c6:	57 e4       	ldi	r21, 0x47	; 71
    11c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11cc:	18 16       	cp	r1, r24
    11ce:	0c f0       	brlt	.+2      	; 0x11d2 <ReadySteadyGo+0x3b4>
    11d0:	43 c0       	rjmp	.+134    	; 0x1258 <ReadySteadyGo+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d2:	fe 01       	movw	r30, r28
    11d4:	e1 5a       	subi	r30, 0xA1	; 161
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	60 81       	ld	r22, Z
    11da:	71 81       	ldd	r23, Z+1	; 0x01
    11dc:	82 81       	ldd	r24, Z+2	; 0x02
    11de:	93 81       	ldd	r25, Z+3	; 0x03
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e2       	ldi	r20, 0x20	; 32
    11e6:	51 e4       	ldi	r21, 0x41	; 65
    11e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	8e 01       	movw	r16, r28
    11f2:	07 5a       	subi	r16, 0xA7	; 167
    11f4:	1f 4f       	sbci	r17, 0xFF	; 255
    11f6:	bc 01       	movw	r22, r24
    11f8:	cd 01       	movw	r24, r26
    11fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	f8 01       	movw	r30, r16
    1204:	91 83       	std	Z+1, r25	; 0x01
    1206:	80 83       	st	Z, r24
    1208:	1f c0       	rjmp	.+62     	; 0x1248 <ReadySteadyGo+0x42a>
    120a:	fe 01       	movw	r30, r28
    120c:	e9 5a       	subi	r30, 0xA9	; 169
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	80 e9       	ldi	r24, 0x90	; 144
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	91 83       	std	Z+1, r25	; 0x01
    1216:	80 83       	st	Z, r24
    1218:	fe 01       	movw	r30, r28
    121a:	e9 5a       	subi	r30, 0xA9	; 169
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	80 81       	ld	r24, Z
    1220:	91 81       	ldd	r25, Z+1	; 0x01
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <ReadySteadyGo+0x404>
    1226:	fe 01       	movw	r30, r28
    1228:	e9 5a       	subi	r30, 0xA9	; 169
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	91 83       	std	Z+1, r25	; 0x01
    122e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1230:	de 01       	movw	r26, r28
    1232:	a7 5a       	subi	r26, 0xA7	; 167
    1234:	bf 4f       	sbci	r27, 0xFF	; 255
    1236:	fe 01       	movw	r30, r28
    1238:	e7 5a       	subi	r30, 0xA7	; 167
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	80 81       	ld	r24, Z
    123e:	91 81       	ldd	r25, Z+1	; 0x01
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	11 96       	adiw	r26, 0x01	; 1
    1244:	9c 93       	st	X, r25
    1246:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1248:	fe 01       	movw	r30, r28
    124a:	e7 5a       	subi	r30, 0xA7	; 167
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	80 81       	ld	r24, Z
    1250:	91 81       	ldd	r25, Z+1	; 0x01
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	d1 f6       	brne	.-76     	; 0x120a <ReadySteadyGo+0x3ec>
    1256:	27 c0       	rjmp	.+78     	; 0x12a6 <ReadySteadyGo+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1258:	8e 01       	movw	r16, r28
    125a:	07 5a       	subi	r16, 0xA7	; 167
    125c:	1f 4f       	sbci	r17, 0xFF	; 255
    125e:	fe 01       	movw	r30, r28
    1260:	e5 5a       	subi	r30, 0xA5	; 165
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	60 81       	ld	r22, Z
    1266:	71 81       	ldd	r23, Z+1	; 0x01
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	f8 01       	movw	r30, r16
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	80 83       	st	Z, r24
    127a:	de 01       	movw	r26, r28
    127c:	ab 5a       	subi	r26, 0xAB	; 171
    127e:	bf 4f       	sbci	r27, 0xFF	; 255
    1280:	fe 01       	movw	r30, r28
    1282:	e7 5a       	subi	r30, 0xA7	; 167
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	80 81       	ld	r24, Z
    1288:	91 81       	ldd	r25, Z+1	; 0x01
    128a:	8d 93       	st	X+, r24
    128c:	9c 93       	st	X, r25
    128e:	fe 01       	movw	r30, r28
    1290:	eb 5a       	subi	r30, 0xAB	; 171
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	80 81       	ld	r24, Z
    1296:	91 81       	ldd	r25, Z+1	; 0x01
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	f1 f7       	brne	.-4      	; 0x1298 <ReadySteadyGo+0x47a>
    129c:	fe 01       	movw	r30, r28
    129e:	eb 5a       	subi	r30, 0xAB	; 171
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	91 83       	std	Z+1, r25	; 0x01
    12a4:	80 83       	st	Z, r24
	_delay_ms(400);
	LCD_voidMatrix(0,6);
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	66 e0       	ldi	r22, 0x06	; 6
    12aa:	0e 94 81 2b 	call	0x5702	; 0x5702 <LCD_voidMatrix>
	LCD_voidDisplayStr(".");
    12ae:	8c e6       	ldi	r24, 0x6C	; 108
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	0e 94 a8 2b 	call	0x5750	; 0x5750 <LCD_voidDisplayStr>
    12b6:	fe 01       	movw	r30, r28
    12b8:	ef 5a       	subi	r30, 0xAF	; 175
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a8 ec       	ldi	r26, 0xC8	; 200
    12c2:	b3 e4       	ldi	r27, 0x43	; 67
    12c4:	80 83       	st	Z, r24
    12c6:	91 83       	std	Z+1, r25	; 0x01
    12c8:	a2 83       	std	Z+2, r26	; 0x02
    12ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12cc:	8e 01       	movw	r16, r28
    12ce:	03 5b       	subi	r16, 0xB3	; 179
    12d0:	1f 4f       	sbci	r17, 0xFF	; 255
    12d2:	fe 01       	movw	r30, r28
    12d4:	ef 5a       	subi	r30, 0xAF	; 175
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	82 81       	ldd	r24, Z+2	; 0x02
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	4a e7       	ldi	r20, 0x7A	; 122
    12e6:	55 e4       	ldi	r21, 0x45	; 69
    12e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	f8 01       	movw	r30, r16
    12f2:	80 83       	st	Z, r24
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	a2 83       	std	Z+2, r26	; 0x02
    12f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12fa:	fe 01       	movw	r30, r28
    12fc:	e3 5b       	subi	r30, 0xB3	; 179
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	60 81       	ld	r22, Z
    1302:	71 81       	ldd	r23, Z+1	; 0x01
    1304:	82 81       	ldd	r24, Z+2	; 0x02
    1306:	93 81       	ldd	r25, Z+3	; 0x03
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e8       	ldi	r20, 0x80	; 128
    130e:	5f e3       	ldi	r21, 0x3F	; 63
    1310:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1314:	88 23       	and	r24, r24
    1316:	44 f4       	brge	.+16     	; 0x1328 <ReadySteadyGo+0x50a>
		__ticks = 1;
    1318:	fe 01       	movw	r30, r28
    131a:	e5 5b       	subi	r30, 0xB5	; 181
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	80 83       	st	Z, r24
    1326:	64 c0       	rjmp	.+200    	; 0x13f0 <ReadySteadyGo+0x5d2>
	else if (__tmp > 65535)
    1328:	fe 01       	movw	r30, r28
    132a:	e3 5b       	subi	r30, 0xB3	; 179
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	60 81       	ld	r22, Z
    1330:	71 81       	ldd	r23, Z+1	; 0x01
    1332:	82 81       	ldd	r24, Z+2	; 0x02
    1334:	93 81       	ldd	r25, Z+3	; 0x03
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	3f ef       	ldi	r19, 0xFF	; 255
    133a:	4f e7       	ldi	r20, 0x7F	; 127
    133c:	57 e4       	ldi	r21, 0x47	; 71
    133e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1342:	18 16       	cp	r1, r24
    1344:	0c f0       	brlt	.+2      	; 0x1348 <ReadySteadyGo+0x52a>
    1346:	43 c0       	rjmp	.+134    	; 0x13ce <ReadySteadyGo+0x5b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1348:	fe 01       	movw	r30, r28
    134a:	ef 5a       	subi	r30, 0xAF	; 175
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	93 81       	ldd	r25, Z+3	; 0x03
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e2       	ldi	r20, 0x20	; 32
    135c:	51 e4       	ldi	r21, 0x41	; 65
    135e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	8e 01       	movw	r16, r28
    1368:	05 5b       	subi	r16, 0xB5	; 181
    136a:	1f 4f       	sbci	r17, 0xFF	; 255
    136c:	bc 01       	movw	r22, r24
    136e:	cd 01       	movw	r24, r26
    1370:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	f8 01       	movw	r30, r16
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	80 83       	st	Z, r24
    137e:	1f c0       	rjmp	.+62     	; 0x13be <ReadySteadyGo+0x5a0>
    1380:	fe 01       	movw	r30, r28
    1382:	e7 5b       	subi	r30, 0xB7	; 183
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	80 e9       	ldi	r24, 0x90	; 144
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	91 83       	std	Z+1, r25	; 0x01
    138c:	80 83       	st	Z, r24
    138e:	fe 01       	movw	r30, r28
    1390:	e7 5b       	subi	r30, 0xB7	; 183
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	80 81       	ld	r24, Z
    1396:	91 81       	ldd	r25, Z+1	; 0x01
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <ReadySteadyGo+0x57a>
    139c:	fe 01       	movw	r30, r28
    139e:	e7 5b       	subi	r30, 0xB7	; 183
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a6:	de 01       	movw	r26, r28
    13a8:	a5 5b       	subi	r26, 0xB5	; 181
    13aa:	bf 4f       	sbci	r27, 0xFF	; 255
    13ac:	fe 01       	movw	r30, r28
    13ae:	e5 5b       	subi	r30, 0xB5	; 181
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	11 96       	adiw	r26, 0x01	; 1
    13ba:	9c 93       	st	X, r25
    13bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13be:	fe 01       	movw	r30, r28
    13c0:	e5 5b       	subi	r30, 0xB5	; 181
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	80 81       	ld	r24, Z
    13c6:	91 81       	ldd	r25, Z+1	; 0x01
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	d1 f6       	brne	.-76     	; 0x1380 <ReadySteadyGo+0x562>
    13cc:	27 c0       	rjmp	.+78     	; 0x141c <ReadySteadyGo+0x5fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ce:	8e 01       	movw	r16, r28
    13d0:	05 5b       	subi	r16, 0xB5	; 181
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	fe 01       	movw	r30, r28
    13d6:	e3 5b       	subi	r30, 0xB3	; 179
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	60 81       	ld	r22, Z
    13dc:	71 81       	ldd	r23, Z+1	; 0x01
    13de:	82 81       	ldd	r24, Z+2	; 0x02
    13e0:	93 81       	ldd	r25, Z+3	; 0x03
    13e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	f8 01       	movw	r30, r16
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	80 83       	st	Z, r24
    13f0:	de 01       	movw	r26, r28
    13f2:	a9 5b       	subi	r26, 0xB9	; 185
    13f4:	bf 4f       	sbci	r27, 0xFF	; 255
    13f6:	fe 01       	movw	r30, r28
    13f8:	e5 5b       	subi	r30, 0xB5	; 181
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	80 81       	ld	r24, Z
    13fe:	91 81       	ldd	r25, Z+1	; 0x01
    1400:	8d 93       	st	X+, r24
    1402:	9c 93       	st	X, r25
    1404:	fe 01       	movw	r30, r28
    1406:	e9 5b       	subi	r30, 0xB9	; 185
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	80 81       	ld	r24, Z
    140c:	91 81       	ldd	r25, Z+1	; 0x01
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <ReadySteadyGo+0x5f0>
    1412:	fe 01       	movw	r30, r28
    1414:	e9 5b       	subi	r30, 0xB9	; 185
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	91 83       	std	Z+1, r25	; 0x01
    141a:	80 83       	st	Z, r24
	_delay_ms(400);
	LCD_voidMatrix(0,7);
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	67 e0       	ldi	r22, 0x07	; 7
    1420:	0e 94 81 2b 	call	0x5702	; 0x5702 <LCD_voidMatrix>
	LCD_voidDisplayStr(".");
    1424:	8c e6       	ldi	r24, 0x6C	; 108
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 a8 2b 	call	0x5750	; 0x5750 <LCD_voidDisplayStr>
    142c:	fe 01       	movw	r30, r28
    142e:	ed 5b       	subi	r30, 0xBD	; 189
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e8       	ldi	r25, 0x80	; 128
    1436:	ab eb       	ldi	r26, 0xBB	; 187
    1438:	b5 e4       	ldi	r27, 0x45	; 69
    143a:	80 83       	st	Z, r24
    143c:	91 83       	std	Z+1, r25	; 0x01
    143e:	a2 83       	std	Z+2, r26	; 0x02
    1440:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1442:	8e 01       	movw	r16, r28
    1444:	01 5c       	subi	r16, 0xC1	; 193
    1446:	1f 4f       	sbci	r17, 0xFF	; 255
    1448:	fe 01       	movw	r30, r28
    144a:	ed 5b       	subi	r30, 0xBD	; 189
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	60 81       	ld	r22, Z
    1450:	71 81       	ldd	r23, Z+1	; 0x01
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	4a e7       	ldi	r20, 0x7A	; 122
    145c:	55 e4       	ldi	r21, 0x45	; 69
    145e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	f8 01       	movw	r30, r16
    1468:	80 83       	st	Z, r24
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	a2 83       	std	Z+2, r26	; 0x02
    146e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1470:	fe 01       	movw	r30, r28
    1472:	ff 96       	adiw	r30, 0x3f	; 63
    1474:	60 81       	ld	r22, Z
    1476:	71 81       	ldd	r23, Z+1	; 0x01
    1478:	82 81       	ldd	r24, Z+2	; 0x02
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e8       	ldi	r20, 0x80	; 128
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1488:	88 23       	and	r24, r24
    148a:	2c f4       	brge	.+10     	; 0x1496 <ReadySteadyGo+0x678>
		__ticks = 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9e af       	std	Y+62, r25	; 0x3e
    1492:	8d af       	std	Y+61, r24	; 0x3d
    1494:	46 c0       	rjmp	.+140    	; 0x1522 <ReadySteadyGo+0x704>
	else if (__tmp > 65535)
    1496:	fe 01       	movw	r30, r28
    1498:	ff 96       	adiw	r30, 0x3f	; 63
    149a:	60 81       	ld	r22, Z
    149c:	71 81       	ldd	r23, Z+1	; 0x01
    149e:	82 81       	ldd	r24, Z+2	; 0x02
    14a0:	93 81       	ldd	r25, Z+3	; 0x03
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	3f ef       	ldi	r19, 0xFF	; 255
    14a6:	4f e7       	ldi	r20, 0x7F	; 127
    14a8:	57 e4       	ldi	r21, 0x47	; 71
    14aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14ae:	18 16       	cp	r1, r24
    14b0:	64 f5       	brge	.+88     	; 0x150a <ReadySteadyGo+0x6ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b2:	fe 01       	movw	r30, r28
    14b4:	ed 5b       	subi	r30, 0xBD	; 189
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	60 81       	ld	r22, Z
    14ba:	71 81       	ldd	r23, Z+1	; 0x01
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	93 81       	ldd	r25, Z+3	; 0x03
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e2       	ldi	r20, 0x20	; 32
    14c6:	51 e4       	ldi	r21, 0x41	; 65
    14c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	bc 01       	movw	r22, r24
    14d2:	cd 01       	movw	r24, r26
    14d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	9e af       	std	Y+62, r25	; 0x3e
    14de:	8d af       	std	Y+61, r24	; 0x3d
    14e0:	0f c0       	rjmp	.+30     	; 0x1500 <ReadySteadyGo+0x6e2>
    14e2:	80 e9       	ldi	r24, 0x90	; 144
    14e4:	91 e0       	ldi	r25, 0x01	; 1
    14e6:	9c af       	std	Y+60, r25	; 0x3c
    14e8:	8b af       	std	Y+59, r24	; 0x3b
    14ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    14ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <ReadySteadyGo+0x6d0>
    14f2:	9c af       	std	Y+60, r25	; 0x3c
    14f4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    14f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	9e af       	std	Y+62, r25	; 0x3e
    14fe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1500:	8d ad       	ldd	r24, Y+61	; 0x3d
    1502:	9e ad       	ldd	r25, Y+62	; 0x3e
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	69 f7       	brne	.-38     	; 0x14e2 <ReadySteadyGo+0x6c4>
    1508:	16 c0       	rjmp	.+44     	; 0x1536 <ReadySteadyGo+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150a:	fe 01       	movw	r30, r28
    150c:	ff 96       	adiw	r30, 0x3f	; 63
    150e:	60 81       	ld	r22, Z
    1510:	71 81       	ldd	r23, Z+1	; 0x01
    1512:	82 81       	ldd	r24, Z+2	; 0x02
    1514:	93 81       	ldd	r25, Z+3	; 0x03
    1516:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	9e af       	std	Y+62, r25	; 0x3e
    1520:	8d af       	std	Y+61, r24	; 0x3d
    1522:	8d ad       	ldd	r24, Y+61	; 0x3d
    1524:	9e ad       	ldd	r25, Y+62	; 0x3e
    1526:	9a af       	std	Y+58, r25	; 0x3a
    1528:	89 af       	std	Y+57, r24	; 0x39
    152a:	89 ad       	ldd	r24, Y+57	; 0x39
    152c:	9a ad       	ldd	r25, Y+58	; 0x3a
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <ReadySteadyGo+0x710>
    1532:	9a af       	std	Y+58, r25	; 0x3a
    1534:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(6000);

	LCD_voidCMD(_LCD_CLEAR);
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	0e 94 6f 2a 	call	0x54de	; 0x54de <LCD_voidCMD>
	LCD_voidMatrix(0,0);
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	0e 94 81 2b 	call	0x5702	; 0x5702 <LCD_voidMatrix>
	LCD_voidDisplayStr("STEADY");
    1544:	8e e6       	ldi	r24, 0x6E	; 110
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 a8 2b 	call	0x5750	; 0x5750 <LCD_voidDisplayStr>
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a8 ec       	ldi	r26, 0xC8	; 200
    1552:	b3 e4       	ldi	r27, 0x43	; 67
    1554:	8d ab       	std	Y+53, r24	; 0x35
    1556:	9e ab       	std	Y+54, r25	; 0x36
    1558:	af ab       	std	Y+55, r26	; 0x37
    155a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155c:	6d a9       	ldd	r22, Y+53	; 0x35
    155e:	7e a9       	ldd	r23, Y+54	; 0x36
    1560:	8f a9       	ldd	r24, Y+55	; 0x37
    1562:	98 ad       	ldd	r25, Y+56	; 0x38
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	4a e7       	ldi	r20, 0x7A	; 122
    156a:	55 e4       	ldi	r21, 0x45	; 69
    156c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	89 ab       	std	Y+49, r24	; 0x31
    1576:	9a ab       	std	Y+50, r25	; 0x32
    1578:	ab ab       	std	Y+51, r26	; 0x33
    157a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    157c:	69 a9       	ldd	r22, Y+49	; 0x31
    157e:	7a a9       	ldd	r23, Y+50	; 0x32
    1580:	8b a9       	ldd	r24, Y+51	; 0x33
    1582:	9c a9       	ldd	r25, Y+52	; 0x34
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	40 e8       	ldi	r20, 0x80	; 128
    158a:	5f e3       	ldi	r21, 0x3F	; 63
    158c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1590:	88 23       	and	r24, r24
    1592:	2c f4       	brge	.+10     	; 0x159e <ReadySteadyGo+0x780>
		__ticks = 1;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	98 ab       	std	Y+48, r25	; 0x30
    159a:	8f a7       	std	Y+47, r24	; 0x2f
    159c:	3f c0       	rjmp	.+126    	; 0x161c <ReadySteadyGo+0x7fe>
	else if (__tmp > 65535)
    159e:	69 a9       	ldd	r22, Y+49	; 0x31
    15a0:	7a a9       	ldd	r23, Y+50	; 0x32
    15a2:	8b a9       	ldd	r24, Y+51	; 0x33
    15a4:	9c a9       	ldd	r25, Y+52	; 0x34
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	3f ef       	ldi	r19, 0xFF	; 255
    15aa:	4f e7       	ldi	r20, 0x7F	; 127
    15ac:	57 e4       	ldi	r21, 0x47	; 71
    15ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15b2:	18 16       	cp	r1, r24
    15b4:	4c f5       	brge	.+82     	; 0x1608 <ReadySteadyGo+0x7ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b6:	6d a9       	ldd	r22, Y+53	; 0x35
    15b8:	7e a9       	ldd	r23, Y+54	; 0x36
    15ba:	8f a9       	ldd	r24, Y+55	; 0x37
    15bc:	98 ad       	ldd	r25, Y+56	; 0x38
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e2       	ldi	r20, 0x20	; 32
    15c4:	51 e4       	ldi	r21, 0x41	; 65
    15c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	bc 01       	movw	r22, r24
    15d0:	cd 01       	movw	r24, r26
    15d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	98 ab       	std	Y+48, r25	; 0x30
    15dc:	8f a7       	std	Y+47, r24	; 0x2f
    15de:	0f c0       	rjmp	.+30     	; 0x15fe <ReadySteadyGo+0x7e0>
    15e0:	80 e9       	ldi	r24, 0x90	; 144
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	9e a7       	std	Y+46, r25	; 0x2e
    15e6:	8d a7       	std	Y+45, r24	; 0x2d
    15e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    15ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <ReadySteadyGo+0x7ce>
    15f0:	9e a7       	std	Y+46, r25	; 0x2e
    15f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    15f6:	98 a9       	ldd	r25, Y+48	; 0x30
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	98 ab       	std	Y+48, r25	; 0x30
    15fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1600:	98 a9       	ldd	r25, Y+48	; 0x30
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	69 f7       	brne	.-38     	; 0x15e0 <ReadySteadyGo+0x7c2>
    1606:	14 c0       	rjmp	.+40     	; 0x1630 <ReadySteadyGo+0x812>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1608:	69 a9       	ldd	r22, Y+49	; 0x31
    160a:	7a a9       	ldd	r23, Y+50	; 0x32
    160c:	8b a9       	ldd	r24, Y+51	; 0x33
    160e:	9c a9       	ldd	r25, Y+52	; 0x34
    1610:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	98 ab       	std	Y+48, r25	; 0x30
    161a:	8f a7       	std	Y+47, r24	; 0x2f
    161c:	8f a5       	ldd	r24, Y+47	; 0x2f
    161e:	98 a9       	ldd	r25, Y+48	; 0x30
    1620:	9c a7       	std	Y+44, r25	; 0x2c
    1622:	8b a7       	std	Y+43, r24	; 0x2b
    1624:	8b a5       	ldd	r24, Y+43	; 0x2b
    1626:	9c a5       	ldd	r25, Y+44	; 0x2c
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <ReadySteadyGo+0x80a>
    162c:	9c a7       	std	Y+44, r25	; 0x2c
    162e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(400);
	LCD_voidMatrix(0,6);
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	66 e0       	ldi	r22, 0x06	; 6
    1634:	0e 94 81 2b 	call	0x5702	; 0x5702 <LCD_voidMatrix>
	LCD_voidDisplayStr(".");
    1638:	8c e6       	ldi	r24, 0x6C	; 108
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 a8 2b 	call	0x5750	; 0x5750 <LCD_voidDisplayStr>
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a8 ec       	ldi	r26, 0xC8	; 200
    1646:	b3 e4       	ldi	r27, 0x43	; 67
    1648:	8f a3       	std	Y+39, r24	; 0x27
    164a:	98 a7       	std	Y+40, r25	; 0x28
    164c:	a9 a7       	std	Y+41, r26	; 0x29
    164e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1650:	6f a1       	ldd	r22, Y+39	; 0x27
    1652:	78 a5       	ldd	r23, Y+40	; 0x28
    1654:	89 a5       	ldd	r24, Y+41	; 0x29
    1656:	9a a5       	ldd	r25, Y+42	; 0x2a
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	4a e7       	ldi	r20, 0x7A	; 122
    165e:	55 e4       	ldi	r21, 0x45	; 69
    1660:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	8b a3       	std	Y+35, r24	; 0x23
    166a:	9c a3       	std	Y+36, r25	; 0x24
    166c:	ad a3       	std	Y+37, r26	; 0x25
    166e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1670:	6b a1       	ldd	r22, Y+35	; 0x23
    1672:	7c a1       	ldd	r23, Y+36	; 0x24
    1674:	8d a1       	ldd	r24, Y+37	; 0x25
    1676:	9e a1       	ldd	r25, Y+38	; 0x26
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e8       	ldi	r20, 0x80	; 128
    167e:	5f e3       	ldi	r21, 0x3F	; 63
    1680:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1684:	88 23       	and	r24, r24
    1686:	2c f4       	brge	.+10     	; 0x1692 <ReadySteadyGo+0x874>
		__ticks = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9a a3       	std	Y+34, r25	; 0x22
    168e:	89 a3       	std	Y+33, r24	; 0x21
    1690:	3f c0       	rjmp	.+126    	; 0x1710 <ReadySteadyGo+0x8f2>
	else if (__tmp > 65535)
    1692:	6b a1       	ldd	r22, Y+35	; 0x23
    1694:	7c a1       	ldd	r23, Y+36	; 0x24
    1696:	8d a1       	ldd	r24, Y+37	; 0x25
    1698:	9e a1       	ldd	r25, Y+38	; 0x26
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	3f ef       	ldi	r19, 0xFF	; 255
    169e:	4f e7       	ldi	r20, 0x7F	; 127
    16a0:	57 e4       	ldi	r21, 0x47	; 71
    16a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16a6:	18 16       	cp	r1, r24
    16a8:	4c f5       	brge	.+82     	; 0x16fc <ReadySteadyGo+0x8de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16aa:	6f a1       	ldd	r22, Y+39	; 0x27
    16ac:	78 a5       	ldd	r23, Y+40	; 0x28
    16ae:	89 a5       	ldd	r24, Y+41	; 0x29
    16b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e2       	ldi	r20, 0x20	; 32
    16b8:	51 e4       	ldi	r21, 0x41	; 65
    16ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	9a a3       	std	Y+34, r25	; 0x22
    16d0:	89 a3       	std	Y+33, r24	; 0x21
    16d2:	0f c0       	rjmp	.+30     	; 0x16f2 <ReadySteadyGo+0x8d4>
    16d4:	80 e9       	ldi	r24, 0x90	; 144
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	98 a3       	std	Y+32, r25	; 0x20
    16da:	8f 8f       	std	Y+31, r24	; 0x1f
    16dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16de:	98 a1       	ldd	r25, Y+32	; 0x20
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <ReadySteadyGo+0x8c2>
    16e4:	98 a3       	std	Y+32, r25	; 0x20
    16e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e8:	89 a1       	ldd	r24, Y+33	; 0x21
    16ea:	9a a1       	ldd	r25, Y+34	; 0x22
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	9a a3       	std	Y+34, r25	; 0x22
    16f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f2:	89 a1       	ldd	r24, Y+33	; 0x21
    16f4:	9a a1       	ldd	r25, Y+34	; 0x22
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	69 f7       	brne	.-38     	; 0x16d4 <ReadySteadyGo+0x8b6>
    16fa:	14 c0       	rjmp	.+40     	; 0x1724 <ReadySteadyGo+0x906>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fc:	6b a1       	ldd	r22, Y+35	; 0x23
    16fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1700:	8d a1       	ldd	r24, Y+37	; 0x25
    1702:	9e a1       	ldd	r25, Y+38	; 0x26
    1704:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	9a a3       	std	Y+34, r25	; 0x22
    170e:	89 a3       	std	Y+33, r24	; 0x21
    1710:	89 a1       	ldd	r24, Y+33	; 0x21
    1712:	9a a1       	ldd	r25, Y+34	; 0x22
    1714:	9e 8f       	std	Y+30, r25	; 0x1e
    1716:	8d 8f       	std	Y+29, r24	; 0x1d
    1718:	8d 8d       	ldd	r24, Y+29	; 0x1d
    171a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <ReadySteadyGo+0x8fe>
    1720:	9e 8f       	std	Y+30, r25	; 0x1e
    1722:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(400);
	LCD_voidMatrix(0,7);
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	67 e0       	ldi	r22, 0x07	; 7
    1728:	0e 94 81 2b 	call	0x5702	; 0x5702 <LCD_voidMatrix>
	LCD_voidDisplayStr(".");
    172c:	8c e6       	ldi	r24, 0x6C	; 108
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 a8 2b 	call	0x5750	; 0x5750 <LCD_voidDisplayStr>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a8 ec       	ldi	r26, 0xC8	; 200
    173a:	b3 e4       	ldi	r27, 0x43	; 67
    173c:	89 8f       	std	Y+25, r24	; 0x19
    173e:	9a 8f       	std	Y+26, r25	; 0x1a
    1740:	ab 8f       	std	Y+27, r26	; 0x1b
    1742:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1744:	69 8d       	ldd	r22, Y+25	; 0x19
    1746:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1748:	8b 8d       	ldd	r24, Y+27	; 0x1b
    174a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a e7       	ldi	r20, 0x7A	; 122
    1752:	55 e4       	ldi	r21, 0x45	; 69
    1754:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	8d 8b       	std	Y+21, r24	; 0x15
    175e:	9e 8b       	std	Y+22, r25	; 0x16
    1760:	af 8b       	std	Y+23, r26	; 0x17
    1762:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1764:	6d 89       	ldd	r22, Y+21	; 0x15
    1766:	7e 89       	ldd	r23, Y+22	; 0x16
    1768:	8f 89       	ldd	r24, Y+23	; 0x17
    176a:	98 8d       	ldd	r25, Y+24	; 0x18
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e8       	ldi	r20, 0x80	; 128
    1772:	5f e3       	ldi	r21, 0x3F	; 63
    1774:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1778:	88 23       	and	r24, r24
    177a:	2c f4       	brge	.+10     	; 0x1786 <ReadySteadyGo+0x968>
		__ticks = 1;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9c 8b       	std	Y+20, r25	; 0x14
    1782:	8b 8b       	std	Y+19, r24	; 0x13
    1784:	3f c0       	rjmp	.+126    	; 0x1804 <ReadySteadyGo+0x9e6>
	else if (__tmp > 65535)
    1786:	6d 89       	ldd	r22, Y+21	; 0x15
    1788:	7e 89       	ldd	r23, Y+22	; 0x16
    178a:	8f 89       	ldd	r24, Y+23	; 0x17
    178c:	98 8d       	ldd	r25, Y+24	; 0x18
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	3f ef       	ldi	r19, 0xFF	; 255
    1792:	4f e7       	ldi	r20, 0x7F	; 127
    1794:	57 e4       	ldi	r21, 0x47	; 71
    1796:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    179a:	18 16       	cp	r1, r24
    179c:	4c f5       	brge	.+82     	; 0x17f0 <ReadySteadyGo+0x9d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179e:	69 8d       	ldd	r22, Y+25	; 0x19
    17a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e2       	ldi	r20, 0x20	; 32
    17ac:	51 e4       	ldi	r21, 0x41	; 65
    17ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	bc 01       	movw	r22, r24
    17b8:	cd 01       	movw	r24, r26
    17ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	9c 8b       	std	Y+20, r25	; 0x14
    17c4:	8b 8b       	std	Y+19, r24	; 0x13
    17c6:	0f c0       	rjmp	.+30     	; 0x17e6 <ReadySteadyGo+0x9c8>
    17c8:	80 e9       	ldi	r24, 0x90	; 144
    17ca:	91 e0       	ldi	r25, 0x01	; 1
    17cc:	9a 8b       	std	Y+18, r25	; 0x12
    17ce:	89 8b       	std	Y+17, r24	; 0x11
    17d0:	89 89       	ldd	r24, Y+17	; 0x11
    17d2:	9a 89       	ldd	r25, Y+18	; 0x12
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <ReadySteadyGo+0x9b6>
    17d8:	9a 8b       	std	Y+18, r25	; 0x12
    17da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17dc:	8b 89       	ldd	r24, Y+19	; 0x13
    17de:	9c 89       	ldd	r25, Y+20	; 0x14
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	9c 8b       	std	Y+20, r25	; 0x14
    17e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e6:	8b 89       	ldd	r24, Y+19	; 0x13
    17e8:	9c 89       	ldd	r25, Y+20	; 0x14
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	69 f7       	brne	.-38     	; 0x17c8 <ReadySteadyGo+0x9aa>
    17ee:	14 c0       	rjmp	.+40     	; 0x1818 <ReadySteadyGo+0x9fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f0:	6d 89       	ldd	r22, Y+21	; 0x15
    17f2:	7e 89       	ldd	r23, Y+22	; 0x16
    17f4:	8f 89       	ldd	r24, Y+23	; 0x17
    17f6:	98 8d       	ldd	r25, Y+24	; 0x18
    17f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	9c 8b       	std	Y+20, r25	; 0x14
    1802:	8b 8b       	std	Y+19, r24	; 0x13
    1804:	8b 89       	ldd	r24, Y+19	; 0x13
    1806:	9c 89       	ldd	r25, Y+20	; 0x14
    1808:	98 8b       	std	Y+16, r25	; 0x10
    180a:	8f 87       	std	Y+15, r24	; 0x0f
    180c:	8f 85       	ldd	r24, Y+15	; 0x0f
    180e:	98 89       	ldd	r25, Y+16	; 0x10
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <ReadySteadyGo+0x9f2>
    1814:	98 8b       	std	Y+16, r25	; 0x10
    1816:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(400);
	LCD_voidMatrix(0,8);
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	68 e0       	ldi	r22, 0x08	; 8
    181c:	0e 94 81 2b 	call	0x5702	; 0x5702 <LCD_voidMatrix>
	LCD_voidDisplayStr(".");
    1820:	8c e6       	ldi	r24, 0x6C	; 108
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 a8 2b 	call	0x5750	; 0x5750 <LCD_voidDisplayStr>
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e8       	ldi	r25, 0x80	; 128
    182c:	ab eb       	ldi	r26, 0xBB	; 187
    182e:	b5 e4       	ldi	r27, 0x45	; 69
    1830:	8b 87       	std	Y+11, r24	; 0x0b
    1832:	9c 87       	std	Y+12, r25	; 0x0c
    1834:	ad 87       	std	Y+13, r26	; 0x0d
    1836:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1838:	6b 85       	ldd	r22, Y+11	; 0x0b
    183a:	7c 85       	ldd	r23, Y+12	; 0x0c
    183c:	8d 85       	ldd	r24, Y+13	; 0x0d
    183e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	4a e7       	ldi	r20, 0x7A	; 122
    1846:	55 e4       	ldi	r21, 0x45	; 69
    1848:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	8f 83       	std	Y+7, r24	; 0x07
    1852:	98 87       	std	Y+8, r25	; 0x08
    1854:	a9 87       	std	Y+9, r26	; 0x09
    1856:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1858:	6f 81       	ldd	r22, Y+7	; 0x07
    185a:	78 85       	ldd	r23, Y+8	; 0x08
    185c:	89 85       	ldd	r24, Y+9	; 0x09
    185e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e8       	ldi	r20, 0x80	; 128
    1866:	5f e3       	ldi	r21, 0x3F	; 63
    1868:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    186c:	88 23       	and	r24, r24
    186e:	2c f4       	brge	.+10     	; 0x187a <ReadySteadyGo+0xa5c>
		__ticks = 1;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9e 83       	std	Y+6, r25	; 0x06
    1876:	8d 83       	std	Y+5, r24	; 0x05
    1878:	3f c0       	rjmp	.+126    	; 0x18f8 <ReadySteadyGo+0xada>
	else if (__tmp > 65535)
    187a:	6f 81       	ldd	r22, Y+7	; 0x07
    187c:	78 85       	ldd	r23, Y+8	; 0x08
    187e:	89 85       	ldd	r24, Y+9	; 0x09
    1880:	9a 85       	ldd	r25, Y+10	; 0x0a
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	3f ef       	ldi	r19, 0xFF	; 255
    1886:	4f e7       	ldi	r20, 0x7F	; 127
    1888:	57 e4       	ldi	r21, 0x47	; 71
    188a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    188e:	18 16       	cp	r1, r24
    1890:	4c f5       	brge	.+82     	; 0x18e4 <ReadySteadyGo+0xac6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1892:	6b 85       	ldd	r22, Y+11	; 0x0b
    1894:	7c 85       	ldd	r23, Y+12	; 0x0c
    1896:	8d 85       	ldd	r24, Y+13	; 0x0d
    1898:	9e 85       	ldd	r25, Y+14	; 0x0e
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e2       	ldi	r20, 0x20	; 32
    18a0:	51 e4       	ldi	r21, 0x41	; 65
    18a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	bc 01       	movw	r22, r24
    18ac:	cd 01       	movw	r24, r26
    18ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	9e 83       	std	Y+6, r25	; 0x06
    18b8:	8d 83       	std	Y+5, r24	; 0x05
    18ba:	0f c0       	rjmp	.+30     	; 0x18da <ReadySteadyGo+0xabc>
    18bc:	80 e9       	ldi	r24, 0x90	; 144
    18be:	91 e0       	ldi	r25, 0x01	; 1
    18c0:	9c 83       	std	Y+4, r25	; 0x04
    18c2:	8b 83       	std	Y+3, r24	; 0x03
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <ReadySteadyGo+0xaaa>
    18cc:	9c 83       	std	Y+4, r25	; 0x04
    18ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	9e 83       	std	Y+6, r25	; 0x06
    18d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	69 f7       	brne	.-38     	; 0x18bc <ReadySteadyGo+0xa9e>
    18e2:	14 c0       	rjmp	.+40     	; 0x190c <ReadySteadyGo+0xaee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e4:	6f 81       	ldd	r22, Y+7	; 0x07
    18e6:	78 85       	ldd	r23, Y+8	; 0x08
    18e8:	89 85       	ldd	r24, Y+9	; 0x09
    18ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	9e 83       	std	Y+6, r25	; 0x06
    18f6:	8d 83       	std	Y+5, r24	; 0x05
    18f8:	8d 81       	ldd	r24, Y+5	; 0x05
    18fa:	9e 81       	ldd	r25, Y+6	; 0x06
    18fc:	9a 83       	std	Y+2, r25	; 0x02
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	9a 81       	ldd	r25, Y+2	; 0x02
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <ReadySteadyGo+0xae6>
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(6000);

	LCD_voidCMD(_LCD_CLEAR);
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	0e 94 6f 2a 	call	0x54de	; 0x54de <LCD_voidCMD>
	LCD_voidMatrix(0,0);
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	0e 94 81 2b 	call	0x5702	; 0x5702 <LCD_voidMatrix>
	LCD_voidDisplayStr("GO!!!!");
    191a:	85 e7       	ldi	r24, 0x75	; 117
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 a8 2b 	call	0x5750	; 0x5750 <LCD_voidDisplayStr>

}
    1922:	c2 58       	subi	r28, 0x82	; 130
    1924:	df 4f       	sbci	r29, 0xFF	; 255
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	08 95       	ret

0000193a <GloveSendInit>:

void GloveSendInit(void)
{
    193a:	0f 93       	push	r16
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
	UART_voidInit(9600,UART_PARITY_DISABLED,UART_AsynchronousOperation,UART_STOP_2_BIT);
    1944:	60 e8       	ldi	r22, 0x80	; 128
    1946:	75 e2       	ldi	r23, 0x25	; 37
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	01 e0       	ldi	r16, 0x01	; 1
    1952:	0e 94 71 31 	call	0x62e2	; 0x62e2 <UART_voidInit>
	UART_Init(9600);
    1956:	60 e8       	ldi	r22, 0x80	; 128
    1958:	75 e2       	ldi	r23, 0x25	; 37
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <UART_Init>
	DC_Motor_voidInit();
    1962:	0e 94 56 2f 	call	0x5eac	; 0x5eac <DC_Motor_voidInit>
	//ADC_voidInit();
	ADC_voidInit(ADC_AVCC);
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	0e 94 42 39 	call	0x7284	; 0x7284 <ADC_voidInit>

}
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	0f 91       	pop	r16
    1972:	08 95       	ret

00001974 <CarForward_Send>:
void CarForward_Send(void)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendByte('q');
    197c:	81 e7       	ldi	r24, 0x71	; 113
    197e:	0e 94 bf 32 	call	0x657e	; 0x657e <UART_voidSendByte>
}
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <CarForwardFullSpeed_Send>:
void CarForwardFullSpeed_Send(void)
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendByte('w');
    1990:	87 e7       	ldi	r24, 0x77	; 119
    1992:	0e 94 bf 32 	call	0x657e	; 0x657e <UART_voidSendByte>
}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <CarBackward_Send>:
void CarBackward_Send(void)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendByte('s');
    19a4:	83 e7       	ldi	r24, 0x73	; 115
    19a6:	0e 94 bf 32 	call	0x657e	; 0x657e <UART_voidSendByte>
}
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <CarSteerRight_Send>:
void CarSteerRight_Send(void)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendByte('d');
    19b8:	84 e6       	ldi	r24, 0x64	; 100
    19ba:	0e 94 bf 32 	call	0x657e	; 0x657e <UART_voidSendByte>
}
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <CarSteerLeft_Send>:
void CarSteerLeft_Send(void)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendByte('a');
    19cc:	81 e6       	ldi	r24, 0x61	; 97
    19ce:	0e 94 bf 32 	call	0x657e	; 0x657e <UART_voidSendByte>
}
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <CarStop_Send>:
void CarStop_Send(void)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendByte('x');
    19e0:	88 e7       	ldi	r24, 0x78	; 120
    19e2:	0e 94 bf 32 	call	0x657e	; 0x657e <UART_voidSendByte>
}
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <Thumb_IsBent>:

boolean Thumb_IsBent(){
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	0f 92       	push	r0
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
	if(thumb<=min_low_speed && thumb>=max_full_speed){
    19f6:	84 e0       	ldi	r24, 0x04	; 4
    19f8:	0e 94 6f 39 	call	0x72de	; 0x72de <ADC_u16ReadSteps>
    19fc:	22 e0       	ldi	r18, 0x02	; 2
    19fe:	89 35       	cpi	r24, 0x59	; 89
    1a00:	92 07       	cpc	r25, r18
    1a02:	48 f4       	brcc	.+18     	; 0x1a16 <Thumb_IsBent+0x2a>
    1a04:	84 e0       	ldi	r24, 0x04	; 4
    1a06:	0e 94 6f 39 	call	0x72de	; 0x72de <ADC_u16ReadSteps>
    1a0a:	88 37       	cpi	r24, 0x78	; 120
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	18 f0       	brcs	.+6      	; 0x1a16 <Thumb_IsBent+0x2a>
		return 1;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	01 c0       	rjmp	.+2      	; 0x1a18 <Thumb_IsBent+0x2c>
	}
	else return 0;
    1a16:	19 82       	std	Y+1, r1	; 0x01
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a1a:	0f 90       	pop	r0
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <MiddleFinger_IsBent>:

boolean MiddleFinger_IsBent(){
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	0f 92       	push	r0
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
	if(middle_finger>=min_bent && middle_finger<=max_bent){
    1a2c:	86 e0       	ldi	r24, 0x06	; 6
    1a2e:	0e 94 6f 39 	call	0x72de	; 0x72de <ADC_u16ReadSteps>
    1a32:	88 37       	cpi	r24, 0x78	; 120
    1a34:	91 05       	cpc	r25, r1
    1a36:	50 f0       	brcs	.+20     	; 0x1a4c <MiddleFinger_IsBent+0x2a>
    1a38:	86 e0       	ldi	r24, 0x06	; 6
    1a3a:	0e 94 6f 39 	call	0x72de	; 0x72de <ADC_u16ReadSteps>
    1a3e:	22 e0       	ldi	r18, 0x02	; 2
    1a40:	89 35       	cpi	r24, 0x59	; 89
    1a42:	92 07       	cpc	r25, r18
    1a44:	18 f4       	brcc	.+6      	; 0x1a4c <MiddleFinger_IsBent+0x2a>
		return 1;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	01 c0       	rjmp	.+2      	; 0x1a4e <MiddleFinger_IsBent+0x2c>
	}
	else return 0;
    1a4c:	19 82       	std	Y+1, r1	; 0x01
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a50:	0f 90       	pop	r0
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <IndexFinger_IsBent>:

boolean IndexFinger_IsBent(){
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	0f 92       	push	r0
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
	if(index_finger>=min_bent && index_finger<=max_bent){
    1a62:	85 e0       	ldi	r24, 0x05	; 5
    1a64:	0e 94 6f 39 	call	0x72de	; 0x72de <ADC_u16ReadSteps>
    1a68:	88 37       	cpi	r24, 0x78	; 120
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	50 f0       	brcs	.+20     	; 0x1a82 <IndexFinger_IsBent+0x2a>
    1a6e:	85 e0       	ldi	r24, 0x05	; 5
    1a70:	0e 94 6f 39 	call	0x72de	; 0x72de <ADC_u16ReadSteps>
    1a74:	22 e0       	ldi	r18, 0x02	; 2
    1a76:	89 35       	cpi	r24, 0x59	; 89
    1a78:	92 07       	cpc	r25, r18
    1a7a:	18 f4       	brcc	.+6      	; 0x1a82 <IndexFinger_IsBent+0x2a>
		return 1;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <IndexFinger_IsBent+0x2c>
	}
	else return 0;
    1a82:	19 82       	std	Y+1, r1	; 0x01
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a86:	0f 90       	pop	r0
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <Thumb_IsLowSpeed>:

boolean Thumb_IsLowSpeed(){
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	0f 92       	push	r0
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
	if(thumb<=min_low_speed && thumb>max_low_speed){
    1a98:	84 e0       	ldi	r24, 0x04	; 4
    1a9a:	0e 94 6f 39 	call	0x72de	; 0x72de <ADC_u16ReadSteps>
    1a9e:	22 e0       	ldi	r18, 0x02	; 2
    1aa0:	89 35       	cpi	r24, 0x59	; 89
    1aa2:	92 07       	cpc	r25, r18
    1aa4:	48 f4       	brcc	.+18     	; 0x1ab8 <Thumb_IsLowSpeed+0x2a>
    1aa6:	84 e0       	ldi	r24, 0x04	; 4
    1aa8:	0e 94 6f 39 	call	0x72de	; 0x72de <ADC_u16ReadSteps>
    1aac:	89 3c       	cpi	r24, 0xC9	; 201
    1aae:	91 05       	cpc	r25, r1
    1ab0:	18 f0       	brcs	.+6      	; 0x1ab8 <Thumb_IsLowSpeed+0x2a>
		return 1;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	01 c0       	rjmp	.+2      	; 0x1aba <Thumb_IsLowSpeed+0x2c>
	}
	else return 0;
    1ab8:	19 82       	std	Y+1, r1	; 0x01
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <Thumb_IsFullSpeed>:

boolean Thumb_IsFullSpeed(){
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	0f 92       	push	r0
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
	if(thumb<=min_full_speed && thumb>max_full_speed){
    1ace:	84 e0       	ldi	r24, 0x04	; 4
    1ad0:	0e 94 6f 39 	call	0x72de	; 0x72de <ADC_u16ReadSteps>
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	8c 32       	cpi	r24, 0x2C	; 44
    1ad8:	92 07       	cpc	r25, r18
    1ada:	48 f4       	brcc	.+18     	; 0x1aee <Thumb_IsFullSpeed+0x2a>
    1adc:	84 e0       	ldi	r24, 0x04	; 4
    1ade:	0e 94 6f 39 	call	0x72de	; 0x72de <ADC_u16ReadSteps>
    1ae2:	89 37       	cpi	r24, 0x79	; 121
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	18 f0       	brcs	.+6      	; 0x1aee <Thumb_IsFullSpeed+0x2a>
		return 1;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <Thumb_IsFullSpeed+0x2c>
	}
	else return 0;
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <Execute_glove_sender>:

void Execute_glove_sender()
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
	if(Thumb_IsBent()){
    1b02:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <Thumb_IsBent>
    1b06:	88 23       	and	r24, r24
    1b08:	e1 f0       	breq	.+56     	; 0x1b42 <Execute_glove_sender+0x48>
		if(MiddleFinger_IsBent())
    1b0a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <MiddleFinger_IsBent>
    1b0e:	88 23       	and	r24, r24
    1b10:	19 f0       	breq	.+6      	; 0x1b18 <Execute_glove_sender+0x1e>
		{
			//steer right
			CarSteerRight_Send();
    1b12:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <CarSteerRight_Send>
    1b16:	38 c0       	rjmp	.+112    	; 0x1b88 <Execute_glove_sender+0x8e>
			return;
		}
		else if(IndexFinger_IsBent()){
    1b18:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <IndexFinger_IsBent>
    1b1c:	88 23       	and	r24, r24
    1b1e:	19 f0       	breq	.+6      	; 0x1b26 <Execute_glove_sender+0x2c>
			//steer left
			CarSteerLeft_Send();
    1b20:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <CarSteerLeft_Send>
    1b24:	31 c0       	rjmp	.+98     	; 0x1b88 <Execute_glove_sender+0x8e>
			return;
		}
		else {
			if(Thumb_IsLowSpeed()){
    1b26:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <Thumb_IsLowSpeed>
    1b2a:	88 23       	and	r24, r24
    1b2c:	19 f0       	breq	.+6      	; 0x1b34 <Execute_glove_sender+0x3a>
				//move forward low speed
				CarForward_Send();
    1b2e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <CarForward_Send>
    1b32:	2a c0       	rjmp	.+84     	; 0x1b88 <Execute_glove_sender+0x8e>
				return;
			}
			else if(Thumb_IsFullSpeed()){
    1b34:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <Thumb_IsFullSpeed>
    1b38:	88 23       	and	r24, r24
    1b3a:	31 f1       	breq	.+76     	; 0x1b88 <Execute_glove_sender+0x8e>
				//move forward full speed
				CarForwardFullSpeed_Send();
    1b3c:	0e 94 c4 0c 	call	0x1988	; 0x1988 <CarForwardFullSpeed_Send>
    1b40:	23 c0       	rjmp	.+70     	; 0x1b88 <Execute_glove_sender+0x8e>
				return;
			}
		}
	}

	else if(IndexFinger_IsBent()){
    1b42:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <IndexFinger_IsBent>
    1b46:	88 23       	and	r24, r24
    1b48:	89 f0       	breq	.+34     	; 0x1b6c <Execute_glove_sender+0x72>
		if(MiddleFinger_IsBent()){
    1b4a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <MiddleFinger_IsBent>
    1b4e:	88 23       	and	r24, r24
    1b50:	51 f0       	breq	.+20     	; 0x1b66 <Execute_glove_sender+0x6c>
			//lights
			LED_voidFLASH(LED0);
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	0e 94 25 12 	call	0x244a	; 0x244a <LED_voidFLASH>
			LED_voidFLASH(LED1);
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	0e 94 25 12 	call	0x244a	; 0x244a <LED_voidFLASH>
			LED_voidFLASH(LED2);
    1b5e:	82 e0       	ldi	r24, 0x02	; 2
    1b60:	0e 94 25 12 	call	0x244a	; 0x244a <LED_voidFLASH>
    1b64:	11 c0       	rjmp	.+34     	; 0x1b88 <Execute_glove_sender+0x8e>
			return;
		}
		else{
			//backward
			CarBackward_Send();
    1b66:	0e 94 ce 0c 	call	0x199c	; 0x199c <CarBackward_Send>
    1b6a:	0e c0       	rjmp	.+28     	; 0x1b88 <Execute_glove_sender+0x8e>
			return;
		}
	}
	else if(MiddleFinger_IsBent() && (!Thumb_IsBent() && !IndexFinger_IsBent())){
    1b6c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <MiddleFinger_IsBent>
    1b70:	88 23       	and	r24, r24
    1b72:	51 f0       	breq	.+20     	; 0x1b88 <Execute_glove_sender+0x8e>
    1b74:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <Thumb_IsBent>
    1b78:	88 23       	and	r24, r24
    1b7a:	31 f4       	brne	.+12     	; 0x1b88 <Execute_glove_sender+0x8e>
    1b7c:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <IndexFinger_IsBent>
    1b80:	88 23       	and	r24, r24
    1b82:	11 f4       	brne	.+4      	; 0x1b88 <Execute_glove_sender+0x8e>
		//break
		CarStop_Send();
    1b84:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <CarStop_Send>
		return;
	}
}
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <main>:
	 *  Author: Eng_Fawzi
	 ***************************************/
#include "All_includes.h"

	int main(void)
	{
    1b8e:	0f 93       	push	r16
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
			//initialize needed drivers
			WakeUp_Call();
    1b98:	0e 94 2e 39 	call	0x725c	; 0x725c <WakeUp_Call>
			UART_voidInit(9600,UART_PARITY_DISABLED,UART_AsynchronousOperation,UART_STOP_2_BIT);
    1b9c:	60 e8       	ldi	r22, 0x80	; 128
    1b9e:	75 e2       	ldi	r23, 0x25	; 37
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	01 e0       	ldi	r16, 0x01	; 1
    1baa:	0e 94 71 31 	call	0x62e2	; 0x62e2 <UART_voidInit>
			UART_Init(9600);
    1bae:	60 e8       	ldi	r22, 0x80	; 128
    1bb0:	75 e2       	ldi	r23, 0x25	; 37
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <UART_Init>
			ReadySteadyGo();
    1bba:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ReadySteadyGo>

			while(1){
				Execute_glove_sender();
    1bbe:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <Execute_glove_sender>
    1bc2:	fd cf       	rjmp	.-6      	; 0x1bbe <main+0x30>

00001bc4 <SSD_voidInit>:
#include "SSD.h"
#include "DIO.h"
#include <util/delay.h>

void SSD_voidInit(void)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
	//Enable configuration
	DIO_voidconfigureChannel(DIO_PORTB,DIO_PIN1,DIO_OUTPUT);
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	61 e0       	ldi	r22, 0x01	; 1
    1bd0:	41 e0       	ldi	r20, 0x01	; 1
    1bd2:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTB,DIO_PIN2,DIO_OUTPUT);
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	62 e0       	ldi	r22, 0x02	; 2
    1bda:	41 e0       	ldi	r20, 0x01	; 1
    1bdc:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	//Pins configuration
	DIO_voidconfigureChannel(DIO_PORTA,DIO_PIN4,DIO_OUTPUT);
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	64 e0       	ldi	r22, 0x04	; 4
    1be4:	41 e0       	ldi	r20, 0x01	; 1
    1be6:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTA,DIO_PIN5,DIO_OUTPUT);
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	65 e0       	ldi	r22, 0x05	; 5
    1bee:	41 e0       	ldi	r20, 0x01	; 1
    1bf0:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTA,DIO_PIN6,DIO_OUTPUT);
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	66 e0       	ldi	r22, 0x06	; 6
    1bf8:	41 e0       	ldi	r20, 0x01	; 1
    1bfa:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTA,DIO_PIN7,DIO_OUTPUT);
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	67 e0       	ldi	r22, 0x07	; 7
    1c02:	41 e0       	ldi	r20, 0x01	; 1
    1c04:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>


}
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <SSD_voidDisplayNum>:
void SSD_voidDisplayNum(u8 num)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	e3 97       	sbiw	r28, 0x33	; 51
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	8b ab       	std	Y+51, r24	; 0x33
	u8 loc_secondDigit = (num%10)<<4;  //0000 0101  -> 0101 0000
    1c24:	8b a9       	ldd	r24, Y+51	; 0x33
    1c26:	9a e0       	ldi	r25, 0x0A	; 10
    1c28:	69 2f       	mov	r22, r25
    1c2a:	0e 94 17 3a 	call	0x742e	; 0x742e <__udivmodqi4>
    1c2e:	89 2f       	mov	r24, r25
    1c30:	82 95       	swap	r24
    1c32:	80 7f       	andi	r24, 0xF0	; 240
    1c34:	8a ab       	std	Y+50, r24	; 0x32
	u8 loc_firstDigit = (num/10)<<4;   //0000 0010
    1c36:	8b a9       	ldd	r24, Y+51	; 0x33
    1c38:	9a e0       	ldi	r25, 0x0A	; 10
    1c3a:	69 2f       	mov	r22, r25
    1c3c:	0e 94 17 3a 	call	0x742e	; 0x742e <__udivmodqi4>
    1c40:	82 95       	swap	r24
    1c42:	80 7f       	andi	r24, 0xF0	; 240
    1c44:	89 ab       	std	Y+49, r24	; 0x31

	//Enable SSD 1 -> En1 = High
	DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN2,DIO_HIGH);
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	62 e0       	ldi	r22, 0x02	; 2
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	//Disable SSD 2 -> En2 = Low
	DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN1,DIO_LOW);
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	61 e0       	ldi	r22, 0x01	; 1
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	// Write First Digit
	DIO_voidWRITEChannelGroup(DIO_PORTA,loc_firstDigit, SSD_MASK);
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c5e:	4f e0       	ldi	r20, 0x0F	; 15
    1c60:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <DIO_voidWRITEChannelGroup>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a6 e9       	ldi	r26, 0x96	; 150
    1c6a:	b3 e4       	ldi	r27, 0x43	; 67
    1c6c:	8d a7       	std	Y+45, r24	; 0x2d
    1c6e:	9e a7       	std	Y+46, r25	; 0x2e
    1c70:	af a7       	std	Y+47, r26	; 0x2f
    1c72:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c74:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c76:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c7c:	2b ea       	ldi	r18, 0xAB	; 171
    1c7e:	3a ea       	ldi	r19, 0xAA	; 170
    1c80:	4a ea       	ldi	r20, 0xAA	; 170
    1c82:	50 e4       	ldi	r21, 0x40	; 64
    1c84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	89 a7       	std	Y+41, r24	; 0x29
    1c8e:	9a a7       	std	Y+42, r25	; 0x2a
    1c90:	ab a7       	std	Y+43, r26	; 0x2b
    1c92:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1c94:	69 a5       	ldd	r22, Y+41	; 0x29
    1c96:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c98:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	1c f4       	brge	.+6      	; 0x1cb2 <SSD_voidDisplayNum+0xa4>
		__ticks = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	88 a7       	std	Y+40, r24	; 0x28
    1cb0:	91 c0       	rjmp	.+290    	; 0x1dd4 <SSD_voidDisplayNum+0x1c6>
	else if (__tmp > 255)
    1cb2:	69 a5       	ldd	r22, Y+41	; 0x29
    1cb4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4f e7       	ldi	r20, 0x7F	; 127
    1cc0:	53 e4       	ldi	r21, 0x43	; 67
    1cc2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cc6:	18 16       	cp	r1, r24
    1cc8:	0c f0       	brlt	.+2      	; 0x1ccc <SSD_voidDisplayNum+0xbe>
    1cca:	7b c0       	rjmp	.+246    	; 0x1dc2 <SSD_voidDisplayNum+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    1ccc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1cce:	7e a5       	ldd	r23, Y+46	; 0x2e
    1cd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	4a e7       	ldi	r20, 0x7A	; 122
    1cda:	54 e4       	ldi	r21, 0x44	; 68
    1cdc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	8c a3       	std	Y+36, r24	; 0x24
    1ce6:	9d a3       	std	Y+37, r25	; 0x25
    1ce8:	ae a3       	std	Y+38, r26	; 0x26
    1cea:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cec:	6c a1       	ldd	r22, Y+36	; 0x24
    1cee:	7d a1       	ldd	r23, Y+37	; 0x25
    1cf0:	8e a1       	ldd	r24, Y+38	; 0x26
    1cf2:	9f a1       	ldd	r25, Y+39	; 0x27
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	4a e7       	ldi	r20, 0x7A	; 122
    1cfa:	55 e4       	ldi	r21, 0x45	; 69
    1cfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	88 a3       	std	Y+32, r24	; 0x20
    1d06:	99 a3       	std	Y+33, r25	; 0x21
    1d08:	aa a3       	std	Y+34, r26	; 0x22
    1d0a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1d0c:	68 a1       	ldd	r22, Y+32	; 0x20
    1d0e:	79 a1       	ldd	r23, Y+33	; 0x21
    1d10:	8a a1       	ldd	r24, Y+34	; 0x22
    1d12:	9b a1       	ldd	r25, Y+35	; 0x23
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e8       	ldi	r20, 0x80	; 128
    1d1a:	5f e3       	ldi	r21, 0x3F	; 63
    1d1c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d20:	88 23       	and	r24, r24
    1d22:	2c f4       	brge	.+10     	; 0x1d2e <SSD_voidDisplayNum+0x120>
		__ticks = 1;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	9f 8f       	std	Y+31, r25	; 0x1f
    1d2a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d2c:	3f c0       	rjmp	.+126    	; 0x1dac <SSD_voidDisplayNum+0x19e>
	else if (__tmp > 65535)
    1d2e:	68 a1       	ldd	r22, Y+32	; 0x20
    1d30:	79 a1       	ldd	r23, Y+33	; 0x21
    1d32:	8a a1       	ldd	r24, Y+34	; 0x22
    1d34:	9b a1       	ldd	r25, Y+35	; 0x23
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	3f ef       	ldi	r19, 0xFF	; 255
    1d3a:	4f e7       	ldi	r20, 0x7F	; 127
    1d3c:	57 e4       	ldi	r21, 0x47	; 71
    1d3e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d42:	18 16       	cp	r1, r24
    1d44:	4c f5       	brge	.+82     	; 0x1d98 <SSD_voidDisplayNum+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d46:	6c a1       	ldd	r22, Y+36	; 0x24
    1d48:	7d a1       	ldd	r23, Y+37	; 0x25
    1d4a:	8e a1       	ldd	r24, Y+38	; 0x26
    1d4c:	9f a1       	ldd	r25, Y+39	; 0x27
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e2       	ldi	r20, 0x20	; 32
    1d54:	51 e4       	ldi	r21, 0x41	; 65
    1d56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	bc 01       	movw	r22, r24
    1d60:	cd 01       	movw	r24, r26
    1d62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	9f 8f       	std	Y+31, r25	; 0x1f
    1d6c:	8e 8f       	std	Y+30, r24	; 0x1e
    1d6e:	0f c0       	rjmp	.+30     	; 0x1d8e <SSD_voidDisplayNum+0x180>
    1d70:	80 e9       	ldi	r24, 0x90	; 144
    1d72:	91 e0       	ldi	r25, 0x01	; 1
    1d74:	9d 8f       	std	Y+29, r25	; 0x1d
    1d76:	8c 8f       	std	Y+28, r24	; 0x1c
    1d78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d7a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <SSD_voidDisplayNum+0x16e>
    1d80:	9d 8f       	std	Y+29, r25	; 0x1d
    1d82:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d86:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	9f 8f       	std	Y+31, r25	; 0x1f
    1d8c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d90:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	69 f7       	brne	.-38     	; 0x1d70 <SSD_voidDisplayNum+0x162>
    1d96:	24 c0       	rjmp	.+72     	; 0x1de0 <SSD_voidDisplayNum+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d98:	68 a1       	ldd	r22, Y+32	; 0x20
    1d9a:	79 a1       	ldd	r23, Y+33	; 0x21
    1d9c:	8a a1       	ldd	r24, Y+34	; 0x22
    1d9e:	9b a1       	ldd	r25, Y+35	; 0x23
    1da0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	9f 8f       	std	Y+31, r25	; 0x1f
    1daa:	8e 8f       	std	Y+30, r24	; 0x1e
    1dac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1db0:	9b 8f       	std	Y+27, r25	; 0x1b
    1db2:	8a 8f       	std	Y+26, r24	; 0x1a
    1db4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1db6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <SSD_voidDisplayNum+0x1aa>
    1dbc:	9b 8f       	std	Y+27, r25	; 0x1b
    1dbe:	8a 8f       	std	Y+26, r24	; 0x1a
    1dc0:	0f c0       	rjmp	.+30     	; 0x1de0 <SSD_voidDisplayNum+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dc2:	69 a5       	ldd	r22, Y+41	; 0x29
    1dc4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1dc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	88 a7       	std	Y+40, r24	; 0x28
    1dd4:	88 a5       	ldd	r24, Y+40	; 0x28
    1dd6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dd8:	89 8d       	ldd	r24, Y+25	; 0x19
    1dda:	8a 95       	dec	r24
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <SSD_voidDisplayNum+0x1cc>
    1dde:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(300);

	//Disable SSD 1 -> En1 = Low
	DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN2,DIO_LOW);
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	62 e0       	ldi	r22, 0x02	; 2
    1de4:	40 e0       	ldi	r20, 0x00	; 0
    1de6:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	//Enable SSD 2 -> En2 = High
	DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN1,DIO_HIGH);
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	61 e0       	ldi	r22, 0x01	; 1
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	// Write Second Digit
	DIO_voidWRITEChannelGroup(DIO_PORTA,loc_secondDigit, SSD_MASK);
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	6a a9       	ldd	r22, Y+50	; 0x32
    1df8:	4f e0       	ldi	r20, 0x0F	; 15
    1dfa:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <DIO_voidWRITEChannelGroup>
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	a6 e9       	ldi	r26, 0x96	; 150
    1e04:	b3 e4       	ldi	r27, 0x43	; 67
    1e06:	8d 8b       	std	Y+21, r24	; 0x15
    1e08:	9e 8b       	std	Y+22, r25	; 0x16
    1e0a:	af 8b       	std	Y+23, r26	; 0x17
    1e0c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e10:	7e 89       	ldd	r23, Y+22	; 0x16
    1e12:	8f 89       	ldd	r24, Y+23	; 0x17
    1e14:	98 8d       	ldd	r25, Y+24	; 0x18
    1e16:	2b ea       	ldi	r18, 0xAB	; 171
    1e18:	3a ea       	ldi	r19, 0xAA	; 170
    1e1a:	4a ea       	ldi	r20, 0xAA	; 170
    1e1c:	50 e4       	ldi	r21, 0x40	; 64
    1e1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	89 8b       	std	Y+17, r24	; 0x11
    1e28:	9a 8b       	std	Y+18, r25	; 0x12
    1e2a:	ab 8b       	std	Y+19, r26	; 0x13
    1e2c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e2e:	69 89       	ldd	r22, Y+17	; 0x11
    1e30:	7a 89       	ldd	r23, Y+18	; 0x12
    1e32:	8b 89       	ldd	r24, Y+19	; 0x13
    1e34:	9c 89       	ldd	r25, Y+20	; 0x14
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e8       	ldi	r20, 0x80	; 128
    1e3c:	5f e3       	ldi	r21, 0x3F	; 63
    1e3e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e42:	88 23       	and	r24, r24
    1e44:	1c f4       	brge	.+6      	; 0x1e4c <SSD_voidDisplayNum+0x23e>
		__ticks = 1;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	88 8b       	std	Y+16, r24	; 0x10
    1e4a:	91 c0       	rjmp	.+290    	; 0x1f6e <SSD_voidDisplayNum+0x360>
	else if (__tmp > 255)
    1e4c:	69 89       	ldd	r22, Y+17	; 0x11
    1e4e:	7a 89       	ldd	r23, Y+18	; 0x12
    1e50:	8b 89       	ldd	r24, Y+19	; 0x13
    1e52:	9c 89       	ldd	r25, Y+20	; 0x14
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4f e7       	ldi	r20, 0x7F	; 127
    1e5a:	53 e4       	ldi	r21, 0x43	; 67
    1e5c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e60:	18 16       	cp	r1, r24
    1e62:	0c f0       	brlt	.+2      	; 0x1e66 <SSD_voidDisplayNum+0x258>
    1e64:	7b c0       	rjmp	.+246    	; 0x1f5c <SSD_voidDisplayNum+0x34e>
	{
		_delay_ms(__us / 1000.0);
    1e66:	6d 89       	ldd	r22, Y+21	; 0x15
    1e68:	7e 89       	ldd	r23, Y+22	; 0x16
    1e6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a e7       	ldi	r20, 0x7A	; 122
    1e74:	54 e4       	ldi	r21, 0x44	; 68
    1e76:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	8c 87       	std	Y+12, r24	; 0x0c
    1e80:	9d 87       	std	Y+13, r25	; 0x0d
    1e82:	ae 87       	std	Y+14, r26	; 0x0e
    1e84:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e86:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e88:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	4a e7       	ldi	r20, 0x7A	; 122
    1e94:	55 e4       	ldi	r21, 0x45	; 69
    1e96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	88 87       	std	Y+8, r24	; 0x08
    1ea0:	99 87       	std	Y+9, r25	; 0x09
    1ea2:	aa 87       	std	Y+10, r26	; 0x0a
    1ea4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ea6:	68 85       	ldd	r22, Y+8	; 0x08
    1ea8:	79 85       	ldd	r23, Y+9	; 0x09
    1eaa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eac:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5f e3       	ldi	r21, 0x3F	; 63
    1eb6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	2c f4       	brge	.+10     	; 0x1ec8 <SSD_voidDisplayNum+0x2ba>
		__ticks = 1;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	9f 83       	std	Y+7, r25	; 0x07
    1ec4:	8e 83       	std	Y+6, r24	; 0x06
    1ec6:	3f c0       	rjmp	.+126    	; 0x1f46 <SSD_voidDisplayNum+0x338>
	else if (__tmp > 65535)
    1ec8:	68 85       	ldd	r22, Y+8	; 0x08
    1eca:	79 85       	ldd	r23, Y+9	; 0x09
    1ecc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ece:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	3f ef       	ldi	r19, 0xFF	; 255
    1ed4:	4f e7       	ldi	r20, 0x7F	; 127
    1ed6:	57 e4       	ldi	r21, 0x47	; 71
    1ed8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1edc:	18 16       	cp	r1, r24
    1ede:	4c f5       	brge	.+82     	; 0x1f32 <SSD_voidDisplayNum+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ee2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ee4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ee6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e2       	ldi	r20, 0x20	; 32
    1eee:	51 e4       	ldi	r21, 0x41	; 65
    1ef0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	bc 01       	movw	r22, r24
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	9f 83       	std	Y+7, r25	; 0x07
    1f06:	8e 83       	std	Y+6, r24	; 0x06
    1f08:	0f c0       	rjmp	.+30     	; 0x1f28 <SSD_voidDisplayNum+0x31a>
    1f0a:	80 e9       	ldi	r24, 0x90	; 144
    1f0c:	91 e0       	ldi	r25, 0x01	; 1
    1f0e:	9d 83       	std	Y+5, r25	; 0x05
    1f10:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	9d 81       	ldd	r25, Y+5	; 0x05
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <SSD_voidDisplayNum+0x308>
    1f1a:	9d 83       	std	Y+5, r25	; 0x05
    1f1c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f20:	9f 81       	ldd	r25, Y+7	; 0x07
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	9f 83       	std	Y+7, r25	; 0x07
    1f26:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f28:	8e 81       	ldd	r24, Y+6	; 0x06
    1f2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	69 f7       	brne	.-38     	; 0x1f0a <SSD_voidDisplayNum+0x2fc>
    1f30:	24 c0       	rjmp	.+72     	; 0x1f7a <SSD_voidDisplayNum+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f32:	68 85       	ldd	r22, Y+8	; 0x08
    1f34:	79 85       	ldd	r23, Y+9	; 0x09
    1f36:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f38:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9f 83       	std	Y+7, r25	; 0x07
    1f44:	8e 83       	std	Y+6, r24	; 0x06
    1f46:	8e 81       	ldd	r24, Y+6	; 0x06
    1f48:	9f 81       	ldd	r25, Y+7	; 0x07
    1f4a:	9b 83       	std	Y+3, r25	; 0x03
    1f4c:	8a 83       	std	Y+2, r24	; 0x02
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	9b 81       	ldd	r25, Y+3	; 0x03
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <SSD_voidDisplayNum+0x344>
    1f56:	9b 83       	std	Y+3, r25	; 0x03
    1f58:	8a 83       	std	Y+2, r24	; 0x02
    1f5a:	0f c0       	rjmp	.+30     	; 0x1f7a <SSD_voidDisplayNum+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f5c:	69 89       	ldd	r22, Y+17	; 0x11
    1f5e:	7a 89       	ldd	r23, Y+18	; 0x12
    1f60:	8b 89       	ldd	r24, Y+19	; 0x13
    1f62:	9c 89       	ldd	r25, Y+20	; 0x14
    1f64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	88 8b       	std	Y+16, r24	; 0x10
    1f6e:	88 89       	ldd	r24, Y+16	; 0x10
    1f70:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	8a 95       	dec	r24
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <SSD_voidDisplayNum+0x366>
    1f78:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(300);

}
    1f7a:	e3 96       	adiw	r28, 0x33	; 51
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <SSD_CountDisplayNum>:
void SSD_CountDisplayNum(u8 num)
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	a3 97       	sbiw	r28, 0x23	; 35
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	8b a3       	std	Y+35, r24	; 0x23
	u8 loc_secondDigit2 = (num%10)<<4;  //0000 0101  -> 0101 0000
    1fa2:	8b a1       	ldd	r24, Y+35	; 0x23
    1fa4:	9a e0       	ldi	r25, 0x0A	; 10
    1fa6:	69 2f       	mov	r22, r25
    1fa8:	0e 94 17 3a 	call	0x742e	; 0x742e <__udivmodqi4>
    1fac:	89 2f       	mov	r24, r25
    1fae:	82 95       	swap	r24
    1fb0:	80 7f       	andi	r24, 0xF0	; 240
    1fb2:	8a a3       	std	Y+34, r24	; 0x22
	u8 loc_firstDigit2 = (num/10)<<4;   //0000 0010
    1fb4:	8b a1       	ldd	r24, Y+35	; 0x23
    1fb6:	9a e0       	ldi	r25, 0x0A	; 10
    1fb8:	69 2f       	mov	r22, r25
    1fba:	0e 94 17 3a 	call	0x742e	; 0x742e <__udivmodqi4>
    1fbe:	82 95       	swap	r24
    1fc0:	80 7f       	andi	r24, 0xF0	; 240
    1fc2:	89 a3       	std	Y+33, r24	; 0x21

	for (int i=0;i<=4;i++)
    1fc4:	18 a2       	std	Y+32, r1	; 0x20
    1fc6:	1f 8e       	std	Y+31, r1	; 0x1f
    1fc8:	15 c1       	rjmp	.+554    	; 0x21f4 <SSD_CountDisplayNum+0x268>
	{
		for (int j=0; j<=9; j++)
    1fca:	1e 8e       	std	Y+30, r1	; 0x1e
    1fcc:	1d 8e       	std	Y+29, r1	; 0x1d
    1fce:	07 c1       	rjmp	.+526    	; 0x21de <SSD_CountDisplayNum+0x252>
		{
			DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN2,DIO_HIGH);
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	62 e0       	ldi	r22, 0x02	; 2
    1fd4:	41 e0       	ldi	r20, 0x01	; 1
    1fd6:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
			//Disable SSD 2 -> En2 = Low
			DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN1,DIO_LOW);
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	61 e0       	ldi	r22, 0x01	; 1
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
			// Write First Digit
			DIO_voidWRITEChannelGroup(DIO_PORTA,loc_firstDigit2, SSD_MASK);
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	69 a1       	ldd	r22, Y+33	; 0x21
    1fe8:	4f e0       	ldi	r20, 0x0F	; 15
    1fea:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <DIO_voidWRITEChannelGroup>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a0 e2       	ldi	r26, 0x20	; 32
    1ff4:	b1 e4       	ldi	r27, 0x41	; 65
    1ff6:	89 8f       	std	Y+25, r24	; 0x19
    1ff8:	9a 8f       	std	Y+26, r25	; 0x1a
    1ffa:	ab 8f       	std	Y+27, r26	; 0x1b
    1ffc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    2000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a e7       	ldi	r20, 0x7A	; 122
    200c:	55 e4       	ldi	r21, 0x45	; 69
    200e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	8d 8b       	std	Y+21, r24	; 0x15
    2018:	9e 8b       	std	Y+22, r25	; 0x16
    201a:	af 8b       	std	Y+23, r26	; 0x17
    201c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    201e:	6d 89       	ldd	r22, Y+21	; 0x15
    2020:	7e 89       	ldd	r23, Y+22	; 0x16
    2022:	8f 89       	ldd	r24, Y+23	; 0x17
    2024:	98 8d       	ldd	r25, Y+24	; 0x18
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <SSD_CountDisplayNum+0xb4>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9c 8b       	std	Y+20, r25	; 0x14
    203c:	8b 8b       	std	Y+19, r24	; 0x13
    203e:	3f c0       	rjmp	.+126    	; 0x20be <SSD_CountDisplayNum+0x132>
	else if (__tmp > 65535)
    2040:	6d 89       	ldd	r22, Y+21	; 0x15
    2042:	7e 89       	ldd	r23, Y+22	; 0x16
    2044:	8f 89       	ldd	r24, Y+23	; 0x17
    2046:	98 8d       	ldd	r25, Y+24	; 0x18
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <SSD_CountDisplayNum+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	69 8d       	ldd	r22, Y+25	; 0x19
    205a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    205c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    205e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9c 8b       	std	Y+20, r25	; 0x14
    207e:	8b 8b       	std	Y+19, r24	; 0x13
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <SSD_CountDisplayNum+0x114>
    2082:	80 e9       	ldi	r24, 0x90	; 144
    2084:	91 e0       	ldi	r25, 0x01	; 1
    2086:	9a 8b       	std	Y+18, r25	; 0x12
    2088:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    208a:	89 89       	ldd	r24, Y+17	; 0x11
    208c:	9a 89       	ldd	r25, Y+18	; 0x12
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <SSD_CountDisplayNum+0x102>
    2092:	9a 8b       	std	Y+18, r25	; 0x12
    2094:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8b 89       	ldd	r24, Y+19	; 0x13
    2098:	9c 89       	ldd	r25, Y+20	; 0x14
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	9c 8b       	std	Y+20, r25	; 0x14
    209e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8b 89       	ldd	r24, Y+19	; 0x13
    20a2:	9c 89       	ldd	r25, Y+20	; 0x14
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <SSD_CountDisplayNum+0xf6>
    20a8:	14 c0       	rjmp	.+40     	; 0x20d2 <SSD_CountDisplayNum+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	6d 89       	ldd	r22, Y+21	; 0x15
    20ac:	7e 89       	ldd	r23, Y+22	; 0x16
    20ae:	8f 89       	ldd	r24, Y+23	; 0x17
    20b0:	98 8d       	ldd	r25, Y+24	; 0x18
    20b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9c 8b       	std	Y+20, r25	; 0x14
    20bc:	8b 8b       	std	Y+19, r24	; 0x13
    20be:	8b 89       	ldd	r24, Y+19	; 0x13
    20c0:	9c 89       	ldd	r25, Y+20	; 0x14
    20c2:	98 8b       	std	Y+16, r25	; 0x10
    20c4:	8f 87       	std	Y+15, r24	; 0x0f
    20c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c8:	98 89       	ldd	r25, Y+16	; 0x10
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <SSD_CountDisplayNum+0x13e>
    20ce:	98 8b       	std	Y+16, r25	; 0x10
    20d0:	8f 87       	std	Y+15, r24	; 0x0f

			//_delay_us(500);
			_delay_ms(10);
			//Disable SSD 1 -> En1 = Low
			DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN2,DIO_LOW);
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	62 e0       	ldi	r22, 0x02	; 2
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
			//Enable SSD 2 -> En2 = High
			DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN1,DIO_HIGH);
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	61 e0       	ldi	r22, 0x01	; 1
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
			// Write Second Digit
			DIO_voidWRITEChannelGroup(DIO_PORTA,loc_secondDigit2, SSD_MASK);
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	6a a1       	ldd	r22, Y+34	; 0x22
    20ea:	4f e0       	ldi	r20, 0x0F	; 15
    20ec:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <DIO_voidWRITEChannelGroup>
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	a0 e2       	ldi	r26, 0x20	; 32
    20f6:	b1 e4       	ldi	r27, 0x41	; 65
    20f8:	8b 87       	std	Y+11, r24	; 0x0b
    20fa:	9c 87       	std	Y+12, r25	; 0x0c
    20fc:	ad 87       	std	Y+13, r26	; 0x0d
    20fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2100:	6b 85       	ldd	r22, Y+11	; 0x0b
    2102:	7c 85       	ldd	r23, Y+12	; 0x0c
    2104:	8d 85       	ldd	r24, Y+13	; 0x0d
    2106:	9e 85       	ldd	r25, Y+14	; 0x0e
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	4a e7       	ldi	r20, 0x7A	; 122
    210e:	55 e4       	ldi	r21, 0x45	; 69
    2110:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	8f 83       	std	Y+7, r24	; 0x07
    211a:	98 87       	std	Y+8, r25	; 0x08
    211c:	a9 87       	std	Y+9, r26	; 0x09
    211e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2120:	6f 81       	ldd	r22, Y+7	; 0x07
    2122:	78 85       	ldd	r23, Y+8	; 0x08
    2124:	89 85       	ldd	r24, Y+9	; 0x09
    2126:	9a 85       	ldd	r25, Y+10	; 0x0a
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e8       	ldi	r20, 0x80	; 128
    212e:	5f e3       	ldi	r21, 0x3F	; 63
    2130:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2134:	88 23       	and	r24, r24
    2136:	2c f4       	brge	.+10     	; 0x2142 <SSD_CountDisplayNum+0x1b6>
		__ticks = 1;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	9e 83       	std	Y+6, r25	; 0x06
    213e:	8d 83       	std	Y+5, r24	; 0x05
    2140:	3f c0       	rjmp	.+126    	; 0x21c0 <SSD_CountDisplayNum+0x234>
	else if (__tmp > 65535)
    2142:	6f 81       	ldd	r22, Y+7	; 0x07
    2144:	78 85       	ldd	r23, Y+8	; 0x08
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	3f ef       	ldi	r19, 0xFF	; 255
    214e:	4f e7       	ldi	r20, 0x7F	; 127
    2150:	57 e4       	ldi	r21, 0x47	; 71
    2152:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2156:	18 16       	cp	r1, r24
    2158:	4c f5       	brge	.+82     	; 0x21ac <SSD_CountDisplayNum+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215a:	6b 85       	ldd	r22, Y+11	; 0x0b
    215c:	7c 85       	ldd	r23, Y+12	; 0x0c
    215e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2160:	9e 85       	ldd	r25, Y+14	; 0x0e
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e2       	ldi	r20, 0x20	; 32
    2168:	51 e4       	ldi	r21, 0x41	; 65
    216a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	bc 01       	movw	r22, r24
    2174:	cd 01       	movw	r24, r26
    2176:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	9e 83       	std	Y+6, r25	; 0x06
    2180:	8d 83       	std	Y+5, r24	; 0x05
    2182:	0f c0       	rjmp	.+30     	; 0x21a2 <SSD_CountDisplayNum+0x216>
    2184:	80 e9       	ldi	r24, 0x90	; 144
    2186:	91 e0       	ldi	r25, 0x01	; 1
    2188:	9c 83       	std	Y+4, r25	; 0x04
    218a:	8b 83       	std	Y+3, r24	; 0x03
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <SSD_CountDisplayNum+0x204>
    2194:	9c 83       	std	Y+4, r25	; 0x04
    2196:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2198:	8d 81       	ldd	r24, Y+5	; 0x05
    219a:	9e 81       	ldd	r25, Y+6	; 0x06
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	9e 83       	std	Y+6, r25	; 0x06
    21a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a2:	8d 81       	ldd	r24, Y+5	; 0x05
    21a4:	9e 81       	ldd	r25, Y+6	; 0x06
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	69 f7       	brne	.-38     	; 0x2184 <SSD_CountDisplayNum+0x1f8>
    21aa:	14 c0       	rjmp	.+40     	; 0x21d4 <SSD_CountDisplayNum+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ac:	6f 81       	ldd	r22, Y+7	; 0x07
    21ae:	78 85       	ldd	r23, Y+8	; 0x08
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9e 83       	std	Y+6, r25	; 0x06
    21be:	8d 83       	std	Y+5, r24	; 0x05
    21c0:	8d 81       	ldd	r24, Y+5	; 0x05
    21c2:	9e 81       	ldd	r25, Y+6	; 0x06
    21c4:	9a 83       	std	Y+2, r25	; 0x02
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	9a 81       	ldd	r25, Y+2	; 0x02
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <SSD_CountDisplayNum+0x240>
    21d0:	9a 83       	std	Y+2, r25	; 0x02
    21d2:	89 83       	std	Y+1, r24	; 0x01
	u8 loc_secondDigit2 = (num%10)<<4;  //0000 0101  -> 0101 0000
	u8 loc_firstDigit2 = (num/10)<<4;   //0000 0010

	for (int i=0;i<=4;i++)
	{
		for (int j=0; j<=9; j++)
    21d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	9e 8f       	std	Y+30, r25	; 0x1e
    21dc:	8d 8f       	std	Y+29, r24	; 0x1d
    21de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21e2:	8a 30       	cpi	r24, 0x0A	; 10
    21e4:	91 05       	cpc	r25, r1
    21e6:	0c f4       	brge	.+2      	; 0x21ea <SSD_CountDisplayNum+0x25e>
    21e8:	f3 ce       	rjmp	.-538    	; 0x1fd0 <SSD_CountDisplayNum+0x44>
void SSD_CountDisplayNum(u8 num)
{
	u8 loc_secondDigit2 = (num%10)<<4;  //0000 0101  -> 0101 0000
	u8 loc_firstDigit2 = (num/10)<<4;   //0000 0010

	for (int i=0;i<=4;i++)
    21ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21ec:	98 a1       	ldd	r25, Y+32	; 0x20
    21ee:	01 96       	adiw	r24, 0x01	; 1
    21f0:	98 a3       	std	Y+32, r25	; 0x20
    21f2:	8f 8f       	std	Y+31, r24	; 0x1f
    21f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21f6:	98 a1       	ldd	r25, Y+32	; 0x20
    21f8:	85 30       	cpi	r24, 0x05	; 5
    21fa:	91 05       	cpc	r25, r1
    21fc:	0c f4       	brge	.+2      	; 0x2200 <SSD_CountDisplayNum+0x274>
    21fe:	e5 ce       	rjmp	.-566    	; 0x1fca <SSD_CountDisplayNum+0x3e>

			//_delay_us(500);
			_delay_ms(10);
		}
	}
}
    2200:	a3 96       	adiw	r28, 0x23	; 35
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <SSD_voidDelayWDisplay_ms>:
void SSD_voidDelayWDisplay_ms(u8 num, u32 delay)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	29 97       	sbiw	r28, 0x09	; 9
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	8d 83       	std	Y+5, r24	; 0x05
    2228:	4e 83       	std	Y+6, r20	; 0x06
    222a:	5f 83       	std	Y+7, r21	; 0x07
    222c:	68 87       	std	Y+8, r22	; 0x08
    222e:	79 87       	std	Y+9, r23	; 0x09
	for (u32 loc_counter=0; loc_counter<delay/2;loc_counter++)
    2230:	19 82       	std	Y+1, r1	; 0x01
    2232:	1a 82       	std	Y+2, r1	; 0x02
    2234:	1b 82       	std	Y+3, r1	; 0x03
    2236:	1c 82       	std	Y+4, r1	; 0x04
    2238:	0e c0       	rjmp	.+28     	; 0x2256 <SSD_voidDelayWDisplay_ms+0x44>
	{
		SSD_voidDisplayNum(num);
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <SSD_voidDisplayNum>
		}
	}
}
void SSD_voidDelayWDisplay_ms(u8 num, u32 delay)
{
	for (u32 loc_counter=0; loc_counter<delay/2;loc_counter++)
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	ab 81       	ldd	r26, Y+3	; 0x03
    2246:	bc 81       	ldd	r27, Y+4	; 0x04
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	a1 1d       	adc	r26, r1
    224c:	b1 1d       	adc	r27, r1
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	ab 83       	std	Y+3, r26	; 0x03
    2254:	bc 83       	std	Y+4, r27	; 0x04
    2256:	8e 81       	ldd	r24, Y+6	; 0x06
    2258:	9f 81       	ldd	r25, Y+7	; 0x07
    225a:	a8 85       	ldd	r26, Y+8	; 0x08
    225c:	b9 85       	ldd	r27, Y+9	; 0x09
    225e:	9c 01       	movw	r18, r24
    2260:	ad 01       	movw	r20, r26
    2262:	56 95       	lsr	r21
    2264:	47 95       	ror	r20
    2266:	37 95       	ror	r19
    2268:	27 95       	ror	r18
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	9a 81       	ldd	r25, Y+2	; 0x02
    226e:	ab 81       	ldd	r26, Y+3	; 0x03
    2270:	bc 81       	ldd	r27, Y+4	; 0x04
    2272:	82 17       	cp	r24, r18
    2274:	93 07       	cpc	r25, r19
    2276:	a4 07       	cpc	r26, r20
    2278:	b5 07       	cpc	r27, r21
    227a:	f8 f2       	brcs	.-66     	; 0x223a <SSD_voidDelayWDisplay_ms+0x28>
	{
		SSD_voidDisplayNum(num);
	}
}
    227c:	29 96       	adiw	r28, 0x09	; 9
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <LM35_voidInit>:
 */
#include "LM35.h"
#include "ADC.h"

void LM35_voidInit(void)
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
	//ADC_voidInit();
	ADC_voidInit(ADC_AVCC);
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	0e 94 42 39 	call	0x7284	; 0x7284 <ADC_voidInit>
}
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <LM35_u8TempRead>:
u8 LM35_u8TempRead(void)
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <LM35_u8TempRead+0x6>
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <LM35_u8TempRead+0x8>
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <LM35_u8TempRead+0xa>
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
	f64 volt= ADC_f64ReadVolts_mv(ADC_ADC1);
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	0e 94 b1 39 	call	0x7362	; 0x7362 <ADC_f64ReadVolts_mv>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	8b 83       	std	Y+3, r24	; 0x03
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	ad 83       	std	Y+5, r26	; 0x05
    22c0:	be 83       	std	Y+6, r27	; 0x06
	u16 Temp = ((volt)/10);
    22c2:	6b 81       	ldd	r22, Y+3	; 0x03
    22c4:	7c 81       	ldd	r23, Y+4	; 0x04
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e2       	ldi	r20, 0x20	; 32
    22d0:	51 e4       	ldi	r21, 0x41	; 65
    22d2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	bc 01       	movw	r22, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	9a 83       	std	Y+2, r25	; 0x02
    22e8:	89 83       	std	Y+1, r24	; 0x01
	return Temp;
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ec:	26 96       	adiw	r28, 0x06	; 6
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <LED_voidInit>:
#include "LED.h"
#include "DIO.h"
#include <util/delay.h>

void LED_voidInit(void)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
	DIO_voidconfigureChannel(DIO_PORTC, DIO_PIN2, DIO_OUTPUT);
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	62 e0       	ldi	r22, 0x02	; 2
    230a:	41 e0       	ldi	r20, 0x01	; 1
    230c:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);
    2310:	82 e0       	ldi	r24, 0x02	; 2
    2312:	67 e0       	ldi	r22, 0x07	; 7
    2314:	41 e0       	ldi	r20, 0x01	; 1
    2316:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTD, DIO_PIN3, DIO_OUTPUT);
    231a:	83 e0       	ldi	r24, 0x03	; 3
    231c:	63 e0       	ldi	r22, 0x03	; 3
    231e:	41 e0       	ldi	r20, 0x01	; 1
    2320:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
}
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <LED_voidLedOn>:

void LED_voidLedOn(LED_ledsId_t ledId)
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	00 d0       	rcall	.+0      	; 0x2330 <LED_voidLedOn+0x6>
    2330:	0f 92       	push	r0
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	3b 83       	std	Y+3, r19	; 0x03
    2340:	2a 83       	std	Y+2, r18	; 0x02
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	9b 81       	ldd	r25, Y+3	; 0x03
    2346:	81 30       	cpi	r24, 0x01	; 1
    2348:	91 05       	cpc	r25, r1
    234a:	79 f0       	breq	.+30     	; 0x236a <LED_voidLedOn+0x40>
    234c:	2a 81       	ldd	r18, Y+2	; 0x02
    234e:	3b 81       	ldd	r19, Y+3	; 0x03
    2350:	22 30       	cpi	r18, 0x02	; 2
    2352:	31 05       	cpc	r19, r1
    2354:	81 f0       	breq	.+32     	; 0x2376 <LED_voidLedOn+0x4c>
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	9b 81       	ldd	r25, Y+3	; 0x03
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	89 f4       	brne	.+34     	; 0x2380 <LED_voidLedOn+0x56>
	{
	case LED0:
		DIO_voidWRITEChannel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    235e:	82 e0       	ldi	r24, 0x02	; 2
    2360:	62 e0       	ldi	r22, 0x02	; 2
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
    2368:	0b c0       	rjmp	.+22     	; 0x2380 <LED_voidLedOn+0x56>
		break;

	case LED1:
			DIO_voidWRITEChannel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	67 e0       	ldi	r22, 0x07	; 7
    236e:	41 e0       	ldi	r20, 0x01	; 1
    2370:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
    2374:	05 c0       	rjmp	.+10     	; 0x2380 <LED_voidLedOn+0x56>
			break;

	case LED2:
			DIO_voidWRITEChannel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    2376:	83 e0       	ldi	r24, 0x03	; 3
    2378:	63 e0       	ldi	r22, 0x03	; 3
    237a:	41 e0       	ldi	r20, 0x01	; 1
    237c:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
			break;
	}
}
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <LED_voidLedOff>:

void LED_voidLedOff(LED_ledsId_t ledId)
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	00 d0       	rcall	.+0      	; 0x2392 <LED_voidLedOff+0x6>
    2392:	0f 92       	push	r0
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	3b 83       	std	Y+3, r19	; 0x03
    23a2:	2a 83       	std	Y+2, r18	; 0x02
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	9b 81       	ldd	r25, Y+3	; 0x03
    23a8:	81 30       	cpi	r24, 0x01	; 1
    23aa:	91 05       	cpc	r25, r1
    23ac:	79 f0       	breq	.+30     	; 0x23cc <LED_voidLedOff+0x40>
    23ae:	2a 81       	ldd	r18, Y+2	; 0x02
    23b0:	3b 81       	ldd	r19, Y+3	; 0x03
    23b2:	22 30       	cpi	r18, 0x02	; 2
    23b4:	31 05       	cpc	r19, r1
    23b6:	81 f0       	breq	.+32     	; 0x23d8 <LED_voidLedOff+0x4c>
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	9b 81       	ldd	r25, Y+3	; 0x03
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	89 f4       	brne	.+34     	; 0x23e2 <LED_voidLedOff+0x56>
	{
	case LED0:
		DIO_voidWRITEChannel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    23c0:	82 e0       	ldi	r24, 0x02	; 2
    23c2:	62 e0       	ldi	r22, 0x02	; 2
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
    23ca:	0b c0       	rjmp	.+22     	; 0x23e2 <LED_voidLedOff+0x56>
		break;

	case LED1:
			DIO_voidWRITEChannel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	67 e0       	ldi	r22, 0x07	; 7
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
    23d6:	05 c0       	rjmp	.+10     	; 0x23e2 <LED_voidLedOff+0x56>
			break;

	case LED2:
			DIO_voidWRITEChannel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    23d8:	83 e0       	ldi	r24, 0x03	; 3
    23da:	63 e0       	ldi	r22, 0x03	; 3
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
			break;
	}
}
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <LED_voidLEDToggle>:

void LED_voidLEDToggle(LED_ledsId_t LEDId)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <LED_voidLEDToggle+0x6>
    23f4:	0f 92       	push	r0
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	89 83       	std	Y+1, r24	; 0x01
	switch (LEDId)
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	3b 83       	std	Y+3, r19	; 0x03
    2404:	2a 83       	std	Y+2, r18	; 0x02
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	9b 81       	ldd	r25, Y+3	; 0x03
    240a:	81 30       	cpi	r24, 0x01	; 1
    240c:	91 05       	cpc	r25, r1
    240e:	71 f0       	breq	.+28     	; 0x242c <LED_voidLEDToggle+0x3e>
    2410:	2a 81       	ldd	r18, Y+2	; 0x02
    2412:	3b 81       	ldd	r19, Y+3	; 0x03
    2414:	22 30       	cpi	r18, 0x02	; 2
    2416:	31 05       	cpc	r19, r1
    2418:	71 f0       	breq	.+28     	; 0x2436 <LED_voidLEDToggle+0x48>
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	9b 81       	ldd	r25, Y+3	; 0x03
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	71 f4       	brne	.+28     	; 0x243e <LED_voidLEDToggle+0x50>
	{
	case LED0:
		DIO_voidFlipChannel(DIO_PORTC,DIO_PIN2);
    2422:	82 e0       	ldi	r24, 0x02	; 2
    2424:	62 e0       	ldi	r22, 0x02	; 2
    2426:	0e 94 b1 38 	call	0x7162	; 0x7162 <DIO_voidFlipChannel>
    242a:	09 c0       	rjmp	.+18     	; 0x243e <LED_voidLEDToggle+0x50>
		break;
	case LED1:
		DIO_voidFlipChannel(DIO_PORTC,DIO_PIN7);
    242c:	82 e0       	ldi	r24, 0x02	; 2
    242e:	67 e0       	ldi	r22, 0x07	; 7
    2430:	0e 94 b1 38 	call	0x7162	; 0x7162 <DIO_voidFlipChannel>
    2434:	04 c0       	rjmp	.+8      	; 0x243e <LED_voidLEDToggle+0x50>
		break;
	case LED2:
		DIO_voidFlipChannel(DIO_PORTD,DIO_PIN3);
    2436:	83 e0       	ldi	r24, 0x03	; 3
    2438:	63 e0       	ldi	r22, 0x03	; 3
    243a:	0e 94 b1 38 	call	0x7162	; 0x7162 <DIO_voidFlipChannel>
		break;
	}
}
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <LED_voidFLASH>:

void LED_voidFLASH(LED_ledsId_t LEDId){
    244a:	0f 93       	push	r16
    244c:	1f 93       	push	r17
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	c7 5a       	subi	r28, 0xA7	; 167
    2458:	d1 40       	sbci	r29, 0x01	; 1
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	fe 01       	movw	r30, r28
    2466:	eb 55       	subi	r30, 0x5B	; 91
    2468:	fe 4f       	sbci	r31, 0xFE	; 254
    246a:	80 83       	st	Z, r24
	switch (LEDId)
    246c:	fe 01       	movw	r30, r28
    246e:	eb 55       	subi	r30, 0x5B	; 91
    2470:	fe 4f       	sbci	r31, 0xFE	; 254
    2472:	80 81       	ld	r24, Z
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	ca 55       	subi	r28, 0x5A	; 90
    247a:	de 4f       	sbci	r29, 0xFE	; 254
    247c:	39 83       	std	Y+1, r19	; 0x01
    247e:	28 83       	st	Y, r18
    2480:	c6 5a       	subi	r28, 0xA6	; 166
    2482:	d1 40       	sbci	r29, 0x01	; 1
    2484:	ca 55       	subi	r28, 0x5A	; 90
    2486:	de 4f       	sbci	r29, 0xFE	; 254
    2488:	88 81       	ld	r24, Y
    248a:	99 81       	ldd	r25, Y+1	; 0x01
    248c:	c6 5a       	subi	r28, 0xA6	; 166
    248e:	d1 40       	sbci	r29, 0x01	; 1
    2490:	81 30       	cpi	r24, 0x01	; 1
    2492:	91 05       	cpc	r25, r1
    2494:	09 f4       	brne	.+2      	; 0x2498 <LED_voidFLASH+0x4e>
    2496:	36 c7       	rjmp	.+3692   	; 0x3304 <LED_voidFLASH+0xeba>
    2498:	ca 55       	subi	r28, 0x5A	; 90
    249a:	de 4f       	sbci	r29, 0xFE	; 254
    249c:	e8 81       	ld	r30, Y
    249e:	f9 81       	ldd	r31, Y+1	; 0x01
    24a0:	c6 5a       	subi	r28, 0xA6	; 166
    24a2:	d1 40       	sbci	r29, 0x01	; 1
    24a4:	e2 30       	cpi	r30, 0x02	; 2
    24a6:	f1 05       	cpc	r31, r1
    24a8:	11 f4       	brne	.+4      	; 0x24ae <LED_voidFLASH+0x64>
    24aa:	0c 94 a0 20 	jmp	0x4140	; 0x4140 <LED_voidFLASH+0x1cf6>
    24ae:	ca 55       	subi	r28, 0x5A	; 90
    24b0:	de 4f       	sbci	r29, 0xFE	; 254
    24b2:	28 81       	ld	r18, Y
    24b4:	39 81       	ldd	r19, Y+1	; 0x01
    24b6:	c6 5a       	subi	r28, 0xA6	; 166
    24b8:	d1 40       	sbci	r29, 0x01	; 1
    24ba:	21 15       	cp	r18, r1
    24bc:	31 05       	cpc	r19, r1
    24be:	11 f0       	breq	.+4      	; 0x24c4 <LED_voidFLASH+0x7a>
    24c0:	0c 94 8a 26 	jmp	0x4d14	; 0x4d14 <LED_voidFLASH+0x28ca>
		{
		case LED0:
			LED_voidLedOn(LED0);
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    24ca:	fe 01       	movw	r30, r28
    24cc:	ef 55       	subi	r30, 0x5F	; 95
    24ce:	fe 4f       	sbci	r31, 0xFE	; 254
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	aa ef       	ldi	r26, 0xFA	; 250
    24d6:	b3 e4       	ldi	r27, 0x43	; 67
    24d8:	80 83       	st	Z, r24
    24da:	91 83       	std	Z+1, r25	; 0x01
    24dc:	a2 83       	std	Z+2, r26	; 0x02
    24de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e0:	8e 01       	movw	r16, r28
    24e2:	03 56       	subi	r16, 0x63	; 99
    24e4:	1e 4f       	sbci	r17, 0xFE	; 254
    24e6:	fe 01       	movw	r30, r28
    24e8:	ef 55       	subi	r30, 0x5F	; 95
    24ea:	fe 4f       	sbci	r31, 0xFE	; 254
    24ec:	60 81       	ld	r22, Z
    24ee:	71 81       	ldd	r23, Z+1	; 0x01
    24f0:	82 81       	ldd	r24, Z+2	; 0x02
    24f2:	93 81       	ldd	r25, Z+3	; 0x03
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	4a e7       	ldi	r20, 0x7A	; 122
    24fa:	55 e4       	ldi	r21, 0x45	; 69
    24fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	f8 01       	movw	r30, r16
    2506:	80 83       	st	Z, r24
    2508:	91 83       	std	Z+1, r25	; 0x01
    250a:	a2 83       	std	Z+2, r26	; 0x02
    250c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    250e:	fe 01       	movw	r30, r28
    2510:	e3 56       	subi	r30, 0x63	; 99
    2512:	fe 4f       	sbci	r31, 0xFE	; 254
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e8       	ldi	r20, 0x80	; 128
    2522:	5f e3       	ldi	r21, 0x3F	; 63
    2524:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2528:	88 23       	and	r24, r24
    252a:	44 f4       	brge	.+16     	; 0x253c <LED_voidFLASH+0xf2>
		__ticks = 1;
    252c:	fe 01       	movw	r30, r28
    252e:	e5 56       	subi	r30, 0x65	; 101
    2530:	fe 4f       	sbci	r31, 0xFE	; 254
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	91 83       	std	Z+1, r25	; 0x01
    2538:	80 83       	st	Z, r24
    253a:	64 c0       	rjmp	.+200    	; 0x2604 <LED_voidFLASH+0x1ba>
	else if (__tmp > 65535)
    253c:	fe 01       	movw	r30, r28
    253e:	e3 56       	subi	r30, 0x63	; 99
    2540:	fe 4f       	sbci	r31, 0xFE	; 254
    2542:	60 81       	ld	r22, Z
    2544:	71 81       	ldd	r23, Z+1	; 0x01
    2546:	82 81       	ldd	r24, Z+2	; 0x02
    2548:	93 81       	ldd	r25, Z+3	; 0x03
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	3f ef       	ldi	r19, 0xFF	; 255
    254e:	4f e7       	ldi	r20, 0x7F	; 127
    2550:	57 e4       	ldi	r21, 0x47	; 71
    2552:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2556:	18 16       	cp	r1, r24
    2558:	0c f0       	brlt	.+2      	; 0x255c <LED_voidFLASH+0x112>
    255a:	43 c0       	rjmp	.+134    	; 0x25e2 <LED_voidFLASH+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255c:	fe 01       	movw	r30, r28
    255e:	ef 55       	subi	r30, 0x5F	; 95
    2560:	fe 4f       	sbci	r31, 0xFE	; 254
    2562:	60 81       	ld	r22, Z
    2564:	71 81       	ldd	r23, Z+1	; 0x01
    2566:	82 81       	ldd	r24, Z+2	; 0x02
    2568:	93 81       	ldd	r25, Z+3	; 0x03
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e2       	ldi	r20, 0x20	; 32
    2570:	51 e4       	ldi	r21, 0x41	; 65
    2572:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	8e 01       	movw	r16, r28
    257c:	05 56       	subi	r16, 0x65	; 101
    257e:	1e 4f       	sbci	r17, 0xFE	; 254
    2580:	bc 01       	movw	r22, r24
    2582:	cd 01       	movw	r24, r26
    2584:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	f8 01       	movw	r30, r16
    258e:	91 83       	std	Z+1, r25	; 0x01
    2590:	80 83       	st	Z, r24
    2592:	1f c0       	rjmp	.+62     	; 0x25d2 <LED_voidFLASH+0x188>
    2594:	fe 01       	movw	r30, r28
    2596:	e7 56       	subi	r30, 0x67	; 103
    2598:	fe 4f       	sbci	r31, 0xFE	; 254
    259a:	80 e9       	ldi	r24, 0x90	; 144
    259c:	91 e0       	ldi	r25, 0x01	; 1
    259e:	91 83       	std	Z+1, r25	; 0x01
    25a0:	80 83       	st	Z, r24
    25a2:	fe 01       	movw	r30, r28
    25a4:	e7 56       	subi	r30, 0x67	; 103
    25a6:	fe 4f       	sbci	r31, 0xFE	; 254
    25a8:	80 81       	ld	r24, Z
    25aa:	91 81       	ldd	r25, Z+1	; 0x01
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <LED_voidFLASH+0x162>
    25b0:	fe 01       	movw	r30, r28
    25b2:	e7 56       	subi	r30, 0x67	; 103
    25b4:	fe 4f       	sbci	r31, 0xFE	; 254
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ba:	de 01       	movw	r26, r28
    25bc:	a5 56       	subi	r26, 0x65	; 101
    25be:	be 4f       	sbci	r27, 0xFE	; 254
    25c0:	fe 01       	movw	r30, r28
    25c2:	e5 56       	subi	r30, 0x65	; 101
    25c4:	fe 4f       	sbci	r31, 0xFE	; 254
    25c6:	80 81       	ld	r24, Z
    25c8:	91 81       	ldd	r25, Z+1	; 0x01
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	11 96       	adiw	r26, 0x01	; 1
    25ce:	9c 93       	st	X, r25
    25d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d2:	fe 01       	movw	r30, r28
    25d4:	e5 56       	subi	r30, 0x65	; 101
    25d6:	fe 4f       	sbci	r31, 0xFE	; 254
    25d8:	80 81       	ld	r24, Z
    25da:	91 81       	ldd	r25, Z+1	; 0x01
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	d1 f6       	brne	.-76     	; 0x2594 <LED_voidFLASH+0x14a>
    25e0:	27 c0       	rjmp	.+78     	; 0x2630 <LED_voidFLASH+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e2:	8e 01       	movw	r16, r28
    25e4:	05 56       	subi	r16, 0x65	; 101
    25e6:	1e 4f       	sbci	r17, 0xFE	; 254
    25e8:	fe 01       	movw	r30, r28
    25ea:	e3 56       	subi	r30, 0x63	; 99
    25ec:	fe 4f       	sbci	r31, 0xFE	; 254
    25ee:	60 81       	ld	r22, Z
    25f0:	71 81       	ldd	r23, Z+1	; 0x01
    25f2:	82 81       	ldd	r24, Z+2	; 0x02
    25f4:	93 81       	ldd	r25, Z+3	; 0x03
    25f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	f8 01       	movw	r30, r16
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	80 83       	st	Z, r24
    2604:	de 01       	movw	r26, r28
    2606:	a9 56       	subi	r26, 0x69	; 105
    2608:	be 4f       	sbci	r27, 0xFE	; 254
    260a:	fe 01       	movw	r30, r28
    260c:	e5 56       	subi	r30, 0x65	; 101
    260e:	fe 4f       	sbci	r31, 0xFE	; 254
    2610:	80 81       	ld	r24, Z
    2612:	91 81       	ldd	r25, Z+1	; 0x01
    2614:	8d 93       	st	X+, r24
    2616:	9c 93       	st	X, r25
    2618:	fe 01       	movw	r30, r28
    261a:	e9 56       	subi	r30, 0x69	; 105
    261c:	fe 4f       	sbci	r31, 0xFE	; 254
    261e:	80 81       	ld	r24, Z
    2620:	91 81       	ldd	r25, Z+1	; 0x01
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <LED_voidFLASH+0x1d8>
    2626:	fe 01       	movw	r30, r28
    2628:	e9 56       	subi	r30, 0x69	; 105
    262a:	fe 4f       	sbci	r31, 0xFE	; 254
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	80 83       	st	Z, r24
			_delay_ms(500);
			LED_voidLedOff(LED0);
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    2636:	fe 01       	movw	r30, r28
    2638:	ed 56       	subi	r30, 0x6D	; 109
    263a:	fe 4f       	sbci	r31, 0xFE	; 254
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	aa ef       	ldi	r26, 0xFA	; 250
    2642:	b3 e4       	ldi	r27, 0x43	; 67
    2644:	80 83       	st	Z, r24
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	a2 83       	std	Z+2, r26	; 0x02
    264a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264c:	8e 01       	movw	r16, r28
    264e:	01 57       	subi	r16, 0x71	; 113
    2650:	1e 4f       	sbci	r17, 0xFE	; 254
    2652:	fe 01       	movw	r30, r28
    2654:	ed 56       	subi	r30, 0x6D	; 109
    2656:	fe 4f       	sbci	r31, 0xFE	; 254
    2658:	60 81       	ld	r22, Z
    265a:	71 81       	ldd	r23, Z+1	; 0x01
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	93 81       	ldd	r25, Z+3	; 0x03
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4a e7       	ldi	r20, 0x7A	; 122
    2666:	55 e4       	ldi	r21, 0x45	; 69
    2668:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	f8 01       	movw	r30, r16
    2672:	80 83       	st	Z, r24
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	a2 83       	std	Z+2, r26	; 0x02
    2678:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    267a:	fe 01       	movw	r30, r28
    267c:	e1 57       	subi	r30, 0x71	; 113
    267e:	fe 4f       	sbci	r31, 0xFE	; 254
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	44 f4       	brge	.+16     	; 0x26a8 <LED_voidFLASH+0x25e>
		__ticks = 1;
    2698:	fe 01       	movw	r30, r28
    269a:	e3 57       	subi	r30, 0x73	; 115
    269c:	fe 4f       	sbci	r31, 0xFE	; 254
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	80 83       	st	Z, r24
    26a6:	64 c0       	rjmp	.+200    	; 0x2770 <LED_voidFLASH+0x326>
	else if (__tmp > 65535)
    26a8:	fe 01       	movw	r30, r28
    26aa:	e1 57       	subi	r30, 0x71	; 113
    26ac:	fe 4f       	sbci	r31, 0xFE	; 254
    26ae:	60 81       	ld	r22, Z
    26b0:	71 81       	ldd	r23, Z+1	; 0x01
    26b2:	82 81       	ldd	r24, Z+2	; 0x02
    26b4:	93 81       	ldd	r25, Z+3	; 0x03
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	3f ef       	ldi	r19, 0xFF	; 255
    26ba:	4f e7       	ldi	r20, 0x7F	; 127
    26bc:	57 e4       	ldi	r21, 0x47	; 71
    26be:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26c2:	18 16       	cp	r1, r24
    26c4:	0c f0       	brlt	.+2      	; 0x26c8 <LED_voidFLASH+0x27e>
    26c6:	43 c0       	rjmp	.+134    	; 0x274e <LED_voidFLASH+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c8:	fe 01       	movw	r30, r28
    26ca:	ed 56       	subi	r30, 0x6D	; 109
    26cc:	fe 4f       	sbci	r31, 0xFE	; 254
    26ce:	60 81       	ld	r22, Z
    26d0:	71 81       	ldd	r23, Z+1	; 0x01
    26d2:	82 81       	ldd	r24, Z+2	; 0x02
    26d4:	93 81       	ldd	r25, Z+3	; 0x03
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e2       	ldi	r20, 0x20	; 32
    26dc:	51 e4       	ldi	r21, 0x41	; 65
    26de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	8e 01       	movw	r16, r28
    26e8:	03 57       	subi	r16, 0x73	; 115
    26ea:	1e 4f       	sbci	r17, 0xFE	; 254
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	f8 01       	movw	r30, r16
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	80 83       	st	Z, r24
    26fe:	1f c0       	rjmp	.+62     	; 0x273e <LED_voidFLASH+0x2f4>
    2700:	fe 01       	movw	r30, r28
    2702:	e5 57       	subi	r30, 0x75	; 117
    2704:	fe 4f       	sbci	r31, 0xFE	; 254
    2706:	80 e9       	ldi	r24, 0x90	; 144
    2708:	91 e0       	ldi	r25, 0x01	; 1
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	80 83       	st	Z, r24
    270e:	fe 01       	movw	r30, r28
    2710:	e5 57       	subi	r30, 0x75	; 117
    2712:	fe 4f       	sbci	r31, 0xFE	; 254
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <LED_voidFLASH+0x2ce>
    271c:	fe 01       	movw	r30, r28
    271e:	e5 57       	subi	r30, 0x75	; 117
    2720:	fe 4f       	sbci	r31, 0xFE	; 254
    2722:	91 83       	std	Z+1, r25	; 0x01
    2724:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2726:	de 01       	movw	r26, r28
    2728:	a3 57       	subi	r26, 0x73	; 115
    272a:	be 4f       	sbci	r27, 0xFE	; 254
    272c:	fe 01       	movw	r30, r28
    272e:	e3 57       	subi	r30, 0x73	; 115
    2730:	fe 4f       	sbci	r31, 0xFE	; 254
    2732:	80 81       	ld	r24, Z
    2734:	91 81       	ldd	r25, Z+1	; 0x01
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	11 96       	adiw	r26, 0x01	; 1
    273a:	9c 93       	st	X, r25
    273c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	fe 01       	movw	r30, r28
    2740:	e3 57       	subi	r30, 0x73	; 115
    2742:	fe 4f       	sbci	r31, 0xFE	; 254
    2744:	80 81       	ld	r24, Z
    2746:	91 81       	ldd	r25, Z+1	; 0x01
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	d1 f6       	brne	.-76     	; 0x2700 <LED_voidFLASH+0x2b6>
    274c:	27 c0       	rjmp	.+78     	; 0x279c <LED_voidFLASH+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274e:	8e 01       	movw	r16, r28
    2750:	03 57       	subi	r16, 0x73	; 115
    2752:	1e 4f       	sbci	r17, 0xFE	; 254
    2754:	fe 01       	movw	r30, r28
    2756:	e1 57       	subi	r30, 0x71	; 113
    2758:	fe 4f       	sbci	r31, 0xFE	; 254
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	f8 01       	movw	r30, r16
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	80 83       	st	Z, r24
    2770:	de 01       	movw	r26, r28
    2772:	a7 57       	subi	r26, 0x77	; 119
    2774:	be 4f       	sbci	r27, 0xFE	; 254
    2776:	fe 01       	movw	r30, r28
    2778:	e3 57       	subi	r30, 0x73	; 115
    277a:	fe 4f       	sbci	r31, 0xFE	; 254
    277c:	80 81       	ld	r24, Z
    277e:	91 81       	ldd	r25, Z+1	; 0x01
    2780:	8d 93       	st	X+, r24
    2782:	9c 93       	st	X, r25
    2784:	fe 01       	movw	r30, r28
    2786:	e7 57       	subi	r30, 0x77	; 119
    2788:	fe 4f       	sbci	r31, 0xFE	; 254
    278a:	80 81       	ld	r24, Z
    278c:	91 81       	ldd	r25, Z+1	; 0x01
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <LED_voidFLASH+0x344>
    2792:	fe 01       	movw	r30, r28
    2794:	e7 57       	subi	r30, 0x77	; 119
    2796:	fe 4f       	sbci	r31, 0xFE	; 254
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	80 83       	st	Z, r24
			_delay_ms(500);
			LED_voidLedOn(LED0);
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    27a2:	fe 01       	movw	r30, r28
    27a4:	eb 57       	subi	r30, 0x7B	; 123
    27a6:	fe 4f       	sbci	r31, 0xFE	; 254
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	a8 ec       	ldi	r26, 0xC8	; 200
    27ae:	b2 e4       	ldi	r27, 0x42	; 66
    27b0:	80 83       	st	Z, r24
    27b2:	91 83       	std	Z+1, r25	; 0x01
    27b4:	a2 83       	std	Z+2, r26	; 0x02
    27b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b8:	8e 01       	movw	r16, r28
    27ba:	0f 57       	subi	r16, 0x7F	; 127
    27bc:	1e 4f       	sbci	r17, 0xFE	; 254
    27be:	fe 01       	movw	r30, r28
    27c0:	eb 57       	subi	r30, 0x7B	; 123
    27c2:	fe 4f       	sbci	r31, 0xFE	; 254
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	4a e7       	ldi	r20, 0x7A	; 122
    27d2:	55 e4       	ldi	r21, 0x45	; 69
    27d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	f8 01       	movw	r30, r16
    27de:	80 83       	st	Z, r24
    27e0:	91 83       	std	Z+1, r25	; 0x01
    27e2:	a2 83       	std	Z+2, r26	; 0x02
    27e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27e6:	fe 01       	movw	r30, r28
    27e8:	ef 57       	subi	r30, 0x7F	; 127
    27ea:	fe 4f       	sbci	r31, 0xFE	; 254
    27ec:	60 81       	ld	r22, Z
    27ee:	71 81       	ldd	r23, Z+1	; 0x01
    27f0:	82 81       	ldd	r24, Z+2	; 0x02
    27f2:	93 81       	ldd	r25, Z+3	; 0x03
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2800:	88 23       	and	r24, r24
    2802:	44 f4       	brge	.+16     	; 0x2814 <LED_voidFLASH+0x3ca>
		__ticks = 1;
    2804:	fe 01       	movw	r30, r28
    2806:	e1 58       	subi	r30, 0x81	; 129
    2808:	fe 4f       	sbci	r31, 0xFE	; 254
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	91 83       	std	Z+1, r25	; 0x01
    2810:	80 83       	st	Z, r24
    2812:	64 c0       	rjmp	.+200    	; 0x28dc <LED_voidFLASH+0x492>
	else if (__tmp > 65535)
    2814:	fe 01       	movw	r30, r28
    2816:	ef 57       	subi	r30, 0x7F	; 127
    2818:	fe 4f       	sbci	r31, 0xFE	; 254
    281a:	60 81       	ld	r22, Z
    281c:	71 81       	ldd	r23, Z+1	; 0x01
    281e:	82 81       	ldd	r24, Z+2	; 0x02
    2820:	93 81       	ldd	r25, Z+3	; 0x03
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	3f ef       	ldi	r19, 0xFF	; 255
    2826:	4f e7       	ldi	r20, 0x7F	; 127
    2828:	57 e4       	ldi	r21, 0x47	; 71
    282a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    282e:	18 16       	cp	r1, r24
    2830:	0c f0       	brlt	.+2      	; 0x2834 <LED_voidFLASH+0x3ea>
    2832:	43 c0       	rjmp	.+134    	; 0x28ba <LED_voidFLASH+0x470>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2834:	fe 01       	movw	r30, r28
    2836:	eb 57       	subi	r30, 0x7B	; 123
    2838:	fe 4f       	sbci	r31, 0xFE	; 254
    283a:	60 81       	ld	r22, Z
    283c:	71 81       	ldd	r23, Z+1	; 0x01
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	40 e2       	ldi	r20, 0x20	; 32
    2848:	51 e4       	ldi	r21, 0x41	; 65
    284a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	8e 01       	movw	r16, r28
    2854:	01 58       	subi	r16, 0x81	; 129
    2856:	1e 4f       	sbci	r17, 0xFE	; 254
    2858:	bc 01       	movw	r22, r24
    285a:	cd 01       	movw	r24, r26
    285c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	f8 01       	movw	r30, r16
    2866:	91 83       	std	Z+1, r25	; 0x01
    2868:	80 83       	st	Z, r24
    286a:	1f c0       	rjmp	.+62     	; 0x28aa <LED_voidFLASH+0x460>
    286c:	fe 01       	movw	r30, r28
    286e:	e3 58       	subi	r30, 0x83	; 131
    2870:	fe 4f       	sbci	r31, 0xFE	; 254
    2872:	80 e9       	ldi	r24, 0x90	; 144
    2874:	91 e0       	ldi	r25, 0x01	; 1
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	80 83       	st	Z, r24
    287a:	fe 01       	movw	r30, r28
    287c:	e3 58       	subi	r30, 0x83	; 131
    287e:	fe 4f       	sbci	r31, 0xFE	; 254
    2880:	80 81       	ld	r24, Z
    2882:	91 81       	ldd	r25, Z+1	; 0x01
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <LED_voidFLASH+0x43a>
    2888:	fe 01       	movw	r30, r28
    288a:	e3 58       	subi	r30, 0x83	; 131
    288c:	fe 4f       	sbci	r31, 0xFE	; 254
    288e:	91 83       	std	Z+1, r25	; 0x01
    2890:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2892:	de 01       	movw	r26, r28
    2894:	a1 58       	subi	r26, 0x81	; 129
    2896:	be 4f       	sbci	r27, 0xFE	; 254
    2898:	fe 01       	movw	r30, r28
    289a:	e1 58       	subi	r30, 0x81	; 129
    289c:	fe 4f       	sbci	r31, 0xFE	; 254
    289e:	80 81       	ld	r24, Z
    28a0:	91 81       	ldd	r25, Z+1	; 0x01
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	11 96       	adiw	r26, 0x01	; 1
    28a6:	9c 93       	st	X, r25
    28a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28aa:	fe 01       	movw	r30, r28
    28ac:	e1 58       	subi	r30, 0x81	; 129
    28ae:	fe 4f       	sbci	r31, 0xFE	; 254
    28b0:	80 81       	ld	r24, Z
    28b2:	91 81       	ldd	r25, Z+1	; 0x01
    28b4:	00 97       	sbiw	r24, 0x00	; 0
    28b6:	d1 f6       	brne	.-76     	; 0x286c <LED_voidFLASH+0x422>
    28b8:	27 c0       	rjmp	.+78     	; 0x2908 <LED_voidFLASH+0x4be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ba:	8e 01       	movw	r16, r28
    28bc:	01 58       	subi	r16, 0x81	; 129
    28be:	1e 4f       	sbci	r17, 0xFE	; 254
    28c0:	fe 01       	movw	r30, r28
    28c2:	ef 57       	subi	r30, 0x7F	; 127
    28c4:	fe 4f       	sbci	r31, 0xFE	; 254
    28c6:	60 81       	ld	r22, Z
    28c8:	71 81       	ldd	r23, Z+1	; 0x01
    28ca:	82 81       	ldd	r24, Z+2	; 0x02
    28cc:	93 81       	ldd	r25, Z+3	; 0x03
    28ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	f8 01       	movw	r30, r16
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	80 83       	st	Z, r24
    28dc:	de 01       	movw	r26, r28
    28de:	a5 58       	subi	r26, 0x85	; 133
    28e0:	be 4f       	sbci	r27, 0xFE	; 254
    28e2:	fe 01       	movw	r30, r28
    28e4:	e1 58       	subi	r30, 0x81	; 129
    28e6:	fe 4f       	sbci	r31, 0xFE	; 254
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	8d 93       	st	X+, r24
    28ee:	9c 93       	st	X, r25
    28f0:	fe 01       	movw	r30, r28
    28f2:	e5 58       	subi	r30, 0x85	; 133
    28f4:	fe 4f       	sbci	r31, 0xFE	; 254
    28f6:	80 81       	ld	r24, Z
    28f8:	91 81       	ldd	r25, Z+1	; 0x01
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <LED_voidFLASH+0x4b0>
    28fe:	fe 01       	movw	r30, r28
    2900:	e5 58       	subi	r30, 0x85	; 133
    2902:	fe 4f       	sbci	r31, 0xFE	; 254
    2904:	91 83       	std	Z+1, r25	; 0x01
    2906:	80 83       	st	Z, r24
			_delay_ms(100);
			LED_voidLedOff(LED0);
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    290e:	fe 01       	movw	r30, r28
    2910:	e9 58       	subi	r30, 0x89	; 137
    2912:	fe 4f       	sbci	r31, 0xFE	; 254
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	a8 ec       	ldi	r26, 0xC8	; 200
    291a:	b2 e4       	ldi	r27, 0x42	; 66
    291c:	80 83       	st	Z, r24
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	a2 83       	std	Z+2, r26	; 0x02
    2922:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2924:	8e 01       	movw	r16, r28
    2926:	0d 58       	subi	r16, 0x8D	; 141
    2928:	1e 4f       	sbci	r17, 0xFE	; 254
    292a:	fe 01       	movw	r30, r28
    292c:	e9 58       	subi	r30, 0x89	; 137
    292e:	fe 4f       	sbci	r31, 0xFE	; 254
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	4a e7       	ldi	r20, 0x7A	; 122
    293e:	55 e4       	ldi	r21, 0x45	; 69
    2940:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	f8 01       	movw	r30, r16
    294a:	80 83       	st	Z, r24
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	a2 83       	std	Z+2, r26	; 0x02
    2950:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2952:	fe 01       	movw	r30, r28
    2954:	ed 58       	subi	r30, 0x8D	; 141
    2956:	fe 4f       	sbci	r31, 0xFE	; 254
    2958:	60 81       	ld	r22, Z
    295a:	71 81       	ldd	r23, Z+1	; 0x01
    295c:	82 81       	ldd	r24, Z+2	; 0x02
    295e:	93 81       	ldd	r25, Z+3	; 0x03
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e8       	ldi	r20, 0x80	; 128
    2966:	5f e3       	ldi	r21, 0x3F	; 63
    2968:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    296c:	88 23       	and	r24, r24
    296e:	44 f4       	brge	.+16     	; 0x2980 <LED_voidFLASH+0x536>
		__ticks = 1;
    2970:	fe 01       	movw	r30, r28
    2972:	ef 58       	subi	r30, 0x8F	; 143
    2974:	fe 4f       	sbci	r31, 0xFE	; 254
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	91 83       	std	Z+1, r25	; 0x01
    297c:	80 83       	st	Z, r24
    297e:	64 c0       	rjmp	.+200    	; 0x2a48 <LED_voidFLASH+0x5fe>
	else if (__tmp > 65535)
    2980:	fe 01       	movw	r30, r28
    2982:	ed 58       	subi	r30, 0x8D	; 141
    2984:	fe 4f       	sbci	r31, 0xFE	; 254
    2986:	60 81       	ld	r22, Z
    2988:	71 81       	ldd	r23, Z+1	; 0x01
    298a:	82 81       	ldd	r24, Z+2	; 0x02
    298c:	93 81       	ldd	r25, Z+3	; 0x03
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	3f ef       	ldi	r19, 0xFF	; 255
    2992:	4f e7       	ldi	r20, 0x7F	; 127
    2994:	57 e4       	ldi	r21, 0x47	; 71
    2996:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    299a:	18 16       	cp	r1, r24
    299c:	0c f0       	brlt	.+2      	; 0x29a0 <LED_voidFLASH+0x556>
    299e:	43 c0       	rjmp	.+134    	; 0x2a26 <LED_voidFLASH+0x5dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a0:	fe 01       	movw	r30, r28
    29a2:	e9 58       	subi	r30, 0x89	; 137
    29a4:	fe 4f       	sbci	r31, 0xFE	; 254
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e2       	ldi	r20, 0x20	; 32
    29b4:	51 e4       	ldi	r21, 0x41	; 65
    29b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	8e 01       	movw	r16, r28
    29c0:	0f 58       	subi	r16, 0x8F	; 143
    29c2:	1e 4f       	sbci	r17, 0xFE	; 254
    29c4:	bc 01       	movw	r22, r24
    29c6:	cd 01       	movw	r24, r26
    29c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	f8 01       	movw	r30, r16
    29d2:	91 83       	std	Z+1, r25	; 0x01
    29d4:	80 83       	st	Z, r24
    29d6:	1f c0       	rjmp	.+62     	; 0x2a16 <LED_voidFLASH+0x5cc>
    29d8:	fe 01       	movw	r30, r28
    29da:	e1 59       	subi	r30, 0x91	; 145
    29dc:	fe 4f       	sbci	r31, 0xFE	; 254
    29de:	80 e9       	ldi	r24, 0x90	; 144
    29e0:	91 e0       	ldi	r25, 0x01	; 1
    29e2:	91 83       	std	Z+1, r25	; 0x01
    29e4:	80 83       	st	Z, r24
    29e6:	fe 01       	movw	r30, r28
    29e8:	e1 59       	subi	r30, 0x91	; 145
    29ea:	fe 4f       	sbci	r31, 0xFE	; 254
    29ec:	80 81       	ld	r24, Z
    29ee:	91 81       	ldd	r25, Z+1	; 0x01
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <LED_voidFLASH+0x5a6>
    29f4:	fe 01       	movw	r30, r28
    29f6:	e1 59       	subi	r30, 0x91	; 145
    29f8:	fe 4f       	sbci	r31, 0xFE	; 254
    29fa:	91 83       	std	Z+1, r25	; 0x01
    29fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fe:	de 01       	movw	r26, r28
    2a00:	af 58       	subi	r26, 0x8F	; 143
    2a02:	be 4f       	sbci	r27, 0xFE	; 254
    2a04:	fe 01       	movw	r30, r28
    2a06:	ef 58       	subi	r30, 0x8F	; 143
    2a08:	fe 4f       	sbci	r31, 0xFE	; 254
    2a0a:	80 81       	ld	r24, Z
    2a0c:	91 81       	ldd	r25, Z+1	; 0x01
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	11 96       	adiw	r26, 0x01	; 1
    2a12:	9c 93       	st	X, r25
    2a14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a16:	fe 01       	movw	r30, r28
    2a18:	ef 58       	subi	r30, 0x8F	; 143
    2a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1c:	80 81       	ld	r24, Z
    2a1e:	91 81       	ldd	r25, Z+1	; 0x01
    2a20:	00 97       	sbiw	r24, 0x00	; 0
    2a22:	d1 f6       	brne	.-76     	; 0x29d8 <LED_voidFLASH+0x58e>
    2a24:	27 c0       	rjmp	.+78     	; 0x2a74 <LED_voidFLASH+0x62a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a26:	8e 01       	movw	r16, r28
    2a28:	0f 58       	subi	r16, 0x8F	; 143
    2a2a:	1e 4f       	sbci	r17, 0xFE	; 254
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	ed 58       	subi	r30, 0x8D	; 141
    2a30:	fe 4f       	sbci	r31, 0xFE	; 254
    2a32:	60 81       	ld	r22, Z
    2a34:	71 81       	ldd	r23, Z+1	; 0x01
    2a36:	82 81       	ldd	r24, Z+2	; 0x02
    2a38:	93 81       	ldd	r25, Z+3	; 0x03
    2a3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	f8 01       	movw	r30, r16
    2a44:	91 83       	std	Z+1, r25	; 0x01
    2a46:	80 83       	st	Z, r24
    2a48:	de 01       	movw	r26, r28
    2a4a:	a3 59       	subi	r26, 0x93	; 147
    2a4c:	be 4f       	sbci	r27, 0xFE	; 254
    2a4e:	fe 01       	movw	r30, r28
    2a50:	ef 58       	subi	r30, 0x8F	; 143
    2a52:	fe 4f       	sbci	r31, 0xFE	; 254
    2a54:	80 81       	ld	r24, Z
    2a56:	91 81       	ldd	r25, Z+1	; 0x01
    2a58:	8d 93       	st	X+, r24
    2a5a:	9c 93       	st	X, r25
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e3 59       	subi	r30, 0x93	; 147
    2a60:	fe 4f       	sbci	r31, 0xFE	; 254
    2a62:	80 81       	ld	r24, Z
    2a64:	91 81       	ldd	r25, Z+1	; 0x01
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <LED_voidFLASH+0x61c>
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e3 59       	subi	r30, 0x93	; 147
    2a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	80 83       	st	Z, r24
			_delay_ms(100);
			LED_voidLedOn(LED0);
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e7 59       	subi	r30, 0x97	; 151
    2a7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	aa ef       	ldi	r26, 0xFA	; 250
    2a86:	b3 e4       	ldi	r27, 0x43	; 67
    2a88:	80 83       	st	Z, r24
    2a8a:	91 83       	std	Z+1, r25	; 0x01
    2a8c:	a2 83       	std	Z+2, r26	; 0x02
    2a8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a90:	8e 01       	movw	r16, r28
    2a92:	0b 59       	subi	r16, 0x9B	; 155
    2a94:	1e 4f       	sbci	r17, 0xFE	; 254
    2a96:	fe 01       	movw	r30, r28
    2a98:	e7 59       	subi	r30, 0x97	; 151
    2a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9c:	60 81       	ld	r22, Z
    2a9e:	71 81       	ldd	r23, Z+1	; 0x01
    2aa0:	82 81       	ldd	r24, Z+2	; 0x02
    2aa2:	93 81       	ldd	r25, Z+3	; 0x03
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a e7       	ldi	r20, 0x7A	; 122
    2aaa:	55 e4       	ldi	r21, 0x45	; 69
    2aac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	80 83       	st	Z, r24
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	a2 83       	std	Z+2, r26	; 0x02
    2abc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2abe:	fe 01       	movw	r30, r28
    2ac0:	eb 59       	subi	r30, 0x9B	; 155
    2ac2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac4:	60 81       	ld	r22, Z
    2ac6:	71 81       	ldd	r23, Z+1	; 0x01
    2ac8:	82 81       	ldd	r24, Z+2	; 0x02
    2aca:	93 81       	ldd	r25, Z+3	; 0x03
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e8       	ldi	r20, 0x80	; 128
    2ad2:	5f e3       	ldi	r21, 0x3F	; 63
    2ad4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ad8:	88 23       	and	r24, r24
    2ada:	44 f4       	brge	.+16     	; 0x2aec <LED_voidFLASH+0x6a2>
		__ticks = 1;
    2adc:	fe 01       	movw	r30, r28
    2ade:	ed 59       	subi	r30, 0x9D	; 157
    2ae0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	91 83       	std	Z+1, r25	; 0x01
    2ae8:	80 83       	st	Z, r24
    2aea:	64 c0       	rjmp	.+200    	; 0x2bb4 <LED_voidFLASH+0x76a>
	else if (__tmp > 65535)
    2aec:	fe 01       	movw	r30, r28
    2aee:	eb 59       	subi	r30, 0x9B	; 155
    2af0:	fe 4f       	sbci	r31, 0xFE	; 254
    2af2:	60 81       	ld	r22, Z
    2af4:	71 81       	ldd	r23, Z+1	; 0x01
    2af6:	82 81       	ldd	r24, Z+2	; 0x02
    2af8:	93 81       	ldd	r25, Z+3	; 0x03
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	3f ef       	ldi	r19, 0xFF	; 255
    2afe:	4f e7       	ldi	r20, 0x7F	; 127
    2b00:	57 e4       	ldi	r21, 0x47	; 71
    2b02:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b06:	18 16       	cp	r1, r24
    2b08:	0c f0       	brlt	.+2      	; 0x2b0c <LED_voidFLASH+0x6c2>
    2b0a:	43 c0       	rjmp	.+134    	; 0x2b92 <LED_voidFLASH+0x748>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	e7 59       	subi	r30, 0x97	; 151
    2b10:	fe 4f       	sbci	r31, 0xFE	; 254
    2b12:	60 81       	ld	r22, Z
    2b14:	71 81       	ldd	r23, Z+1	; 0x01
    2b16:	82 81       	ldd	r24, Z+2	; 0x02
    2b18:	93 81       	ldd	r25, Z+3	; 0x03
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e2       	ldi	r20, 0x20	; 32
    2b20:	51 e4       	ldi	r21, 0x41	; 65
    2b22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	8e 01       	movw	r16, r28
    2b2c:	0d 59       	subi	r16, 0x9D	; 157
    2b2e:	1e 4f       	sbci	r17, 0xFE	; 254
    2b30:	bc 01       	movw	r22, r24
    2b32:	cd 01       	movw	r24, r26
    2b34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	f8 01       	movw	r30, r16
    2b3e:	91 83       	std	Z+1, r25	; 0x01
    2b40:	80 83       	st	Z, r24
    2b42:	1f c0       	rjmp	.+62     	; 0x2b82 <LED_voidFLASH+0x738>
    2b44:	fe 01       	movw	r30, r28
    2b46:	ef 59       	subi	r30, 0x9F	; 159
    2b48:	fe 4f       	sbci	r31, 0xFE	; 254
    2b4a:	80 e9       	ldi	r24, 0x90	; 144
    2b4c:	91 e0       	ldi	r25, 0x01	; 1
    2b4e:	91 83       	std	Z+1, r25	; 0x01
    2b50:	80 83       	st	Z, r24
    2b52:	fe 01       	movw	r30, r28
    2b54:	ef 59       	subi	r30, 0x9F	; 159
    2b56:	fe 4f       	sbci	r31, 0xFE	; 254
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <LED_voidFLASH+0x712>
    2b60:	fe 01       	movw	r30, r28
    2b62:	ef 59       	subi	r30, 0x9F	; 159
    2b64:	fe 4f       	sbci	r31, 0xFE	; 254
    2b66:	91 83       	std	Z+1, r25	; 0x01
    2b68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6a:	de 01       	movw	r26, r28
    2b6c:	ad 59       	subi	r26, 0x9D	; 157
    2b6e:	be 4f       	sbci	r27, 0xFE	; 254
    2b70:	fe 01       	movw	r30, r28
    2b72:	ed 59       	subi	r30, 0x9D	; 157
    2b74:	fe 4f       	sbci	r31, 0xFE	; 254
    2b76:	80 81       	ld	r24, Z
    2b78:	91 81       	ldd	r25, Z+1	; 0x01
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	11 96       	adiw	r26, 0x01	; 1
    2b7e:	9c 93       	st	X, r25
    2b80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b82:	fe 01       	movw	r30, r28
    2b84:	ed 59       	subi	r30, 0x9D	; 157
    2b86:	fe 4f       	sbci	r31, 0xFE	; 254
    2b88:	80 81       	ld	r24, Z
    2b8a:	91 81       	ldd	r25, Z+1	; 0x01
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	d1 f6       	brne	.-76     	; 0x2b44 <LED_voidFLASH+0x6fa>
    2b90:	27 c0       	rjmp	.+78     	; 0x2be0 <LED_voidFLASH+0x796>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b92:	8e 01       	movw	r16, r28
    2b94:	0d 59       	subi	r16, 0x9D	; 157
    2b96:	1e 4f       	sbci	r17, 0xFE	; 254
    2b98:	fe 01       	movw	r30, r28
    2b9a:	eb 59       	subi	r30, 0x9B	; 155
    2b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	f8 01       	movw	r30, r16
    2bb0:	91 83       	std	Z+1, r25	; 0x01
    2bb2:	80 83       	st	Z, r24
    2bb4:	de 01       	movw	r26, r28
    2bb6:	a1 5a       	subi	r26, 0xA1	; 161
    2bb8:	be 4f       	sbci	r27, 0xFE	; 254
    2bba:	fe 01       	movw	r30, r28
    2bbc:	ed 59       	subi	r30, 0x9D	; 157
    2bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc0:	80 81       	ld	r24, Z
    2bc2:	91 81       	ldd	r25, Z+1	; 0x01
    2bc4:	8d 93       	st	X+, r24
    2bc6:	9c 93       	st	X, r25
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e1 5a       	subi	r30, 0xA1	; 161
    2bcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bce:	80 81       	ld	r24, Z
    2bd0:	91 81       	ldd	r25, Z+1	; 0x01
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <LED_voidFLASH+0x788>
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	e1 5a       	subi	r30, 0xA1	; 161
    2bda:	fe 4f       	sbci	r31, 0xFE	; 254
    2bdc:	91 83       	std	Z+1, r25	; 0x01
    2bde:	80 83       	st	Z, r24
			_delay_ms(500);
			LED_voidLedOff(LED0);
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    2be6:	fe 01       	movw	r30, r28
    2be8:	e5 5a       	subi	r30, 0xA5	; 165
    2bea:	fe 4f       	sbci	r31, 0xFE	; 254
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	aa ef       	ldi	r26, 0xFA	; 250
    2bf2:	b3 e4       	ldi	r27, 0x43	; 67
    2bf4:	80 83       	st	Z, r24
    2bf6:	91 83       	std	Z+1, r25	; 0x01
    2bf8:	a2 83       	std	Z+2, r26	; 0x02
    2bfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfc:	8e 01       	movw	r16, r28
    2bfe:	09 5a       	subi	r16, 0xA9	; 169
    2c00:	1e 4f       	sbci	r17, 0xFE	; 254
    2c02:	fe 01       	movw	r30, r28
    2c04:	e5 5a       	subi	r30, 0xA5	; 165
    2c06:	fe 4f       	sbci	r31, 0xFE	; 254
    2c08:	60 81       	ld	r22, Z
    2c0a:	71 81       	ldd	r23, Z+1	; 0x01
    2c0c:	82 81       	ldd	r24, Z+2	; 0x02
    2c0e:	93 81       	ldd	r25, Z+3	; 0x03
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	4a e7       	ldi	r20, 0x7A	; 122
    2c16:	55 e4       	ldi	r21, 0x45	; 69
    2c18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	f8 01       	movw	r30, r16
    2c22:	80 83       	st	Z, r24
    2c24:	91 83       	std	Z+1, r25	; 0x01
    2c26:	a2 83       	std	Z+2, r26	; 0x02
    2c28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e9 5a       	subi	r30, 0xA9	; 169
    2c2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c30:	60 81       	ld	r22, Z
    2c32:	71 81       	ldd	r23, Z+1	; 0x01
    2c34:	82 81       	ldd	r24, Z+2	; 0x02
    2c36:	93 81       	ldd	r25, Z+3	; 0x03
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e8       	ldi	r20, 0x80	; 128
    2c3e:	5f e3       	ldi	r21, 0x3F	; 63
    2c40:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c44:	88 23       	and	r24, r24
    2c46:	44 f4       	brge	.+16     	; 0x2c58 <LED_voidFLASH+0x80e>
		__ticks = 1;
    2c48:	fe 01       	movw	r30, r28
    2c4a:	eb 5a       	subi	r30, 0xAB	; 171
    2c4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	91 83       	std	Z+1, r25	; 0x01
    2c54:	80 83       	st	Z, r24
    2c56:	64 c0       	rjmp	.+200    	; 0x2d20 <LED_voidFLASH+0x8d6>
	else if (__tmp > 65535)
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e9 5a       	subi	r30, 0xA9	; 169
    2c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c5e:	60 81       	ld	r22, Z
    2c60:	71 81       	ldd	r23, Z+1	; 0x01
    2c62:	82 81       	ldd	r24, Z+2	; 0x02
    2c64:	93 81       	ldd	r25, Z+3	; 0x03
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	3f ef       	ldi	r19, 0xFF	; 255
    2c6a:	4f e7       	ldi	r20, 0x7F	; 127
    2c6c:	57 e4       	ldi	r21, 0x47	; 71
    2c6e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c72:	18 16       	cp	r1, r24
    2c74:	0c f0       	brlt	.+2      	; 0x2c78 <LED_voidFLASH+0x82e>
    2c76:	43 c0       	rjmp	.+134    	; 0x2cfe <LED_voidFLASH+0x8b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c78:	fe 01       	movw	r30, r28
    2c7a:	e5 5a       	subi	r30, 0xA5	; 165
    2c7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7e:	60 81       	ld	r22, Z
    2c80:	71 81       	ldd	r23, Z+1	; 0x01
    2c82:	82 81       	ldd	r24, Z+2	; 0x02
    2c84:	93 81       	ldd	r25, Z+3	; 0x03
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e2       	ldi	r20, 0x20	; 32
    2c8c:	51 e4       	ldi	r21, 0x41	; 65
    2c8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	8e 01       	movw	r16, r28
    2c98:	0b 5a       	subi	r16, 0xAB	; 171
    2c9a:	1e 4f       	sbci	r17, 0xFE	; 254
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	f8 01       	movw	r30, r16
    2caa:	91 83       	std	Z+1, r25	; 0x01
    2cac:	80 83       	st	Z, r24
    2cae:	1f c0       	rjmp	.+62     	; 0x2cee <LED_voidFLASH+0x8a4>
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	ed 5a       	subi	r30, 0xAD	; 173
    2cb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2cb6:	80 e9       	ldi	r24, 0x90	; 144
    2cb8:	91 e0       	ldi	r25, 0x01	; 1
    2cba:	91 83       	std	Z+1, r25	; 0x01
    2cbc:	80 83       	st	Z, r24
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	ed 5a       	subi	r30, 0xAD	; 173
    2cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc4:	80 81       	ld	r24, Z
    2cc6:	91 81       	ldd	r25, Z+1	; 0x01
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	f1 f7       	brne	.-4      	; 0x2cc8 <LED_voidFLASH+0x87e>
    2ccc:	fe 01       	movw	r30, r28
    2cce:	ed 5a       	subi	r30, 0xAD	; 173
    2cd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd6:	de 01       	movw	r26, r28
    2cd8:	ab 5a       	subi	r26, 0xAB	; 171
    2cda:	be 4f       	sbci	r27, 0xFE	; 254
    2cdc:	fe 01       	movw	r30, r28
    2cde:	eb 5a       	subi	r30, 0xAB	; 171
    2ce0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce2:	80 81       	ld	r24, Z
    2ce4:	91 81       	ldd	r25, Z+1	; 0x01
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	11 96       	adiw	r26, 0x01	; 1
    2cea:	9c 93       	st	X, r25
    2cec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cee:	fe 01       	movw	r30, r28
    2cf0:	eb 5a       	subi	r30, 0xAB	; 171
    2cf2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf4:	80 81       	ld	r24, Z
    2cf6:	91 81       	ldd	r25, Z+1	; 0x01
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	d1 f6       	brne	.-76     	; 0x2cb0 <LED_voidFLASH+0x866>
    2cfc:	27 c0       	rjmp	.+78     	; 0x2d4c <LED_voidFLASH+0x902>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfe:	8e 01       	movw	r16, r28
    2d00:	0b 5a       	subi	r16, 0xAB	; 171
    2d02:	1e 4f       	sbci	r17, 0xFE	; 254
    2d04:	fe 01       	movw	r30, r28
    2d06:	e9 5a       	subi	r30, 0xA9	; 169
    2d08:	fe 4f       	sbci	r31, 0xFE	; 254
    2d0a:	60 81       	ld	r22, Z
    2d0c:	71 81       	ldd	r23, Z+1	; 0x01
    2d0e:	82 81       	ldd	r24, Z+2	; 0x02
    2d10:	93 81       	ldd	r25, Z+3	; 0x03
    2d12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	f8 01       	movw	r30, r16
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	80 83       	st	Z, r24
    2d20:	de 01       	movw	r26, r28
    2d22:	af 5a       	subi	r26, 0xAF	; 175
    2d24:	be 4f       	sbci	r27, 0xFE	; 254
    2d26:	fe 01       	movw	r30, r28
    2d28:	eb 5a       	subi	r30, 0xAB	; 171
    2d2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d2c:	80 81       	ld	r24, Z
    2d2e:	91 81       	ldd	r25, Z+1	; 0x01
    2d30:	8d 93       	st	X+, r24
    2d32:	9c 93       	st	X, r25
    2d34:	fe 01       	movw	r30, r28
    2d36:	ef 5a       	subi	r30, 0xAF	; 175
    2d38:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3a:	80 81       	ld	r24, Z
    2d3c:	91 81       	ldd	r25, Z+1	; 0x01
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <LED_voidFLASH+0x8f4>
    2d42:	fe 01       	movw	r30, r28
    2d44:	ef 5a       	subi	r30, 0xAF	; 175
    2d46:	fe 4f       	sbci	r31, 0xFE	; 254
    2d48:	91 83       	std	Z+1, r25	; 0x01
    2d4a:	80 83       	st	Z, r24
			_delay_ms(500);
			LED_voidLedOn(LED0);
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    2d52:	fe 01       	movw	r30, r28
    2d54:	e3 5b       	subi	r30, 0xB3	; 179
    2d56:	fe 4f       	sbci	r31, 0xFE	; 254
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	a8 ec       	ldi	r26, 0xC8	; 200
    2d5e:	b2 e4       	ldi	r27, 0x42	; 66
    2d60:	80 83       	st	Z, r24
    2d62:	91 83       	std	Z+1, r25	; 0x01
    2d64:	a2 83       	std	Z+2, r26	; 0x02
    2d66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d68:	8e 01       	movw	r16, r28
    2d6a:	07 5b       	subi	r16, 0xB7	; 183
    2d6c:	1e 4f       	sbci	r17, 0xFE	; 254
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e3 5b       	subi	r30, 0xB3	; 179
    2d72:	fe 4f       	sbci	r31, 0xFE	; 254
    2d74:	60 81       	ld	r22, Z
    2d76:	71 81       	ldd	r23, Z+1	; 0x01
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	93 81       	ldd	r25, Z+3	; 0x03
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	4a e7       	ldi	r20, 0x7A	; 122
    2d82:	55 e4       	ldi	r21, 0x45	; 69
    2d84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	f8 01       	movw	r30, r16
    2d8e:	80 83       	st	Z, r24
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	a2 83       	std	Z+2, r26	; 0x02
    2d94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d96:	fe 01       	movw	r30, r28
    2d98:	e7 5b       	subi	r30, 0xB7	; 183
    2d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d9c:	60 81       	ld	r22, Z
    2d9e:	71 81       	ldd	r23, Z+1	; 0x01
    2da0:	82 81       	ldd	r24, Z+2	; 0x02
    2da2:	93 81       	ldd	r25, Z+3	; 0x03
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e8       	ldi	r20, 0x80	; 128
    2daa:	5f e3       	ldi	r21, 0x3F	; 63
    2dac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2db0:	88 23       	and	r24, r24
    2db2:	44 f4       	brge	.+16     	; 0x2dc4 <LED_voidFLASH+0x97a>
		__ticks = 1;
    2db4:	fe 01       	movw	r30, r28
    2db6:	e9 5b       	subi	r30, 0xB9	; 185
    2db8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	80 83       	st	Z, r24
    2dc2:	64 c0       	rjmp	.+200    	; 0x2e8c <LED_voidFLASH+0xa42>
	else if (__tmp > 65535)
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e7 5b       	subi	r30, 0xB7	; 183
    2dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	3f ef       	ldi	r19, 0xFF	; 255
    2dd6:	4f e7       	ldi	r20, 0x7F	; 127
    2dd8:	57 e4       	ldi	r21, 0x47	; 71
    2dda:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2dde:	18 16       	cp	r1, r24
    2de0:	0c f0       	brlt	.+2      	; 0x2de4 <LED_voidFLASH+0x99a>
    2de2:	43 c0       	rjmp	.+134    	; 0x2e6a <LED_voidFLASH+0xa20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de4:	fe 01       	movw	r30, r28
    2de6:	e3 5b       	subi	r30, 0xB3	; 179
    2de8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dea:	60 81       	ld	r22, Z
    2dec:	71 81       	ldd	r23, Z+1	; 0x01
    2dee:	82 81       	ldd	r24, Z+2	; 0x02
    2df0:	93 81       	ldd	r25, Z+3	; 0x03
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e2       	ldi	r20, 0x20	; 32
    2df8:	51 e4       	ldi	r21, 0x41	; 65
    2dfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	8e 01       	movw	r16, r28
    2e04:	09 5b       	subi	r16, 0xB9	; 185
    2e06:	1e 4f       	sbci	r17, 0xFE	; 254
    2e08:	bc 01       	movw	r22, r24
    2e0a:	cd 01       	movw	r24, r26
    2e0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	f8 01       	movw	r30, r16
    2e16:	91 83       	std	Z+1, r25	; 0x01
    2e18:	80 83       	st	Z, r24
    2e1a:	1f c0       	rjmp	.+62     	; 0x2e5a <LED_voidFLASH+0xa10>
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	eb 5b       	subi	r30, 0xBB	; 187
    2e20:	fe 4f       	sbci	r31, 0xFE	; 254
    2e22:	80 e9       	ldi	r24, 0x90	; 144
    2e24:	91 e0       	ldi	r25, 0x01	; 1
    2e26:	91 83       	std	Z+1, r25	; 0x01
    2e28:	80 83       	st	Z, r24
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	eb 5b       	subi	r30, 0xBB	; 187
    2e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e30:	80 81       	ld	r24, Z
    2e32:	91 81       	ldd	r25, Z+1	; 0x01
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	f1 f7       	brne	.-4      	; 0x2e34 <LED_voidFLASH+0x9ea>
    2e38:	fe 01       	movw	r30, r28
    2e3a:	eb 5b       	subi	r30, 0xBB	; 187
    2e3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e42:	de 01       	movw	r26, r28
    2e44:	a9 5b       	subi	r26, 0xB9	; 185
    2e46:	be 4f       	sbci	r27, 0xFE	; 254
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e9 5b       	subi	r30, 0xB9	; 185
    2e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e4e:	80 81       	ld	r24, Z
    2e50:	91 81       	ldd	r25, Z+1	; 0x01
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	11 96       	adiw	r26, 0x01	; 1
    2e56:	9c 93       	st	X, r25
    2e58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e9 5b       	subi	r30, 0xB9	; 185
    2e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e60:	80 81       	ld	r24, Z
    2e62:	91 81       	ldd	r25, Z+1	; 0x01
    2e64:	00 97       	sbiw	r24, 0x00	; 0
    2e66:	d1 f6       	brne	.-76     	; 0x2e1c <LED_voidFLASH+0x9d2>
    2e68:	27 c0       	rjmp	.+78     	; 0x2eb8 <LED_voidFLASH+0xa6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e6a:	8e 01       	movw	r16, r28
    2e6c:	09 5b       	subi	r16, 0xB9	; 185
    2e6e:	1e 4f       	sbci	r17, 0xFE	; 254
    2e70:	fe 01       	movw	r30, r28
    2e72:	e7 5b       	subi	r30, 0xB7	; 183
    2e74:	fe 4f       	sbci	r31, 0xFE	; 254
    2e76:	60 81       	ld	r22, Z
    2e78:	71 81       	ldd	r23, Z+1	; 0x01
    2e7a:	82 81       	ldd	r24, Z+2	; 0x02
    2e7c:	93 81       	ldd	r25, Z+3	; 0x03
    2e7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	f8 01       	movw	r30, r16
    2e88:	91 83       	std	Z+1, r25	; 0x01
    2e8a:	80 83       	st	Z, r24
    2e8c:	de 01       	movw	r26, r28
    2e8e:	ad 5b       	subi	r26, 0xBD	; 189
    2e90:	be 4f       	sbci	r27, 0xFE	; 254
    2e92:	fe 01       	movw	r30, r28
    2e94:	e9 5b       	subi	r30, 0xB9	; 185
    2e96:	fe 4f       	sbci	r31, 0xFE	; 254
    2e98:	80 81       	ld	r24, Z
    2e9a:	91 81       	ldd	r25, Z+1	; 0x01
    2e9c:	8d 93       	st	X+, r24
    2e9e:	9c 93       	st	X, r25
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	ed 5b       	subi	r30, 0xBD	; 189
    2ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea6:	80 81       	ld	r24, Z
    2ea8:	91 81       	ldd	r25, Z+1	; 0x01
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	f1 f7       	brne	.-4      	; 0x2eaa <LED_voidFLASH+0xa60>
    2eae:	fe 01       	movw	r30, r28
    2eb0:	ed 5b       	subi	r30, 0xBD	; 189
    2eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb4:	91 83       	std	Z+1, r25	; 0x01
    2eb6:	80 83       	st	Z, r24
			_delay_ms(100);
			LED_voidLedOff(LED0);
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e1 5c       	subi	r30, 0xC1	; 193
    2ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	a8 ec       	ldi	r26, 0xC8	; 200
    2eca:	b2 e4       	ldi	r27, 0x42	; 66
    2ecc:	80 83       	st	Z, r24
    2ece:	91 83       	std	Z+1, r25	; 0x01
    2ed0:	a2 83       	std	Z+2, r26	; 0x02
    2ed2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed4:	8e 01       	movw	r16, r28
    2ed6:	05 5c       	subi	r16, 0xC5	; 197
    2ed8:	1e 4f       	sbci	r17, 0xFE	; 254
    2eda:	fe 01       	movw	r30, r28
    2edc:	e1 5c       	subi	r30, 0xC1	; 193
    2ede:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee0:	60 81       	ld	r22, Z
    2ee2:	71 81       	ldd	r23, Z+1	; 0x01
    2ee4:	82 81       	ldd	r24, Z+2	; 0x02
    2ee6:	93 81       	ldd	r25, Z+3	; 0x03
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	4a e7       	ldi	r20, 0x7A	; 122
    2eee:	55 e4       	ldi	r21, 0x45	; 69
    2ef0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	f8 01       	movw	r30, r16
    2efa:	80 83       	st	Z, r24
    2efc:	91 83       	std	Z+1, r25	; 0x01
    2efe:	a2 83       	std	Z+2, r26	; 0x02
    2f00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f02:	fe 01       	movw	r30, r28
    2f04:	e5 5c       	subi	r30, 0xC5	; 197
    2f06:	fe 4f       	sbci	r31, 0xFE	; 254
    2f08:	60 81       	ld	r22, Z
    2f0a:	71 81       	ldd	r23, Z+1	; 0x01
    2f0c:	82 81       	ldd	r24, Z+2	; 0x02
    2f0e:	93 81       	ldd	r25, Z+3	; 0x03
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	40 e8       	ldi	r20, 0x80	; 128
    2f16:	5f e3       	ldi	r21, 0x3F	; 63
    2f18:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f1c:	88 23       	and	r24, r24
    2f1e:	44 f4       	brge	.+16     	; 0x2f30 <LED_voidFLASH+0xae6>
		__ticks = 1;
    2f20:	fe 01       	movw	r30, r28
    2f22:	e7 5c       	subi	r30, 0xC7	; 199
    2f24:	fe 4f       	sbci	r31, 0xFE	; 254
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	80 83       	st	Z, r24
    2f2e:	64 c0       	rjmp	.+200    	; 0x2ff8 <LED_voidFLASH+0xbae>
	else if (__tmp > 65535)
    2f30:	fe 01       	movw	r30, r28
    2f32:	e5 5c       	subi	r30, 0xC5	; 197
    2f34:	fe 4f       	sbci	r31, 0xFE	; 254
    2f36:	60 81       	ld	r22, Z
    2f38:	71 81       	ldd	r23, Z+1	; 0x01
    2f3a:	82 81       	ldd	r24, Z+2	; 0x02
    2f3c:	93 81       	ldd	r25, Z+3	; 0x03
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	3f ef       	ldi	r19, 0xFF	; 255
    2f42:	4f e7       	ldi	r20, 0x7F	; 127
    2f44:	57 e4       	ldi	r21, 0x47	; 71
    2f46:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f4a:	18 16       	cp	r1, r24
    2f4c:	0c f0       	brlt	.+2      	; 0x2f50 <LED_voidFLASH+0xb06>
    2f4e:	43 c0       	rjmp	.+134    	; 0x2fd6 <LED_voidFLASH+0xb8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f50:	fe 01       	movw	r30, r28
    2f52:	e1 5c       	subi	r30, 0xC1	; 193
    2f54:	fe 4f       	sbci	r31, 0xFE	; 254
    2f56:	60 81       	ld	r22, Z
    2f58:	71 81       	ldd	r23, Z+1	; 0x01
    2f5a:	82 81       	ldd	r24, Z+2	; 0x02
    2f5c:	93 81       	ldd	r25, Z+3	; 0x03
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e2       	ldi	r20, 0x20	; 32
    2f64:	51 e4       	ldi	r21, 0x41	; 65
    2f66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	8e 01       	movw	r16, r28
    2f70:	07 5c       	subi	r16, 0xC7	; 199
    2f72:	1e 4f       	sbci	r17, 0xFE	; 254
    2f74:	bc 01       	movw	r22, r24
    2f76:	cd 01       	movw	r24, r26
    2f78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	f8 01       	movw	r30, r16
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	80 83       	st	Z, r24
    2f86:	1f c0       	rjmp	.+62     	; 0x2fc6 <LED_voidFLASH+0xb7c>
    2f88:	fe 01       	movw	r30, r28
    2f8a:	e9 5c       	subi	r30, 0xC9	; 201
    2f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8e:	80 e9       	ldi	r24, 0x90	; 144
    2f90:	91 e0       	ldi	r25, 0x01	; 1
    2f92:	91 83       	std	Z+1, r25	; 0x01
    2f94:	80 83       	st	Z, r24
    2f96:	fe 01       	movw	r30, r28
    2f98:	e9 5c       	subi	r30, 0xC9	; 201
    2f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f9c:	80 81       	ld	r24, Z
    2f9e:	91 81       	ldd	r25, Z+1	; 0x01
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <LED_voidFLASH+0xb56>
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e9 5c       	subi	r30, 0xC9	; 201
    2fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    2faa:	91 83       	std	Z+1, r25	; 0x01
    2fac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fae:	de 01       	movw	r26, r28
    2fb0:	a7 5c       	subi	r26, 0xC7	; 199
    2fb2:	be 4f       	sbci	r27, 0xFE	; 254
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	e7 5c       	subi	r30, 0xC7	; 199
    2fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2fba:	80 81       	ld	r24, Z
    2fbc:	91 81       	ldd	r25, Z+1	; 0x01
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	11 96       	adiw	r26, 0x01	; 1
    2fc2:	9c 93       	st	X, r25
    2fc4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e7 5c       	subi	r30, 0xC7	; 199
    2fca:	fe 4f       	sbci	r31, 0xFE	; 254
    2fcc:	80 81       	ld	r24, Z
    2fce:	91 81       	ldd	r25, Z+1	; 0x01
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	d1 f6       	brne	.-76     	; 0x2f88 <LED_voidFLASH+0xb3e>
    2fd4:	27 c0       	rjmp	.+78     	; 0x3024 <LED_voidFLASH+0xbda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd6:	8e 01       	movw	r16, r28
    2fd8:	07 5c       	subi	r16, 0xC7	; 199
    2fda:	1e 4f       	sbci	r17, 0xFE	; 254
    2fdc:	fe 01       	movw	r30, r28
    2fde:	e5 5c       	subi	r30, 0xC5	; 197
    2fe0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe2:	60 81       	ld	r22, Z
    2fe4:	71 81       	ldd	r23, Z+1	; 0x01
    2fe6:	82 81       	ldd	r24, Z+2	; 0x02
    2fe8:	93 81       	ldd	r25, Z+3	; 0x03
    2fea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	f8 01       	movw	r30, r16
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	80 83       	st	Z, r24
    2ff8:	de 01       	movw	r26, r28
    2ffa:	ab 5c       	subi	r26, 0xCB	; 203
    2ffc:	be 4f       	sbci	r27, 0xFE	; 254
    2ffe:	fe 01       	movw	r30, r28
    3000:	e7 5c       	subi	r30, 0xC7	; 199
    3002:	fe 4f       	sbci	r31, 0xFE	; 254
    3004:	80 81       	ld	r24, Z
    3006:	91 81       	ldd	r25, Z+1	; 0x01
    3008:	8d 93       	st	X+, r24
    300a:	9c 93       	st	X, r25
    300c:	fe 01       	movw	r30, r28
    300e:	eb 5c       	subi	r30, 0xCB	; 203
    3010:	fe 4f       	sbci	r31, 0xFE	; 254
    3012:	80 81       	ld	r24, Z
    3014:	91 81       	ldd	r25, Z+1	; 0x01
    3016:	01 97       	sbiw	r24, 0x01	; 1
    3018:	f1 f7       	brne	.-4      	; 0x3016 <LED_voidFLASH+0xbcc>
    301a:	fe 01       	movw	r30, r28
    301c:	eb 5c       	subi	r30, 0xCB	; 203
    301e:	fe 4f       	sbci	r31, 0xFE	; 254
    3020:	91 83       	std	Z+1, r25	; 0x01
    3022:	80 83       	st	Z, r24
			_delay_ms(100);
			LED_voidLedOn(LED0);
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    302a:	fe 01       	movw	r30, r28
    302c:	ef 5c       	subi	r30, 0xCF	; 207
    302e:	fe 4f       	sbci	r31, 0xFE	; 254
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	a8 e4       	ldi	r26, 0x48	; 72
    3036:	b3 e4       	ldi	r27, 0x43	; 67
    3038:	80 83       	st	Z, r24
    303a:	91 83       	std	Z+1, r25	; 0x01
    303c:	a2 83       	std	Z+2, r26	; 0x02
    303e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3040:	8e 01       	movw	r16, r28
    3042:	03 5d       	subi	r16, 0xD3	; 211
    3044:	1e 4f       	sbci	r17, 0xFE	; 254
    3046:	fe 01       	movw	r30, r28
    3048:	ef 5c       	subi	r30, 0xCF	; 207
    304a:	fe 4f       	sbci	r31, 0xFE	; 254
    304c:	60 81       	ld	r22, Z
    304e:	71 81       	ldd	r23, Z+1	; 0x01
    3050:	82 81       	ldd	r24, Z+2	; 0x02
    3052:	93 81       	ldd	r25, Z+3	; 0x03
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	4a e7       	ldi	r20, 0x7A	; 122
    305a:	55 e4       	ldi	r21, 0x45	; 69
    305c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	f8 01       	movw	r30, r16
    3066:	80 83       	st	Z, r24
    3068:	91 83       	std	Z+1, r25	; 0x01
    306a:	a2 83       	std	Z+2, r26	; 0x02
    306c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    306e:	fe 01       	movw	r30, r28
    3070:	e3 5d       	subi	r30, 0xD3	; 211
    3072:	fe 4f       	sbci	r31, 0xFE	; 254
    3074:	60 81       	ld	r22, Z
    3076:	71 81       	ldd	r23, Z+1	; 0x01
    3078:	82 81       	ldd	r24, Z+2	; 0x02
    307a:	93 81       	ldd	r25, Z+3	; 0x03
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e8       	ldi	r20, 0x80	; 128
    3082:	5f e3       	ldi	r21, 0x3F	; 63
    3084:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3088:	88 23       	and	r24, r24
    308a:	44 f4       	brge	.+16     	; 0x309c <LED_voidFLASH+0xc52>
		__ticks = 1;
    308c:	fe 01       	movw	r30, r28
    308e:	e5 5d       	subi	r30, 0xD5	; 213
    3090:	fe 4f       	sbci	r31, 0xFE	; 254
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	80 83       	st	Z, r24
    309a:	64 c0       	rjmp	.+200    	; 0x3164 <LED_voidFLASH+0xd1a>
	else if (__tmp > 65535)
    309c:	fe 01       	movw	r30, r28
    309e:	e3 5d       	subi	r30, 0xD3	; 211
    30a0:	fe 4f       	sbci	r31, 0xFE	; 254
    30a2:	60 81       	ld	r22, Z
    30a4:	71 81       	ldd	r23, Z+1	; 0x01
    30a6:	82 81       	ldd	r24, Z+2	; 0x02
    30a8:	93 81       	ldd	r25, Z+3	; 0x03
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	3f ef       	ldi	r19, 0xFF	; 255
    30ae:	4f e7       	ldi	r20, 0x7F	; 127
    30b0:	57 e4       	ldi	r21, 0x47	; 71
    30b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30b6:	18 16       	cp	r1, r24
    30b8:	0c f0       	brlt	.+2      	; 0x30bc <LED_voidFLASH+0xc72>
    30ba:	43 c0       	rjmp	.+134    	; 0x3142 <LED_voidFLASH+0xcf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30bc:	fe 01       	movw	r30, r28
    30be:	ef 5c       	subi	r30, 0xCF	; 207
    30c0:	fe 4f       	sbci	r31, 0xFE	; 254
    30c2:	60 81       	ld	r22, Z
    30c4:	71 81       	ldd	r23, Z+1	; 0x01
    30c6:	82 81       	ldd	r24, Z+2	; 0x02
    30c8:	93 81       	ldd	r25, Z+3	; 0x03
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	40 e2       	ldi	r20, 0x20	; 32
    30d0:	51 e4       	ldi	r21, 0x41	; 65
    30d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	8e 01       	movw	r16, r28
    30dc:	05 5d       	subi	r16, 0xD5	; 213
    30de:	1e 4f       	sbci	r17, 0xFE	; 254
    30e0:	bc 01       	movw	r22, r24
    30e2:	cd 01       	movw	r24, r26
    30e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	f8 01       	movw	r30, r16
    30ee:	91 83       	std	Z+1, r25	; 0x01
    30f0:	80 83       	st	Z, r24
    30f2:	1f c0       	rjmp	.+62     	; 0x3132 <LED_voidFLASH+0xce8>
    30f4:	fe 01       	movw	r30, r28
    30f6:	e7 5d       	subi	r30, 0xD7	; 215
    30f8:	fe 4f       	sbci	r31, 0xFE	; 254
    30fa:	80 e9       	ldi	r24, 0x90	; 144
    30fc:	91 e0       	ldi	r25, 0x01	; 1
    30fe:	91 83       	std	Z+1, r25	; 0x01
    3100:	80 83       	st	Z, r24
    3102:	fe 01       	movw	r30, r28
    3104:	e7 5d       	subi	r30, 0xD7	; 215
    3106:	fe 4f       	sbci	r31, 0xFE	; 254
    3108:	80 81       	ld	r24, Z
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	f1 f7       	brne	.-4      	; 0x310c <LED_voidFLASH+0xcc2>
    3110:	fe 01       	movw	r30, r28
    3112:	e7 5d       	subi	r30, 0xD7	; 215
    3114:	fe 4f       	sbci	r31, 0xFE	; 254
    3116:	91 83       	std	Z+1, r25	; 0x01
    3118:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311a:	de 01       	movw	r26, r28
    311c:	a5 5d       	subi	r26, 0xD5	; 213
    311e:	be 4f       	sbci	r27, 0xFE	; 254
    3120:	fe 01       	movw	r30, r28
    3122:	e5 5d       	subi	r30, 0xD5	; 213
    3124:	fe 4f       	sbci	r31, 0xFE	; 254
    3126:	80 81       	ld	r24, Z
    3128:	91 81       	ldd	r25, Z+1	; 0x01
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	11 96       	adiw	r26, 0x01	; 1
    312e:	9c 93       	st	X, r25
    3130:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3132:	fe 01       	movw	r30, r28
    3134:	e5 5d       	subi	r30, 0xD5	; 213
    3136:	fe 4f       	sbci	r31, 0xFE	; 254
    3138:	80 81       	ld	r24, Z
    313a:	91 81       	ldd	r25, Z+1	; 0x01
    313c:	00 97       	sbiw	r24, 0x00	; 0
    313e:	d1 f6       	brne	.-76     	; 0x30f4 <LED_voidFLASH+0xcaa>
    3140:	27 c0       	rjmp	.+78     	; 0x3190 <LED_voidFLASH+0xd46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3142:	8e 01       	movw	r16, r28
    3144:	05 5d       	subi	r16, 0xD5	; 213
    3146:	1e 4f       	sbci	r17, 0xFE	; 254
    3148:	fe 01       	movw	r30, r28
    314a:	e3 5d       	subi	r30, 0xD3	; 211
    314c:	fe 4f       	sbci	r31, 0xFE	; 254
    314e:	60 81       	ld	r22, Z
    3150:	71 81       	ldd	r23, Z+1	; 0x01
    3152:	82 81       	ldd	r24, Z+2	; 0x02
    3154:	93 81       	ldd	r25, Z+3	; 0x03
    3156:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	f8 01       	movw	r30, r16
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24
    3164:	de 01       	movw	r26, r28
    3166:	a9 5d       	subi	r26, 0xD9	; 217
    3168:	be 4f       	sbci	r27, 0xFE	; 254
    316a:	fe 01       	movw	r30, r28
    316c:	e5 5d       	subi	r30, 0xD5	; 213
    316e:	fe 4f       	sbci	r31, 0xFE	; 254
    3170:	80 81       	ld	r24, Z
    3172:	91 81       	ldd	r25, Z+1	; 0x01
    3174:	8d 93       	st	X+, r24
    3176:	9c 93       	st	X, r25
    3178:	fe 01       	movw	r30, r28
    317a:	e9 5d       	subi	r30, 0xD9	; 217
    317c:	fe 4f       	sbci	r31, 0xFE	; 254
    317e:	80 81       	ld	r24, Z
    3180:	91 81       	ldd	r25, Z+1	; 0x01
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	f1 f7       	brne	.-4      	; 0x3182 <LED_voidFLASH+0xd38>
    3186:	fe 01       	movw	r30, r28
    3188:	e9 5d       	subi	r30, 0xD9	; 217
    318a:	fe 4f       	sbci	r31, 0xFE	; 254
    318c:	91 83       	std	Z+1, r25	; 0x01
    318e:	80 83       	st	Z, r24
			_delay_ms(200);
			LED_voidLedOff(LED0);
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    3196:	fe 01       	movw	r30, r28
    3198:	ed 5d       	subi	r30, 0xDD	; 221
    319a:	fe 4f       	sbci	r31, 0xFE	; 254
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	a8 e4       	ldi	r26, 0x48	; 72
    31a2:	b3 e4       	ldi	r27, 0x43	; 67
    31a4:	80 83       	st	Z, r24
    31a6:	91 83       	std	Z+1, r25	; 0x01
    31a8:	a2 83       	std	Z+2, r26	; 0x02
    31aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ac:	8e 01       	movw	r16, r28
    31ae:	01 5e       	subi	r16, 0xE1	; 225
    31b0:	1e 4f       	sbci	r17, 0xFE	; 254
    31b2:	fe 01       	movw	r30, r28
    31b4:	ed 5d       	subi	r30, 0xDD	; 221
    31b6:	fe 4f       	sbci	r31, 0xFE	; 254
    31b8:	60 81       	ld	r22, Z
    31ba:	71 81       	ldd	r23, Z+1	; 0x01
    31bc:	82 81       	ldd	r24, Z+2	; 0x02
    31be:	93 81       	ldd	r25, Z+3	; 0x03
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	4a e7       	ldi	r20, 0x7A	; 122
    31c6:	55 e4       	ldi	r21, 0x45	; 69
    31c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	f8 01       	movw	r30, r16
    31d2:	80 83       	st	Z, r24
    31d4:	91 83       	std	Z+1, r25	; 0x01
    31d6:	a2 83       	std	Z+2, r26	; 0x02
    31d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31da:	fe 01       	movw	r30, r28
    31dc:	e1 5e       	subi	r30, 0xE1	; 225
    31de:	fe 4f       	sbci	r31, 0xFE	; 254
    31e0:	60 81       	ld	r22, Z
    31e2:	71 81       	ldd	r23, Z+1	; 0x01
    31e4:	82 81       	ldd	r24, Z+2	; 0x02
    31e6:	93 81       	ldd	r25, Z+3	; 0x03
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 e8       	ldi	r20, 0x80	; 128
    31ee:	5f e3       	ldi	r21, 0x3F	; 63
    31f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    31f4:	88 23       	and	r24, r24
    31f6:	44 f4       	brge	.+16     	; 0x3208 <LED_voidFLASH+0xdbe>
		__ticks = 1;
    31f8:	fe 01       	movw	r30, r28
    31fa:	e3 5e       	subi	r30, 0xE3	; 227
    31fc:	fe 4f       	sbci	r31, 0xFE	; 254
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	91 83       	std	Z+1, r25	; 0x01
    3204:	80 83       	st	Z, r24
    3206:	65 c0       	rjmp	.+202    	; 0x32d2 <LED_voidFLASH+0xe88>
	else if (__tmp > 65535)
    3208:	fe 01       	movw	r30, r28
    320a:	e1 5e       	subi	r30, 0xE1	; 225
    320c:	fe 4f       	sbci	r31, 0xFE	; 254
    320e:	60 81       	ld	r22, Z
    3210:	71 81       	ldd	r23, Z+1	; 0x01
    3212:	82 81       	ldd	r24, Z+2	; 0x02
    3214:	93 81       	ldd	r25, Z+3	; 0x03
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	3f ef       	ldi	r19, 0xFF	; 255
    321a:	4f e7       	ldi	r20, 0x7F	; 127
    321c:	57 e4       	ldi	r21, 0x47	; 71
    321e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3222:	18 16       	cp	r1, r24
    3224:	0c f0       	brlt	.+2      	; 0x3228 <LED_voidFLASH+0xdde>
    3226:	44 c0       	rjmp	.+136    	; 0x32b0 <LED_voidFLASH+0xe66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3228:	fe 01       	movw	r30, r28
    322a:	ed 5d       	subi	r30, 0xDD	; 221
    322c:	fe 4f       	sbci	r31, 0xFE	; 254
    322e:	60 81       	ld	r22, Z
    3230:	71 81       	ldd	r23, Z+1	; 0x01
    3232:	82 81       	ldd	r24, Z+2	; 0x02
    3234:	93 81       	ldd	r25, Z+3	; 0x03
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e2       	ldi	r20, 0x20	; 32
    323c:	51 e4       	ldi	r21, 0x41	; 65
    323e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	8e 01       	movw	r16, r28
    3248:	03 5e       	subi	r16, 0xE3	; 227
    324a:	1e 4f       	sbci	r17, 0xFE	; 254
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	f8 01       	movw	r30, r16
    325a:	91 83       	std	Z+1, r25	; 0x01
    325c:	80 83       	st	Z, r24
    325e:	1f c0       	rjmp	.+62     	; 0x329e <LED_voidFLASH+0xe54>
    3260:	fe 01       	movw	r30, r28
    3262:	e5 5e       	subi	r30, 0xE5	; 229
    3264:	fe 4f       	sbci	r31, 0xFE	; 254
    3266:	80 e9       	ldi	r24, 0x90	; 144
    3268:	91 e0       	ldi	r25, 0x01	; 1
    326a:	91 83       	std	Z+1, r25	; 0x01
    326c:	80 83       	st	Z, r24
    326e:	fe 01       	movw	r30, r28
    3270:	e5 5e       	subi	r30, 0xE5	; 229
    3272:	fe 4f       	sbci	r31, 0xFE	; 254
    3274:	80 81       	ld	r24, Z
    3276:	91 81       	ldd	r25, Z+1	; 0x01
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	f1 f7       	brne	.-4      	; 0x3278 <LED_voidFLASH+0xe2e>
    327c:	fe 01       	movw	r30, r28
    327e:	e5 5e       	subi	r30, 0xE5	; 229
    3280:	fe 4f       	sbci	r31, 0xFE	; 254
    3282:	91 83       	std	Z+1, r25	; 0x01
    3284:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3286:	de 01       	movw	r26, r28
    3288:	a3 5e       	subi	r26, 0xE3	; 227
    328a:	be 4f       	sbci	r27, 0xFE	; 254
    328c:	fe 01       	movw	r30, r28
    328e:	e3 5e       	subi	r30, 0xE3	; 227
    3290:	fe 4f       	sbci	r31, 0xFE	; 254
    3292:	80 81       	ld	r24, Z
    3294:	91 81       	ldd	r25, Z+1	; 0x01
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	11 96       	adiw	r26, 0x01	; 1
    329a:	9c 93       	st	X, r25
    329c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329e:	fe 01       	movw	r30, r28
    32a0:	e3 5e       	subi	r30, 0xE3	; 227
    32a2:	fe 4f       	sbci	r31, 0xFE	; 254
    32a4:	80 81       	ld	r24, Z
    32a6:	91 81       	ldd	r25, Z+1	; 0x01
    32a8:	00 97       	sbiw	r24, 0x00	; 0
    32aa:	d1 f6       	brne	.-76     	; 0x3260 <LED_voidFLASH+0xe16>
    32ac:	0c 94 8a 26 	jmp	0x4d14	; 0x4d14 <LED_voidFLASH+0x28ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b0:	8e 01       	movw	r16, r28
    32b2:	03 5e       	subi	r16, 0xE3	; 227
    32b4:	1e 4f       	sbci	r17, 0xFE	; 254
    32b6:	fe 01       	movw	r30, r28
    32b8:	e1 5e       	subi	r30, 0xE1	; 225
    32ba:	fe 4f       	sbci	r31, 0xFE	; 254
    32bc:	60 81       	ld	r22, Z
    32be:	71 81       	ldd	r23, Z+1	; 0x01
    32c0:	82 81       	ldd	r24, Z+2	; 0x02
    32c2:	93 81       	ldd	r25, Z+3	; 0x03
    32c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	f8 01       	movw	r30, r16
    32ce:	91 83       	std	Z+1, r25	; 0x01
    32d0:	80 83       	st	Z, r24
    32d2:	de 01       	movw	r26, r28
    32d4:	a7 5e       	subi	r26, 0xE7	; 231
    32d6:	be 4f       	sbci	r27, 0xFE	; 254
    32d8:	fe 01       	movw	r30, r28
    32da:	e3 5e       	subi	r30, 0xE3	; 227
    32dc:	fe 4f       	sbci	r31, 0xFE	; 254
    32de:	80 81       	ld	r24, Z
    32e0:	91 81       	ldd	r25, Z+1	; 0x01
    32e2:	11 96       	adiw	r26, 0x01	; 1
    32e4:	9c 93       	st	X, r25
    32e6:	8e 93       	st	-X, r24
    32e8:	fe 01       	movw	r30, r28
    32ea:	e7 5e       	subi	r30, 0xE7	; 231
    32ec:	fe 4f       	sbci	r31, 0xFE	; 254
    32ee:	80 81       	ld	r24, Z
    32f0:	91 81       	ldd	r25, Z+1	; 0x01
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	f1 f7       	brne	.-4      	; 0x32f2 <LED_voidFLASH+0xea8>
    32f6:	fe 01       	movw	r30, r28
    32f8:	e7 5e       	subi	r30, 0xE7	; 231
    32fa:	fe 4f       	sbci	r31, 0xFE	; 254
    32fc:	91 83       	std	Z+1, r25	; 0x01
    32fe:	80 83       	st	Z, r24
    3300:	0c 94 8a 26 	jmp	0x4d14	; 0x4d14 <LED_voidFLASH+0x28ca>
			_delay_ms(200);
			break;
		case LED1:
			LED_voidLedOn(LED1);
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    330a:	fe 01       	movw	r30, r28
    330c:	eb 5e       	subi	r30, 0xEB	; 235
    330e:	fe 4f       	sbci	r31, 0xFE	; 254
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	aa ef       	ldi	r26, 0xFA	; 250
    3316:	b3 e4       	ldi	r27, 0x43	; 67
    3318:	80 83       	st	Z, r24
    331a:	91 83       	std	Z+1, r25	; 0x01
    331c:	a2 83       	std	Z+2, r26	; 0x02
    331e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3320:	8e 01       	movw	r16, r28
    3322:	0f 5e       	subi	r16, 0xEF	; 239
    3324:	1e 4f       	sbci	r17, 0xFE	; 254
    3326:	fe 01       	movw	r30, r28
    3328:	eb 5e       	subi	r30, 0xEB	; 235
    332a:	fe 4f       	sbci	r31, 0xFE	; 254
    332c:	60 81       	ld	r22, Z
    332e:	71 81       	ldd	r23, Z+1	; 0x01
    3330:	82 81       	ldd	r24, Z+2	; 0x02
    3332:	93 81       	ldd	r25, Z+3	; 0x03
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	4a e7       	ldi	r20, 0x7A	; 122
    333a:	55 e4       	ldi	r21, 0x45	; 69
    333c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	f8 01       	movw	r30, r16
    3346:	80 83       	st	Z, r24
    3348:	91 83       	std	Z+1, r25	; 0x01
    334a:	a2 83       	std	Z+2, r26	; 0x02
    334c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    334e:	fe 01       	movw	r30, r28
    3350:	ef 5e       	subi	r30, 0xEF	; 239
    3352:	fe 4f       	sbci	r31, 0xFE	; 254
    3354:	60 81       	ld	r22, Z
    3356:	71 81       	ldd	r23, Z+1	; 0x01
    3358:	82 81       	ldd	r24, Z+2	; 0x02
    335a:	93 81       	ldd	r25, Z+3	; 0x03
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e8       	ldi	r20, 0x80	; 128
    3362:	5f e3       	ldi	r21, 0x3F	; 63
    3364:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3368:	88 23       	and	r24, r24
    336a:	44 f4       	brge	.+16     	; 0x337c <LED_voidFLASH+0xf32>
		__ticks = 1;
    336c:	fe 01       	movw	r30, r28
    336e:	e1 5f       	subi	r30, 0xF1	; 241
    3370:	fe 4f       	sbci	r31, 0xFE	; 254
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	91 83       	std	Z+1, r25	; 0x01
    3378:	80 83       	st	Z, r24
    337a:	64 c0       	rjmp	.+200    	; 0x3444 <LED_voidFLASH+0xffa>
	else if (__tmp > 65535)
    337c:	fe 01       	movw	r30, r28
    337e:	ef 5e       	subi	r30, 0xEF	; 239
    3380:	fe 4f       	sbci	r31, 0xFE	; 254
    3382:	60 81       	ld	r22, Z
    3384:	71 81       	ldd	r23, Z+1	; 0x01
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	3f ef       	ldi	r19, 0xFF	; 255
    338e:	4f e7       	ldi	r20, 0x7F	; 127
    3390:	57 e4       	ldi	r21, 0x47	; 71
    3392:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3396:	18 16       	cp	r1, r24
    3398:	0c f0       	brlt	.+2      	; 0x339c <LED_voidFLASH+0xf52>
    339a:	43 c0       	rjmp	.+134    	; 0x3422 <LED_voidFLASH+0xfd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339c:	fe 01       	movw	r30, r28
    339e:	eb 5e       	subi	r30, 0xEB	; 235
    33a0:	fe 4f       	sbci	r31, 0xFE	; 254
    33a2:	60 81       	ld	r22, Z
    33a4:	71 81       	ldd	r23, Z+1	; 0x01
    33a6:	82 81       	ldd	r24, Z+2	; 0x02
    33a8:	93 81       	ldd	r25, Z+3	; 0x03
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e2       	ldi	r20, 0x20	; 32
    33b0:	51 e4       	ldi	r21, 0x41	; 65
    33b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	8e 01       	movw	r16, r28
    33bc:	01 5f       	subi	r16, 0xF1	; 241
    33be:	1e 4f       	sbci	r17, 0xFE	; 254
    33c0:	bc 01       	movw	r22, r24
    33c2:	cd 01       	movw	r24, r26
    33c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	f8 01       	movw	r30, r16
    33ce:	91 83       	std	Z+1, r25	; 0x01
    33d0:	80 83       	st	Z, r24
    33d2:	1f c0       	rjmp	.+62     	; 0x3412 <LED_voidFLASH+0xfc8>
    33d4:	fe 01       	movw	r30, r28
    33d6:	e3 5f       	subi	r30, 0xF3	; 243
    33d8:	fe 4f       	sbci	r31, 0xFE	; 254
    33da:	80 e9       	ldi	r24, 0x90	; 144
    33dc:	91 e0       	ldi	r25, 0x01	; 1
    33de:	91 83       	std	Z+1, r25	; 0x01
    33e0:	80 83       	st	Z, r24
    33e2:	fe 01       	movw	r30, r28
    33e4:	e3 5f       	subi	r30, 0xF3	; 243
    33e6:	fe 4f       	sbci	r31, 0xFE	; 254
    33e8:	80 81       	ld	r24, Z
    33ea:	91 81       	ldd	r25, Z+1	; 0x01
    33ec:	01 97       	sbiw	r24, 0x01	; 1
    33ee:	f1 f7       	brne	.-4      	; 0x33ec <LED_voidFLASH+0xfa2>
    33f0:	fe 01       	movw	r30, r28
    33f2:	e3 5f       	subi	r30, 0xF3	; 243
    33f4:	fe 4f       	sbci	r31, 0xFE	; 254
    33f6:	91 83       	std	Z+1, r25	; 0x01
    33f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fa:	de 01       	movw	r26, r28
    33fc:	a1 5f       	subi	r26, 0xF1	; 241
    33fe:	be 4f       	sbci	r27, 0xFE	; 254
    3400:	fe 01       	movw	r30, r28
    3402:	e1 5f       	subi	r30, 0xF1	; 241
    3404:	fe 4f       	sbci	r31, 0xFE	; 254
    3406:	80 81       	ld	r24, Z
    3408:	91 81       	ldd	r25, Z+1	; 0x01
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	11 96       	adiw	r26, 0x01	; 1
    340e:	9c 93       	st	X, r25
    3410:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3412:	fe 01       	movw	r30, r28
    3414:	e1 5f       	subi	r30, 0xF1	; 241
    3416:	fe 4f       	sbci	r31, 0xFE	; 254
    3418:	80 81       	ld	r24, Z
    341a:	91 81       	ldd	r25, Z+1	; 0x01
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	d1 f6       	brne	.-76     	; 0x33d4 <LED_voidFLASH+0xf8a>
    3420:	27 c0       	rjmp	.+78     	; 0x3470 <LED_voidFLASH+0x1026>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3422:	8e 01       	movw	r16, r28
    3424:	01 5f       	subi	r16, 0xF1	; 241
    3426:	1e 4f       	sbci	r17, 0xFE	; 254
    3428:	fe 01       	movw	r30, r28
    342a:	ef 5e       	subi	r30, 0xEF	; 239
    342c:	fe 4f       	sbci	r31, 0xFE	; 254
    342e:	60 81       	ld	r22, Z
    3430:	71 81       	ldd	r23, Z+1	; 0x01
    3432:	82 81       	ldd	r24, Z+2	; 0x02
    3434:	93 81       	ldd	r25, Z+3	; 0x03
    3436:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	f8 01       	movw	r30, r16
    3440:	91 83       	std	Z+1, r25	; 0x01
    3442:	80 83       	st	Z, r24
    3444:	de 01       	movw	r26, r28
    3446:	a5 5f       	subi	r26, 0xF5	; 245
    3448:	be 4f       	sbci	r27, 0xFE	; 254
    344a:	fe 01       	movw	r30, r28
    344c:	e1 5f       	subi	r30, 0xF1	; 241
    344e:	fe 4f       	sbci	r31, 0xFE	; 254
    3450:	80 81       	ld	r24, Z
    3452:	91 81       	ldd	r25, Z+1	; 0x01
    3454:	8d 93       	st	X+, r24
    3456:	9c 93       	st	X, r25
    3458:	fe 01       	movw	r30, r28
    345a:	e5 5f       	subi	r30, 0xF5	; 245
    345c:	fe 4f       	sbci	r31, 0xFE	; 254
    345e:	80 81       	ld	r24, Z
    3460:	91 81       	ldd	r25, Z+1	; 0x01
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <LED_voidFLASH+0x1018>
    3466:	fe 01       	movw	r30, r28
    3468:	e5 5f       	subi	r30, 0xF5	; 245
    346a:	fe 4f       	sbci	r31, 0xFE	; 254
    346c:	91 83       	std	Z+1, r25	; 0x01
    346e:	80 83       	st	Z, r24
			_delay_ms(500);
			LED_voidLedOff(LED1);
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    3476:	fe 01       	movw	r30, r28
    3478:	e9 5f       	subi	r30, 0xF9	; 249
    347a:	fe 4f       	sbci	r31, 0xFE	; 254
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	aa ef       	ldi	r26, 0xFA	; 250
    3482:	b3 e4       	ldi	r27, 0x43	; 67
    3484:	80 83       	st	Z, r24
    3486:	91 83       	std	Z+1, r25	; 0x01
    3488:	a2 83       	std	Z+2, r26	; 0x02
    348a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    348c:	8e 01       	movw	r16, r28
    348e:	0d 5f       	subi	r16, 0xFD	; 253
    3490:	1e 4f       	sbci	r17, 0xFE	; 254
    3492:	fe 01       	movw	r30, r28
    3494:	e9 5f       	subi	r30, 0xF9	; 249
    3496:	fe 4f       	sbci	r31, 0xFE	; 254
    3498:	60 81       	ld	r22, Z
    349a:	71 81       	ldd	r23, Z+1	; 0x01
    349c:	82 81       	ldd	r24, Z+2	; 0x02
    349e:	93 81       	ldd	r25, Z+3	; 0x03
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	4a e7       	ldi	r20, 0x7A	; 122
    34a6:	55 e4       	ldi	r21, 0x45	; 69
    34a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	f8 01       	movw	r30, r16
    34b2:	80 83       	st	Z, r24
    34b4:	91 83       	std	Z+1, r25	; 0x01
    34b6:	a2 83       	std	Z+2, r26	; 0x02
    34b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34ba:	fe 01       	movw	r30, r28
    34bc:	ed 5f       	subi	r30, 0xFD	; 253
    34be:	fe 4f       	sbci	r31, 0xFE	; 254
    34c0:	60 81       	ld	r22, Z
    34c2:	71 81       	ldd	r23, Z+1	; 0x01
    34c4:	82 81       	ldd	r24, Z+2	; 0x02
    34c6:	93 81       	ldd	r25, Z+3	; 0x03
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	40 e8       	ldi	r20, 0x80	; 128
    34ce:	5f e3       	ldi	r21, 0x3F	; 63
    34d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    34d4:	88 23       	and	r24, r24
    34d6:	44 f4       	brge	.+16     	; 0x34e8 <LED_voidFLASH+0x109e>
		__ticks = 1;
    34d8:	fe 01       	movw	r30, r28
    34da:	ef 5f       	subi	r30, 0xFF	; 255
    34dc:	fe 4f       	sbci	r31, 0xFE	; 254
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	91 83       	std	Z+1, r25	; 0x01
    34e4:	80 83       	st	Z, r24
    34e6:	64 c0       	rjmp	.+200    	; 0x35b0 <LED_voidFLASH+0x1166>
	else if (__tmp > 65535)
    34e8:	fe 01       	movw	r30, r28
    34ea:	ed 5f       	subi	r30, 0xFD	; 253
    34ec:	fe 4f       	sbci	r31, 0xFE	; 254
    34ee:	60 81       	ld	r22, Z
    34f0:	71 81       	ldd	r23, Z+1	; 0x01
    34f2:	82 81       	ldd	r24, Z+2	; 0x02
    34f4:	93 81       	ldd	r25, Z+3	; 0x03
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	3f ef       	ldi	r19, 0xFF	; 255
    34fa:	4f e7       	ldi	r20, 0x7F	; 127
    34fc:	57 e4       	ldi	r21, 0x47	; 71
    34fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3502:	18 16       	cp	r1, r24
    3504:	0c f0       	brlt	.+2      	; 0x3508 <LED_voidFLASH+0x10be>
    3506:	43 c0       	rjmp	.+134    	; 0x358e <LED_voidFLASH+0x1144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3508:	fe 01       	movw	r30, r28
    350a:	e9 5f       	subi	r30, 0xF9	; 249
    350c:	fe 4f       	sbci	r31, 0xFE	; 254
    350e:	60 81       	ld	r22, Z
    3510:	71 81       	ldd	r23, Z+1	; 0x01
    3512:	82 81       	ldd	r24, Z+2	; 0x02
    3514:	93 81       	ldd	r25, Z+3	; 0x03
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	40 e2       	ldi	r20, 0x20	; 32
    351c:	51 e4       	ldi	r21, 0x41	; 65
    351e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	8e 01       	movw	r16, r28
    3528:	0f 5f       	subi	r16, 0xFF	; 255
    352a:	1e 4f       	sbci	r17, 0xFE	; 254
    352c:	bc 01       	movw	r22, r24
    352e:	cd 01       	movw	r24, r26
    3530:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	f8 01       	movw	r30, r16
    353a:	91 83       	std	Z+1, r25	; 0x01
    353c:	80 83       	st	Z, r24
    353e:	1f c0       	rjmp	.+62     	; 0x357e <LED_voidFLASH+0x1134>
    3540:	fe 01       	movw	r30, r28
    3542:	e1 50       	subi	r30, 0x01	; 1
    3544:	ff 4f       	sbci	r31, 0xFF	; 255
    3546:	80 e9       	ldi	r24, 0x90	; 144
    3548:	91 e0       	ldi	r25, 0x01	; 1
    354a:	91 83       	std	Z+1, r25	; 0x01
    354c:	80 83       	st	Z, r24
    354e:	fe 01       	movw	r30, r28
    3550:	e1 50       	subi	r30, 0x01	; 1
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	80 81       	ld	r24, Z
    3556:	91 81       	ldd	r25, Z+1	; 0x01
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	f1 f7       	brne	.-4      	; 0x3558 <LED_voidFLASH+0x110e>
    355c:	fe 01       	movw	r30, r28
    355e:	e1 50       	subi	r30, 0x01	; 1
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3566:	de 01       	movw	r26, r28
    3568:	af 5f       	subi	r26, 0xFF	; 255
    356a:	be 4f       	sbci	r27, 0xFE	; 254
    356c:	fe 01       	movw	r30, r28
    356e:	ef 5f       	subi	r30, 0xFF	; 255
    3570:	fe 4f       	sbci	r31, 0xFE	; 254
    3572:	80 81       	ld	r24, Z
    3574:	91 81       	ldd	r25, Z+1	; 0x01
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	11 96       	adiw	r26, 0x01	; 1
    357a:	9c 93       	st	X, r25
    357c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357e:	fe 01       	movw	r30, r28
    3580:	ef 5f       	subi	r30, 0xFF	; 255
    3582:	fe 4f       	sbci	r31, 0xFE	; 254
    3584:	80 81       	ld	r24, Z
    3586:	91 81       	ldd	r25, Z+1	; 0x01
    3588:	00 97       	sbiw	r24, 0x00	; 0
    358a:	d1 f6       	brne	.-76     	; 0x3540 <LED_voidFLASH+0x10f6>
    358c:	27 c0       	rjmp	.+78     	; 0x35dc <LED_voidFLASH+0x1192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    358e:	8e 01       	movw	r16, r28
    3590:	0f 5f       	subi	r16, 0xFF	; 255
    3592:	1e 4f       	sbci	r17, 0xFE	; 254
    3594:	fe 01       	movw	r30, r28
    3596:	ed 5f       	subi	r30, 0xFD	; 253
    3598:	fe 4f       	sbci	r31, 0xFE	; 254
    359a:	60 81       	ld	r22, Z
    359c:	71 81       	ldd	r23, Z+1	; 0x01
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	93 81       	ldd	r25, Z+3	; 0x03
    35a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	f8 01       	movw	r30, r16
    35ac:	91 83       	std	Z+1, r25	; 0x01
    35ae:	80 83       	st	Z, r24
    35b0:	de 01       	movw	r26, r28
    35b2:	a3 50       	subi	r26, 0x03	; 3
    35b4:	bf 4f       	sbci	r27, 0xFF	; 255
    35b6:	fe 01       	movw	r30, r28
    35b8:	ef 5f       	subi	r30, 0xFF	; 255
    35ba:	fe 4f       	sbci	r31, 0xFE	; 254
    35bc:	80 81       	ld	r24, Z
    35be:	91 81       	ldd	r25, Z+1	; 0x01
    35c0:	8d 93       	st	X+, r24
    35c2:	9c 93       	st	X, r25
    35c4:	fe 01       	movw	r30, r28
    35c6:	e3 50       	subi	r30, 0x03	; 3
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	80 81       	ld	r24, Z
    35cc:	91 81       	ldd	r25, Z+1	; 0x01
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <LED_voidFLASH+0x1184>
    35d2:	fe 01       	movw	r30, r28
    35d4:	e3 50       	subi	r30, 0x03	; 3
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	91 83       	std	Z+1, r25	; 0x01
    35da:	80 83       	st	Z, r24
			_delay_ms(500);
			LED_voidLedOn(LED1);
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    35e2:	fe 01       	movw	r30, r28
    35e4:	e7 50       	subi	r30, 0x07	; 7
    35e6:	ff 4f       	sbci	r31, 0xFF	; 255
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	a8 ec       	ldi	r26, 0xC8	; 200
    35ee:	b2 e4       	ldi	r27, 0x42	; 66
    35f0:	80 83       	st	Z, r24
    35f2:	91 83       	std	Z+1, r25	; 0x01
    35f4:	a2 83       	std	Z+2, r26	; 0x02
    35f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f8:	8e 01       	movw	r16, r28
    35fa:	0b 50       	subi	r16, 0x0B	; 11
    35fc:	1f 4f       	sbci	r17, 0xFF	; 255
    35fe:	fe 01       	movw	r30, r28
    3600:	e7 50       	subi	r30, 0x07	; 7
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	60 81       	ld	r22, Z
    3606:	71 81       	ldd	r23, Z+1	; 0x01
    3608:	82 81       	ldd	r24, Z+2	; 0x02
    360a:	93 81       	ldd	r25, Z+3	; 0x03
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	4a e7       	ldi	r20, 0x7A	; 122
    3612:	55 e4       	ldi	r21, 0x45	; 69
    3614:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	f8 01       	movw	r30, r16
    361e:	80 83       	st	Z, r24
    3620:	91 83       	std	Z+1, r25	; 0x01
    3622:	a2 83       	std	Z+2, r26	; 0x02
    3624:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3626:	fe 01       	movw	r30, r28
    3628:	eb 50       	subi	r30, 0x0B	; 11
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	60 81       	ld	r22, Z
    362e:	71 81       	ldd	r23, Z+1	; 0x01
    3630:	82 81       	ldd	r24, Z+2	; 0x02
    3632:	93 81       	ldd	r25, Z+3	; 0x03
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	40 e8       	ldi	r20, 0x80	; 128
    363a:	5f e3       	ldi	r21, 0x3F	; 63
    363c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3640:	88 23       	and	r24, r24
    3642:	44 f4       	brge	.+16     	; 0x3654 <LED_voidFLASH+0x120a>
		__ticks = 1;
    3644:	fe 01       	movw	r30, r28
    3646:	ed 50       	subi	r30, 0x0D	; 13
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	91 83       	std	Z+1, r25	; 0x01
    3650:	80 83       	st	Z, r24
    3652:	64 c0       	rjmp	.+200    	; 0x371c <LED_voidFLASH+0x12d2>
	else if (__tmp > 65535)
    3654:	fe 01       	movw	r30, r28
    3656:	eb 50       	subi	r30, 0x0B	; 11
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	60 81       	ld	r22, Z
    365c:	71 81       	ldd	r23, Z+1	; 0x01
    365e:	82 81       	ldd	r24, Z+2	; 0x02
    3660:	93 81       	ldd	r25, Z+3	; 0x03
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	3f ef       	ldi	r19, 0xFF	; 255
    3666:	4f e7       	ldi	r20, 0x7F	; 127
    3668:	57 e4       	ldi	r21, 0x47	; 71
    366a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    366e:	18 16       	cp	r1, r24
    3670:	0c f0       	brlt	.+2      	; 0x3674 <LED_voidFLASH+0x122a>
    3672:	43 c0       	rjmp	.+134    	; 0x36fa <LED_voidFLASH+0x12b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3674:	fe 01       	movw	r30, r28
    3676:	e7 50       	subi	r30, 0x07	; 7
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	60 81       	ld	r22, Z
    367c:	71 81       	ldd	r23, Z+1	; 0x01
    367e:	82 81       	ldd	r24, Z+2	; 0x02
    3680:	93 81       	ldd	r25, Z+3	; 0x03
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	40 e2       	ldi	r20, 0x20	; 32
    3688:	51 e4       	ldi	r21, 0x41	; 65
    368a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	8e 01       	movw	r16, r28
    3694:	0d 50       	subi	r16, 0x0D	; 13
    3696:	1f 4f       	sbci	r17, 0xFF	; 255
    3698:	bc 01       	movw	r22, r24
    369a:	cd 01       	movw	r24, r26
    369c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36a0:	dc 01       	movw	r26, r24
    36a2:	cb 01       	movw	r24, r22
    36a4:	f8 01       	movw	r30, r16
    36a6:	91 83       	std	Z+1, r25	; 0x01
    36a8:	80 83       	st	Z, r24
    36aa:	1f c0       	rjmp	.+62     	; 0x36ea <LED_voidFLASH+0x12a0>
    36ac:	fe 01       	movw	r30, r28
    36ae:	ef 50       	subi	r30, 0x0F	; 15
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	80 e9       	ldi	r24, 0x90	; 144
    36b4:	91 e0       	ldi	r25, 0x01	; 1
    36b6:	91 83       	std	Z+1, r25	; 0x01
    36b8:	80 83       	st	Z, r24
    36ba:	fe 01       	movw	r30, r28
    36bc:	ef 50       	subi	r30, 0x0F	; 15
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	80 81       	ld	r24, Z
    36c2:	91 81       	ldd	r25, Z+1	; 0x01
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	f1 f7       	brne	.-4      	; 0x36c4 <LED_voidFLASH+0x127a>
    36c8:	fe 01       	movw	r30, r28
    36ca:	ef 50       	subi	r30, 0x0F	; 15
    36cc:	ff 4f       	sbci	r31, 0xFF	; 255
    36ce:	91 83       	std	Z+1, r25	; 0x01
    36d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d2:	de 01       	movw	r26, r28
    36d4:	ad 50       	subi	r26, 0x0D	; 13
    36d6:	bf 4f       	sbci	r27, 0xFF	; 255
    36d8:	fe 01       	movw	r30, r28
    36da:	ed 50       	subi	r30, 0x0D	; 13
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	80 81       	ld	r24, Z
    36e0:	91 81       	ldd	r25, Z+1	; 0x01
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	11 96       	adiw	r26, 0x01	; 1
    36e6:	9c 93       	st	X, r25
    36e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ea:	fe 01       	movw	r30, r28
    36ec:	ed 50       	subi	r30, 0x0D	; 13
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	80 81       	ld	r24, Z
    36f2:	91 81       	ldd	r25, Z+1	; 0x01
    36f4:	00 97       	sbiw	r24, 0x00	; 0
    36f6:	d1 f6       	brne	.-76     	; 0x36ac <LED_voidFLASH+0x1262>
    36f8:	27 c0       	rjmp	.+78     	; 0x3748 <LED_voidFLASH+0x12fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36fa:	8e 01       	movw	r16, r28
    36fc:	0d 50       	subi	r16, 0x0D	; 13
    36fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3700:	fe 01       	movw	r30, r28
    3702:	eb 50       	subi	r30, 0x0B	; 11
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	60 81       	ld	r22, Z
    3708:	71 81       	ldd	r23, Z+1	; 0x01
    370a:	82 81       	ldd	r24, Z+2	; 0x02
    370c:	93 81       	ldd	r25, Z+3	; 0x03
    370e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	f8 01       	movw	r30, r16
    3718:	91 83       	std	Z+1, r25	; 0x01
    371a:	80 83       	st	Z, r24
    371c:	de 01       	movw	r26, r28
    371e:	a1 51       	subi	r26, 0x11	; 17
    3720:	bf 4f       	sbci	r27, 0xFF	; 255
    3722:	fe 01       	movw	r30, r28
    3724:	ed 50       	subi	r30, 0x0D	; 13
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	80 81       	ld	r24, Z
    372a:	91 81       	ldd	r25, Z+1	; 0x01
    372c:	8d 93       	st	X+, r24
    372e:	9c 93       	st	X, r25
    3730:	fe 01       	movw	r30, r28
    3732:	e1 51       	subi	r30, 0x11	; 17
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	80 81       	ld	r24, Z
    3738:	91 81       	ldd	r25, Z+1	; 0x01
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	f1 f7       	brne	.-4      	; 0x373a <LED_voidFLASH+0x12f0>
    373e:	fe 01       	movw	r30, r28
    3740:	e1 51       	subi	r30, 0x11	; 17
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	91 83       	std	Z+1, r25	; 0x01
    3746:	80 83       	st	Z, r24
			_delay_ms(100);
			LED_voidLedOff(LED1);
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    374e:	fe 01       	movw	r30, r28
    3750:	e5 51       	subi	r30, 0x15	; 21
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	a8 ec       	ldi	r26, 0xC8	; 200
    375a:	b2 e4       	ldi	r27, 0x42	; 66
    375c:	80 83       	st	Z, r24
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	a2 83       	std	Z+2, r26	; 0x02
    3762:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3764:	8e 01       	movw	r16, r28
    3766:	09 51       	subi	r16, 0x19	; 25
    3768:	1f 4f       	sbci	r17, 0xFF	; 255
    376a:	fe 01       	movw	r30, r28
    376c:	e5 51       	subi	r30, 0x15	; 21
    376e:	ff 4f       	sbci	r31, 0xFF	; 255
    3770:	60 81       	ld	r22, Z
    3772:	71 81       	ldd	r23, Z+1	; 0x01
    3774:	82 81       	ldd	r24, Z+2	; 0x02
    3776:	93 81       	ldd	r25, Z+3	; 0x03
    3778:	20 e0       	ldi	r18, 0x00	; 0
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	4a e7       	ldi	r20, 0x7A	; 122
    377e:	55 e4       	ldi	r21, 0x45	; 69
    3780:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	f8 01       	movw	r30, r16
    378a:	80 83       	st	Z, r24
    378c:	91 83       	std	Z+1, r25	; 0x01
    378e:	a2 83       	std	Z+2, r26	; 0x02
    3790:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3792:	fe 01       	movw	r30, r28
    3794:	e9 51       	subi	r30, 0x19	; 25
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	60 81       	ld	r22, Z
    379a:	71 81       	ldd	r23, Z+1	; 0x01
    379c:	82 81       	ldd	r24, Z+2	; 0x02
    379e:	93 81       	ldd	r25, Z+3	; 0x03
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	40 e8       	ldi	r20, 0x80	; 128
    37a6:	5f e3       	ldi	r21, 0x3F	; 63
    37a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    37ac:	88 23       	and	r24, r24
    37ae:	44 f4       	brge	.+16     	; 0x37c0 <LED_voidFLASH+0x1376>
		__ticks = 1;
    37b0:	fe 01       	movw	r30, r28
    37b2:	eb 51       	subi	r30, 0x1B	; 27
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	91 83       	std	Z+1, r25	; 0x01
    37bc:	80 83       	st	Z, r24
    37be:	64 c0       	rjmp	.+200    	; 0x3888 <LED_voidFLASH+0x143e>
	else if (__tmp > 65535)
    37c0:	fe 01       	movw	r30, r28
    37c2:	e9 51       	subi	r30, 0x19	; 25
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	60 81       	ld	r22, Z
    37c8:	71 81       	ldd	r23, Z+1	; 0x01
    37ca:	82 81       	ldd	r24, Z+2	; 0x02
    37cc:	93 81       	ldd	r25, Z+3	; 0x03
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	3f ef       	ldi	r19, 0xFF	; 255
    37d2:	4f e7       	ldi	r20, 0x7F	; 127
    37d4:	57 e4       	ldi	r21, 0x47	; 71
    37d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    37da:	18 16       	cp	r1, r24
    37dc:	0c f0       	brlt	.+2      	; 0x37e0 <LED_voidFLASH+0x1396>
    37de:	43 c0       	rjmp	.+134    	; 0x3866 <LED_voidFLASH+0x141c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e0:	fe 01       	movw	r30, r28
    37e2:	e5 51       	subi	r30, 0x15	; 21
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	60 81       	ld	r22, Z
    37e8:	71 81       	ldd	r23, Z+1	; 0x01
    37ea:	82 81       	ldd	r24, Z+2	; 0x02
    37ec:	93 81       	ldd	r25, Z+3	; 0x03
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	40 e2       	ldi	r20, 0x20	; 32
    37f4:	51 e4       	ldi	r21, 0x41	; 65
    37f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37fa:	dc 01       	movw	r26, r24
    37fc:	cb 01       	movw	r24, r22
    37fe:	8e 01       	movw	r16, r28
    3800:	0b 51       	subi	r16, 0x1B	; 27
    3802:	1f 4f       	sbci	r17, 0xFF	; 255
    3804:	bc 01       	movw	r22, r24
    3806:	cd 01       	movw	r24, r26
    3808:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	f8 01       	movw	r30, r16
    3812:	91 83       	std	Z+1, r25	; 0x01
    3814:	80 83       	st	Z, r24
    3816:	1f c0       	rjmp	.+62     	; 0x3856 <LED_voidFLASH+0x140c>
    3818:	fe 01       	movw	r30, r28
    381a:	ed 51       	subi	r30, 0x1D	; 29
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	80 e9       	ldi	r24, 0x90	; 144
    3820:	91 e0       	ldi	r25, 0x01	; 1
    3822:	91 83       	std	Z+1, r25	; 0x01
    3824:	80 83       	st	Z, r24
    3826:	fe 01       	movw	r30, r28
    3828:	ed 51       	subi	r30, 0x1D	; 29
    382a:	ff 4f       	sbci	r31, 0xFF	; 255
    382c:	80 81       	ld	r24, Z
    382e:	91 81       	ldd	r25, Z+1	; 0x01
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	f1 f7       	brne	.-4      	; 0x3830 <LED_voidFLASH+0x13e6>
    3834:	fe 01       	movw	r30, r28
    3836:	ed 51       	subi	r30, 0x1D	; 29
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	91 83       	std	Z+1, r25	; 0x01
    383c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    383e:	de 01       	movw	r26, r28
    3840:	ab 51       	subi	r26, 0x1B	; 27
    3842:	bf 4f       	sbci	r27, 0xFF	; 255
    3844:	fe 01       	movw	r30, r28
    3846:	eb 51       	subi	r30, 0x1B	; 27
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	80 81       	ld	r24, Z
    384c:	91 81       	ldd	r25, Z+1	; 0x01
    384e:	01 97       	sbiw	r24, 0x01	; 1
    3850:	11 96       	adiw	r26, 0x01	; 1
    3852:	9c 93       	st	X, r25
    3854:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3856:	fe 01       	movw	r30, r28
    3858:	eb 51       	subi	r30, 0x1B	; 27
    385a:	ff 4f       	sbci	r31, 0xFF	; 255
    385c:	80 81       	ld	r24, Z
    385e:	91 81       	ldd	r25, Z+1	; 0x01
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	d1 f6       	brne	.-76     	; 0x3818 <LED_voidFLASH+0x13ce>
    3864:	27 c0       	rjmp	.+78     	; 0x38b4 <LED_voidFLASH+0x146a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3866:	8e 01       	movw	r16, r28
    3868:	0b 51       	subi	r16, 0x1B	; 27
    386a:	1f 4f       	sbci	r17, 0xFF	; 255
    386c:	fe 01       	movw	r30, r28
    386e:	e9 51       	subi	r30, 0x19	; 25
    3870:	ff 4f       	sbci	r31, 0xFF	; 255
    3872:	60 81       	ld	r22, Z
    3874:	71 81       	ldd	r23, Z+1	; 0x01
    3876:	82 81       	ldd	r24, Z+2	; 0x02
    3878:	93 81       	ldd	r25, Z+3	; 0x03
    387a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	f8 01       	movw	r30, r16
    3884:	91 83       	std	Z+1, r25	; 0x01
    3886:	80 83       	st	Z, r24
    3888:	de 01       	movw	r26, r28
    388a:	af 51       	subi	r26, 0x1F	; 31
    388c:	bf 4f       	sbci	r27, 0xFF	; 255
    388e:	fe 01       	movw	r30, r28
    3890:	eb 51       	subi	r30, 0x1B	; 27
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	80 81       	ld	r24, Z
    3896:	91 81       	ldd	r25, Z+1	; 0x01
    3898:	8d 93       	st	X+, r24
    389a:	9c 93       	st	X, r25
    389c:	fe 01       	movw	r30, r28
    389e:	ef 51       	subi	r30, 0x1F	; 31
    38a0:	ff 4f       	sbci	r31, 0xFF	; 255
    38a2:	80 81       	ld	r24, Z
    38a4:	91 81       	ldd	r25, Z+1	; 0x01
    38a6:	01 97       	sbiw	r24, 0x01	; 1
    38a8:	f1 f7       	brne	.-4      	; 0x38a6 <LED_voidFLASH+0x145c>
    38aa:	fe 01       	movw	r30, r28
    38ac:	ef 51       	subi	r30, 0x1F	; 31
    38ae:	ff 4f       	sbci	r31, 0xFF	; 255
    38b0:	91 83       	std	Z+1, r25	; 0x01
    38b2:	80 83       	st	Z, r24
			_delay_ms(100);
			LED_voidLedOn(LED1);
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    38ba:	fe 01       	movw	r30, r28
    38bc:	e3 52       	subi	r30, 0x23	; 35
    38be:	ff 4f       	sbci	r31, 0xFF	; 255
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	aa ef       	ldi	r26, 0xFA	; 250
    38c6:	b3 e4       	ldi	r27, 0x43	; 67
    38c8:	80 83       	st	Z, r24
    38ca:	91 83       	std	Z+1, r25	; 0x01
    38cc:	a2 83       	std	Z+2, r26	; 0x02
    38ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d0:	8e 01       	movw	r16, r28
    38d2:	07 52       	subi	r16, 0x27	; 39
    38d4:	1f 4f       	sbci	r17, 0xFF	; 255
    38d6:	fe 01       	movw	r30, r28
    38d8:	e3 52       	subi	r30, 0x23	; 35
    38da:	ff 4f       	sbci	r31, 0xFF	; 255
    38dc:	60 81       	ld	r22, Z
    38de:	71 81       	ldd	r23, Z+1	; 0x01
    38e0:	82 81       	ldd	r24, Z+2	; 0x02
    38e2:	93 81       	ldd	r25, Z+3	; 0x03
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	4a e7       	ldi	r20, 0x7A	; 122
    38ea:	55 e4       	ldi	r21, 0x45	; 69
    38ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	f8 01       	movw	r30, r16
    38f6:	80 83       	st	Z, r24
    38f8:	91 83       	std	Z+1, r25	; 0x01
    38fa:	a2 83       	std	Z+2, r26	; 0x02
    38fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38fe:	fe 01       	movw	r30, r28
    3900:	e7 52       	subi	r30, 0x27	; 39
    3902:	ff 4f       	sbci	r31, 0xFF	; 255
    3904:	60 81       	ld	r22, Z
    3906:	71 81       	ldd	r23, Z+1	; 0x01
    3908:	82 81       	ldd	r24, Z+2	; 0x02
    390a:	93 81       	ldd	r25, Z+3	; 0x03
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	40 e8       	ldi	r20, 0x80	; 128
    3912:	5f e3       	ldi	r21, 0x3F	; 63
    3914:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3918:	88 23       	and	r24, r24
    391a:	44 f4       	brge	.+16     	; 0x392c <LED_voidFLASH+0x14e2>
		__ticks = 1;
    391c:	fe 01       	movw	r30, r28
    391e:	e9 52       	subi	r30, 0x29	; 41
    3920:	ff 4f       	sbci	r31, 0xFF	; 255
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	91 83       	std	Z+1, r25	; 0x01
    3928:	80 83       	st	Z, r24
    392a:	64 c0       	rjmp	.+200    	; 0x39f4 <LED_voidFLASH+0x15aa>
	else if (__tmp > 65535)
    392c:	fe 01       	movw	r30, r28
    392e:	e7 52       	subi	r30, 0x27	; 39
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	60 81       	ld	r22, Z
    3934:	71 81       	ldd	r23, Z+1	; 0x01
    3936:	82 81       	ldd	r24, Z+2	; 0x02
    3938:	93 81       	ldd	r25, Z+3	; 0x03
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	3f ef       	ldi	r19, 0xFF	; 255
    393e:	4f e7       	ldi	r20, 0x7F	; 127
    3940:	57 e4       	ldi	r21, 0x47	; 71
    3942:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3946:	18 16       	cp	r1, r24
    3948:	0c f0       	brlt	.+2      	; 0x394c <LED_voidFLASH+0x1502>
    394a:	43 c0       	rjmp	.+134    	; 0x39d2 <LED_voidFLASH+0x1588>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    394c:	fe 01       	movw	r30, r28
    394e:	e3 52       	subi	r30, 0x23	; 35
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	60 81       	ld	r22, Z
    3954:	71 81       	ldd	r23, Z+1	; 0x01
    3956:	82 81       	ldd	r24, Z+2	; 0x02
    3958:	93 81       	ldd	r25, Z+3	; 0x03
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	40 e2       	ldi	r20, 0x20	; 32
    3960:	51 e4       	ldi	r21, 0x41	; 65
    3962:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3966:	dc 01       	movw	r26, r24
    3968:	cb 01       	movw	r24, r22
    396a:	8e 01       	movw	r16, r28
    396c:	09 52       	subi	r16, 0x29	; 41
    396e:	1f 4f       	sbci	r17, 0xFF	; 255
    3970:	bc 01       	movw	r22, r24
    3972:	cd 01       	movw	r24, r26
    3974:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	f8 01       	movw	r30, r16
    397e:	91 83       	std	Z+1, r25	; 0x01
    3980:	80 83       	st	Z, r24
    3982:	1f c0       	rjmp	.+62     	; 0x39c2 <LED_voidFLASH+0x1578>
    3984:	fe 01       	movw	r30, r28
    3986:	eb 52       	subi	r30, 0x2B	; 43
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	80 e9       	ldi	r24, 0x90	; 144
    398c:	91 e0       	ldi	r25, 0x01	; 1
    398e:	91 83       	std	Z+1, r25	; 0x01
    3990:	80 83       	st	Z, r24
    3992:	fe 01       	movw	r30, r28
    3994:	eb 52       	subi	r30, 0x2B	; 43
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	80 81       	ld	r24, Z
    399a:	91 81       	ldd	r25, Z+1	; 0x01
    399c:	01 97       	sbiw	r24, 0x01	; 1
    399e:	f1 f7       	brne	.-4      	; 0x399c <LED_voidFLASH+0x1552>
    39a0:	fe 01       	movw	r30, r28
    39a2:	eb 52       	subi	r30, 0x2B	; 43
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	91 83       	std	Z+1, r25	; 0x01
    39a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39aa:	de 01       	movw	r26, r28
    39ac:	a9 52       	subi	r26, 0x29	; 41
    39ae:	bf 4f       	sbci	r27, 0xFF	; 255
    39b0:	fe 01       	movw	r30, r28
    39b2:	e9 52       	subi	r30, 0x29	; 41
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	80 81       	ld	r24, Z
    39b8:	91 81       	ldd	r25, Z+1	; 0x01
    39ba:	01 97       	sbiw	r24, 0x01	; 1
    39bc:	11 96       	adiw	r26, 0x01	; 1
    39be:	9c 93       	st	X, r25
    39c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39c2:	fe 01       	movw	r30, r28
    39c4:	e9 52       	subi	r30, 0x29	; 41
    39c6:	ff 4f       	sbci	r31, 0xFF	; 255
    39c8:	80 81       	ld	r24, Z
    39ca:	91 81       	ldd	r25, Z+1	; 0x01
    39cc:	00 97       	sbiw	r24, 0x00	; 0
    39ce:	d1 f6       	brne	.-76     	; 0x3984 <LED_voidFLASH+0x153a>
    39d0:	27 c0       	rjmp	.+78     	; 0x3a20 <LED_voidFLASH+0x15d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39d2:	8e 01       	movw	r16, r28
    39d4:	09 52       	subi	r16, 0x29	; 41
    39d6:	1f 4f       	sbci	r17, 0xFF	; 255
    39d8:	fe 01       	movw	r30, r28
    39da:	e7 52       	subi	r30, 0x27	; 39
    39dc:	ff 4f       	sbci	r31, 0xFF	; 255
    39de:	60 81       	ld	r22, Z
    39e0:	71 81       	ldd	r23, Z+1	; 0x01
    39e2:	82 81       	ldd	r24, Z+2	; 0x02
    39e4:	93 81       	ldd	r25, Z+3	; 0x03
    39e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	f8 01       	movw	r30, r16
    39f0:	91 83       	std	Z+1, r25	; 0x01
    39f2:	80 83       	st	Z, r24
    39f4:	de 01       	movw	r26, r28
    39f6:	ad 52       	subi	r26, 0x2D	; 45
    39f8:	bf 4f       	sbci	r27, 0xFF	; 255
    39fa:	fe 01       	movw	r30, r28
    39fc:	e9 52       	subi	r30, 0x29	; 41
    39fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3a00:	80 81       	ld	r24, Z
    3a02:	91 81       	ldd	r25, Z+1	; 0x01
    3a04:	8d 93       	st	X+, r24
    3a06:	9c 93       	st	X, r25
    3a08:	fe 01       	movw	r30, r28
    3a0a:	ed 52       	subi	r30, 0x2D	; 45
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	80 81       	ld	r24, Z
    3a10:	91 81       	ldd	r25, Z+1	; 0x01
    3a12:	01 97       	sbiw	r24, 0x01	; 1
    3a14:	f1 f7       	brne	.-4      	; 0x3a12 <LED_voidFLASH+0x15c8>
    3a16:	fe 01       	movw	r30, r28
    3a18:	ed 52       	subi	r30, 0x2D	; 45
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	91 83       	std	Z+1, r25	; 0x01
    3a1e:	80 83       	st	Z, r24
			_delay_ms(500);
			LED_voidLedOff(LED1);
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    3a26:	fe 01       	movw	r30, r28
    3a28:	e1 53       	subi	r30, 0x31	; 49
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	aa ef       	ldi	r26, 0xFA	; 250
    3a32:	b3 e4       	ldi	r27, 0x43	; 67
    3a34:	80 83       	st	Z, r24
    3a36:	91 83       	std	Z+1, r25	; 0x01
    3a38:	a2 83       	std	Z+2, r26	; 0x02
    3a3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a3c:	8e 01       	movw	r16, r28
    3a3e:	05 53       	subi	r16, 0x35	; 53
    3a40:	1f 4f       	sbci	r17, 0xFF	; 255
    3a42:	fe 01       	movw	r30, r28
    3a44:	e1 53       	subi	r30, 0x31	; 49
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	60 81       	ld	r22, Z
    3a4a:	71 81       	ldd	r23, Z+1	; 0x01
    3a4c:	82 81       	ldd	r24, Z+2	; 0x02
    3a4e:	93 81       	ldd	r25, Z+3	; 0x03
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	4a e7       	ldi	r20, 0x7A	; 122
    3a56:	55 e4       	ldi	r21, 0x45	; 69
    3a58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	f8 01       	movw	r30, r16
    3a62:	80 83       	st	Z, r24
    3a64:	91 83       	std	Z+1, r25	; 0x01
    3a66:	a2 83       	std	Z+2, r26	; 0x02
    3a68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	e5 53       	subi	r30, 0x35	; 53
    3a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a70:	60 81       	ld	r22, Z
    3a72:	71 81       	ldd	r23, Z+1	; 0x01
    3a74:	82 81       	ldd	r24, Z+2	; 0x02
    3a76:	93 81       	ldd	r25, Z+3	; 0x03
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e8       	ldi	r20, 0x80	; 128
    3a7e:	5f e3       	ldi	r21, 0x3F	; 63
    3a80:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3a84:	88 23       	and	r24, r24
    3a86:	44 f4       	brge	.+16     	; 0x3a98 <LED_voidFLASH+0x164e>
		__ticks = 1;
    3a88:	fe 01       	movw	r30, r28
    3a8a:	e7 53       	subi	r30, 0x37	; 55
    3a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	91 83       	std	Z+1, r25	; 0x01
    3a94:	80 83       	st	Z, r24
    3a96:	64 c0       	rjmp	.+200    	; 0x3b60 <LED_voidFLASH+0x1716>
	else if (__tmp > 65535)
    3a98:	fe 01       	movw	r30, r28
    3a9a:	e5 53       	subi	r30, 0x35	; 53
    3a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9e:	60 81       	ld	r22, Z
    3aa0:	71 81       	ldd	r23, Z+1	; 0x01
    3aa2:	82 81       	ldd	r24, Z+2	; 0x02
    3aa4:	93 81       	ldd	r25, Z+3	; 0x03
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	3f ef       	ldi	r19, 0xFF	; 255
    3aaa:	4f e7       	ldi	r20, 0x7F	; 127
    3aac:	57 e4       	ldi	r21, 0x47	; 71
    3aae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3ab2:	18 16       	cp	r1, r24
    3ab4:	0c f0       	brlt	.+2      	; 0x3ab8 <LED_voidFLASH+0x166e>
    3ab6:	43 c0       	rjmp	.+134    	; 0x3b3e <LED_voidFLASH+0x16f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ab8:	fe 01       	movw	r30, r28
    3aba:	e1 53       	subi	r30, 0x31	; 49
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	60 81       	ld	r22, Z
    3ac0:	71 81       	ldd	r23, Z+1	; 0x01
    3ac2:	82 81       	ldd	r24, Z+2	; 0x02
    3ac4:	93 81       	ldd	r25, Z+3	; 0x03
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	40 e2       	ldi	r20, 0x20	; 32
    3acc:	51 e4       	ldi	r21, 0x41	; 65
    3ace:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	8e 01       	movw	r16, r28
    3ad8:	07 53       	subi	r16, 0x37	; 55
    3ada:	1f 4f       	sbci	r17, 0xFF	; 255
    3adc:	bc 01       	movw	r22, r24
    3ade:	cd 01       	movw	r24, r26
    3ae0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	f8 01       	movw	r30, r16
    3aea:	91 83       	std	Z+1, r25	; 0x01
    3aec:	80 83       	st	Z, r24
    3aee:	1f c0       	rjmp	.+62     	; 0x3b2e <LED_voidFLASH+0x16e4>
    3af0:	fe 01       	movw	r30, r28
    3af2:	e9 53       	subi	r30, 0x39	; 57
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	80 e9       	ldi	r24, 0x90	; 144
    3af8:	91 e0       	ldi	r25, 0x01	; 1
    3afa:	91 83       	std	Z+1, r25	; 0x01
    3afc:	80 83       	st	Z, r24
    3afe:	fe 01       	movw	r30, r28
    3b00:	e9 53       	subi	r30, 0x39	; 57
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	80 81       	ld	r24, Z
    3b06:	91 81       	ldd	r25, Z+1	; 0x01
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	f1 f7       	brne	.-4      	; 0x3b08 <LED_voidFLASH+0x16be>
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	e9 53       	subi	r30, 0x39	; 57
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	91 83       	std	Z+1, r25	; 0x01
    3b14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b16:	de 01       	movw	r26, r28
    3b18:	a7 53       	subi	r26, 0x37	; 55
    3b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	e7 53       	subi	r30, 0x37	; 55
    3b20:	ff 4f       	sbci	r31, 0xFF	; 255
    3b22:	80 81       	ld	r24, Z
    3b24:	91 81       	ldd	r25, Z+1	; 0x01
    3b26:	01 97       	sbiw	r24, 0x01	; 1
    3b28:	11 96       	adiw	r26, 0x01	; 1
    3b2a:	9c 93       	st	X, r25
    3b2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b2e:	fe 01       	movw	r30, r28
    3b30:	e7 53       	subi	r30, 0x37	; 55
    3b32:	ff 4f       	sbci	r31, 0xFF	; 255
    3b34:	80 81       	ld	r24, Z
    3b36:	91 81       	ldd	r25, Z+1	; 0x01
    3b38:	00 97       	sbiw	r24, 0x00	; 0
    3b3a:	d1 f6       	brne	.-76     	; 0x3af0 <LED_voidFLASH+0x16a6>
    3b3c:	27 c0       	rjmp	.+78     	; 0x3b8c <LED_voidFLASH+0x1742>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b3e:	8e 01       	movw	r16, r28
    3b40:	07 53       	subi	r16, 0x37	; 55
    3b42:	1f 4f       	sbci	r17, 0xFF	; 255
    3b44:	fe 01       	movw	r30, r28
    3b46:	e5 53       	subi	r30, 0x35	; 53
    3b48:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4a:	60 81       	ld	r22, Z
    3b4c:	71 81       	ldd	r23, Z+1	; 0x01
    3b4e:	82 81       	ldd	r24, Z+2	; 0x02
    3b50:	93 81       	ldd	r25, Z+3	; 0x03
    3b52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	f8 01       	movw	r30, r16
    3b5c:	91 83       	std	Z+1, r25	; 0x01
    3b5e:	80 83       	st	Z, r24
    3b60:	de 01       	movw	r26, r28
    3b62:	ab 53       	subi	r26, 0x3B	; 59
    3b64:	bf 4f       	sbci	r27, 0xFF	; 255
    3b66:	fe 01       	movw	r30, r28
    3b68:	e7 53       	subi	r30, 0x37	; 55
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	80 81       	ld	r24, Z
    3b6e:	91 81       	ldd	r25, Z+1	; 0x01
    3b70:	8d 93       	st	X+, r24
    3b72:	9c 93       	st	X, r25
    3b74:	fe 01       	movw	r30, r28
    3b76:	eb 53       	subi	r30, 0x3B	; 59
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	80 81       	ld	r24, Z
    3b7c:	91 81       	ldd	r25, Z+1	; 0x01
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	f1 f7       	brne	.-4      	; 0x3b7e <LED_voidFLASH+0x1734>
    3b82:	fe 01       	movw	r30, r28
    3b84:	eb 53       	subi	r30, 0x3B	; 59
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	91 83       	std	Z+1, r25	; 0x01
    3b8a:	80 83       	st	Z, r24
			_delay_ms(500);
			LED_voidLedOn(LED1);
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    3b92:	fe 01       	movw	r30, r28
    3b94:	ef 53       	subi	r30, 0x3F	; 63
    3b96:	ff 4f       	sbci	r31, 0xFF	; 255
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	a8 ec       	ldi	r26, 0xC8	; 200
    3b9e:	b2 e4       	ldi	r27, 0x42	; 66
    3ba0:	80 83       	st	Z, r24
    3ba2:	91 83       	std	Z+1, r25	; 0x01
    3ba4:	a2 83       	std	Z+2, r26	; 0x02
    3ba6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ba8:	8e 01       	movw	r16, r28
    3baa:	03 54       	subi	r16, 0x43	; 67
    3bac:	1f 4f       	sbci	r17, 0xFF	; 255
    3bae:	fe 01       	movw	r30, r28
    3bb0:	ef 53       	subi	r30, 0x3F	; 63
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	60 81       	ld	r22, Z
    3bb6:	71 81       	ldd	r23, Z+1	; 0x01
    3bb8:	82 81       	ldd	r24, Z+2	; 0x02
    3bba:	93 81       	ldd	r25, Z+3	; 0x03
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	4a e7       	ldi	r20, 0x7A	; 122
    3bc2:	55 e4       	ldi	r21, 0x45	; 69
    3bc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	f8 01       	movw	r30, r16
    3bce:	80 83       	st	Z, r24
    3bd0:	91 83       	std	Z+1, r25	; 0x01
    3bd2:	a2 83       	std	Z+2, r26	; 0x02
    3bd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	e3 54       	subi	r30, 0x43	; 67
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	60 81       	ld	r22, Z
    3bde:	71 81       	ldd	r23, Z+1	; 0x01
    3be0:	82 81       	ldd	r24, Z+2	; 0x02
    3be2:	93 81       	ldd	r25, Z+3	; 0x03
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	40 e8       	ldi	r20, 0x80	; 128
    3bea:	5f e3       	ldi	r21, 0x3F	; 63
    3bec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3bf0:	88 23       	and	r24, r24
    3bf2:	44 f4       	brge	.+16     	; 0x3c04 <LED_voidFLASH+0x17ba>
		__ticks = 1;
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	e5 54       	subi	r30, 0x45	; 69
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	91 83       	std	Z+1, r25	; 0x01
    3c00:	80 83       	st	Z, r24
    3c02:	64 c0       	rjmp	.+200    	; 0x3ccc <LED_voidFLASH+0x1882>
	else if (__tmp > 65535)
    3c04:	fe 01       	movw	r30, r28
    3c06:	e3 54       	subi	r30, 0x43	; 67
    3c08:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0a:	60 81       	ld	r22, Z
    3c0c:	71 81       	ldd	r23, Z+1	; 0x01
    3c0e:	82 81       	ldd	r24, Z+2	; 0x02
    3c10:	93 81       	ldd	r25, Z+3	; 0x03
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	3f ef       	ldi	r19, 0xFF	; 255
    3c16:	4f e7       	ldi	r20, 0x7F	; 127
    3c18:	57 e4       	ldi	r21, 0x47	; 71
    3c1a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3c1e:	18 16       	cp	r1, r24
    3c20:	0c f0       	brlt	.+2      	; 0x3c24 <LED_voidFLASH+0x17da>
    3c22:	43 c0       	rjmp	.+134    	; 0x3caa <LED_voidFLASH+0x1860>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c24:	fe 01       	movw	r30, r28
    3c26:	ef 53       	subi	r30, 0x3F	; 63
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	60 81       	ld	r22, Z
    3c2c:	71 81       	ldd	r23, Z+1	; 0x01
    3c2e:	82 81       	ldd	r24, Z+2	; 0x02
    3c30:	93 81       	ldd	r25, Z+3	; 0x03
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	40 e2       	ldi	r20, 0x20	; 32
    3c38:	51 e4       	ldi	r21, 0x41	; 65
    3c3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	8e 01       	movw	r16, r28
    3c44:	05 54       	subi	r16, 0x45	; 69
    3c46:	1f 4f       	sbci	r17, 0xFF	; 255
    3c48:	bc 01       	movw	r22, r24
    3c4a:	cd 01       	movw	r24, r26
    3c4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	f8 01       	movw	r30, r16
    3c56:	91 83       	std	Z+1, r25	; 0x01
    3c58:	80 83       	st	Z, r24
    3c5a:	1f c0       	rjmp	.+62     	; 0x3c9a <LED_voidFLASH+0x1850>
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	e7 54       	subi	r30, 0x47	; 71
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	80 e9       	ldi	r24, 0x90	; 144
    3c64:	91 e0       	ldi	r25, 0x01	; 1
    3c66:	91 83       	std	Z+1, r25	; 0x01
    3c68:	80 83       	st	Z, r24
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	e7 54       	subi	r30, 0x47	; 71
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	80 81       	ld	r24, Z
    3c72:	91 81       	ldd	r25, Z+1	; 0x01
    3c74:	01 97       	sbiw	r24, 0x01	; 1
    3c76:	f1 f7       	brne	.-4      	; 0x3c74 <LED_voidFLASH+0x182a>
    3c78:	fe 01       	movw	r30, r28
    3c7a:	e7 54       	subi	r30, 0x47	; 71
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	91 83       	std	Z+1, r25	; 0x01
    3c80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c82:	de 01       	movw	r26, r28
    3c84:	a5 54       	subi	r26, 0x45	; 69
    3c86:	bf 4f       	sbci	r27, 0xFF	; 255
    3c88:	fe 01       	movw	r30, r28
    3c8a:	e5 54       	subi	r30, 0x45	; 69
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	80 81       	ld	r24, Z
    3c90:	91 81       	ldd	r25, Z+1	; 0x01
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	11 96       	adiw	r26, 0x01	; 1
    3c96:	9c 93       	st	X, r25
    3c98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	e5 54       	subi	r30, 0x45	; 69
    3c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca0:	80 81       	ld	r24, Z
    3ca2:	91 81       	ldd	r25, Z+1	; 0x01
    3ca4:	00 97       	sbiw	r24, 0x00	; 0
    3ca6:	d1 f6       	brne	.-76     	; 0x3c5c <LED_voidFLASH+0x1812>
    3ca8:	27 c0       	rjmp	.+78     	; 0x3cf8 <LED_voidFLASH+0x18ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3caa:	8e 01       	movw	r16, r28
    3cac:	05 54       	subi	r16, 0x45	; 69
    3cae:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb0:	fe 01       	movw	r30, r28
    3cb2:	e3 54       	subi	r30, 0x43	; 67
    3cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb6:	60 81       	ld	r22, Z
    3cb8:	71 81       	ldd	r23, Z+1	; 0x01
    3cba:	82 81       	ldd	r24, Z+2	; 0x02
    3cbc:	93 81       	ldd	r25, Z+3	; 0x03
    3cbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	f8 01       	movw	r30, r16
    3cc8:	91 83       	std	Z+1, r25	; 0x01
    3cca:	80 83       	st	Z, r24
    3ccc:	de 01       	movw	r26, r28
    3cce:	a9 54       	subi	r26, 0x49	; 73
    3cd0:	bf 4f       	sbci	r27, 0xFF	; 255
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	e5 54       	subi	r30, 0x45	; 69
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	80 81       	ld	r24, Z
    3cda:	91 81       	ldd	r25, Z+1	; 0x01
    3cdc:	8d 93       	st	X+, r24
    3cde:	9c 93       	st	X, r25
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	e9 54       	subi	r30, 0x49	; 73
    3ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce6:	80 81       	ld	r24, Z
    3ce8:	91 81       	ldd	r25, Z+1	; 0x01
    3cea:	01 97       	sbiw	r24, 0x01	; 1
    3cec:	f1 f7       	brne	.-4      	; 0x3cea <LED_voidFLASH+0x18a0>
    3cee:	fe 01       	movw	r30, r28
    3cf0:	e9 54       	subi	r30, 0x49	; 73
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	91 83       	std	Z+1, r25	; 0x01
    3cf6:	80 83       	st	Z, r24
			_delay_ms(100);
			LED_voidLedOff(LED1);
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    3cfe:	fe 01       	movw	r30, r28
    3d00:	ed 54       	subi	r30, 0x4D	; 77
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	a8 ec       	ldi	r26, 0xC8	; 200
    3d0a:	b2 e4       	ldi	r27, 0x42	; 66
    3d0c:	80 83       	st	Z, r24
    3d0e:	91 83       	std	Z+1, r25	; 0x01
    3d10:	a2 83       	std	Z+2, r26	; 0x02
    3d12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d14:	8e 01       	movw	r16, r28
    3d16:	01 55       	subi	r16, 0x51	; 81
    3d18:	1f 4f       	sbci	r17, 0xFF	; 255
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	ed 54       	subi	r30, 0x4D	; 77
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	60 81       	ld	r22, Z
    3d22:	71 81       	ldd	r23, Z+1	; 0x01
    3d24:	82 81       	ldd	r24, Z+2	; 0x02
    3d26:	93 81       	ldd	r25, Z+3	; 0x03
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	4a e7       	ldi	r20, 0x7A	; 122
    3d2e:	55 e4       	ldi	r21, 0x45	; 69
    3d30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	f8 01       	movw	r30, r16
    3d3a:	80 83       	st	Z, r24
    3d3c:	91 83       	std	Z+1, r25	; 0x01
    3d3e:	a2 83       	std	Z+2, r26	; 0x02
    3d40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d42:	fe 01       	movw	r30, r28
    3d44:	e1 55       	subi	r30, 0x51	; 81
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	60 81       	ld	r22, Z
    3d4a:	71 81       	ldd	r23, Z+1	; 0x01
    3d4c:	82 81       	ldd	r24, Z+2	; 0x02
    3d4e:	93 81       	ldd	r25, Z+3	; 0x03
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	40 e8       	ldi	r20, 0x80	; 128
    3d56:	5f e3       	ldi	r21, 0x3F	; 63
    3d58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3d5c:	88 23       	and	r24, r24
    3d5e:	44 f4       	brge	.+16     	; 0x3d70 <LED_voidFLASH+0x1926>
		__ticks = 1;
    3d60:	fe 01       	movw	r30, r28
    3d62:	e3 55       	subi	r30, 0x53	; 83
    3d64:	ff 4f       	sbci	r31, 0xFF	; 255
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	91 83       	std	Z+1, r25	; 0x01
    3d6c:	80 83       	st	Z, r24
    3d6e:	64 c0       	rjmp	.+200    	; 0x3e38 <LED_voidFLASH+0x19ee>
	else if (__tmp > 65535)
    3d70:	fe 01       	movw	r30, r28
    3d72:	e1 55       	subi	r30, 0x51	; 81
    3d74:	ff 4f       	sbci	r31, 0xFF	; 255
    3d76:	60 81       	ld	r22, Z
    3d78:	71 81       	ldd	r23, Z+1	; 0x01
    3d7a:	82 81       	ldd	r24, Z+2	; 0x02
    3d7c:	93 81       	ldd	r25, Z+3	; 0x03
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	3f ef       	ldi	r19, 0xFF	; 255
    3d82:	4f e7       	ldi	r20, 0x7F	; 127
    3d84:	57 e4       	ldi	r21, 0x47	; 71
    3d86:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3d8a:	18 16       	cp	r1, r24
    3d8c:	0c f0       	brlt	.+2      	; 0x3d90 <LED_voidFLASH+0x1946>
    3d8e:	43 c0       	rjmp	.+134    	; 0x3e16 <LED_voidFLASH+0x19cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d90:	fe 01       	movw	r30, r28
    3d92:	ed 54       	subi	r30, 0x4D	; 77
    3d94:	ff 4f       	sbci	r31, 0xFF	; 255
    3d96:	60 81       	ld	r22, Z
    3d98:	71 81       	ldd	r23, Z+1	; 0x01
    3d9a:	82 81       	ldd	r24, Z+2	; 0x02
    3d9c:	93 81       	ldd	r25, Z+3	; 0x03
    3d9e:	20 e0       	ldi	r18, 0x00	; 0
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	40 e2       	ldi	r20, 0x20	; 32
    3da4:	51 e4       	ldi	r21, 0x41	; 65
    3da6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3daa:	dc 01       	movw	r26, r24
    3dac:	cb 01       	movw	r24, r22
    3dae:	8e 01       	movw	r16, r28
    3db0:	03 55       	subi	r16, 0x53	; 83
    3db2:	1f 4f       	sbci	r17, 0xFF	; 255
    3db4:	bc 01       	movw	r22, r24
    3db6:	cd 01       	movw	r24, r26
    3db8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	f8 01       	movw	r30, r16
    3dc2:	91 83       	std	Z+1, r25	; 0x01
    3dc4:	80 83       	st	Z, r24
    3dc6:	1f c0       	rjmp	.+62     	; 0x3e06 <LED_voidFLASH+0x19bc>
    3dc8:	fe 01       	movw	r30, r28
    3dca:	e5 55       	subi	r30, 0x55	; 85
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	80 e9       	ldi	r24, 0x90	; 144
    3dd0:	91 e0       	ldi	r25, 0x01	; 1
    3dd2:	91 83       	std	Z+1, r25	; 0x01
    3dd4:	80 83       	st	Z, r24
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	e5 55       	subi	r30, 0x55	; 85
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	80 81       	ld	r24, Z
    3dde:	91 81       	ldd	r25, Z+1	; 0x01
    3de0:	01 97       	sbiw	r24, 0x01	; 1
    3de2:	f1 f7       	brne	.-4      	; 0x3de0 <LED_voidFLASH+0x1996>
    3de4:	fe 01       	movw	r30, r28
    3de6:	e5 55       	subi	r30, 0x55	; 85
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	91 83       	std	Z+1, r25	; 0x01
    3dec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dee:	de 01       	movw	r26, r28
    3df0:	a3 55       	subi	r26, 0x53	; 83
    3df2:	bf 4f       	sbci	r27, 0xFF	; 255
    3df4:	fe 01       	movw	r30, r28
    3df6:	e3 55       	subi	r30, 0x53	; 83
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	80 81       	ld	r24, Z
    3dfc:	91 81       	ldd	r25, Z+1	; 0x01
    3dfe:	01 97       	sbiw	r24, 0x01	; 1
    3e00:	11 96       	adiw	r26, 0x01	; 1
    3e02:	9c 93       	st	X, r25
    3e04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e06:	fe 01       	movw	r30, r28
    3e08:	e3 55       	subi	r30, 0x53	; 83
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	80 81       	ld	r24, Z
    3e0e:	91 81       	ldd	r25, Z+1	; 0x01
    3e10:	00 97       	sbiw	r24, 0x00	; 0
    3e12:	d1 f6       	brne	.-76     	; 0x3dc8 <LED_voidFLASH+0x197e>
    3e14:	27 c0       	rjmp	.+78     	; 0x3e64 <LED_voidFLASH+0x1a1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e16:	8e 01       	movw	r16, r28
    3e18:	03 55       	subi	r16, 0x53	; 83
    3e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e1c:	fe 01       	movw	r30, r28
    3e1e:	e1 55       	subi	r30, 0x51	; 81
    3e20:	ff 4f       	sbci	r31, 0xFF	; 255
    3e22:	60 81       	ld	r22, Z
    3e24:	71 81       	ldd	r23, Z+1	; 0x01
    3e26:	82 81       	ldd	r24, Z+2	; 0x02
    3e28:	93 81       	ldd	r25, Z+3	; 0x03
    3e2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e2e:	dc 01       	movw	r26, r24
    3e30:	cb 01       	movw	r24, r22
    3e32:	f8 01       	movw	r30, r16
    3e34:	91 83       	std	Z+1, r25	; 0x01
    3e36:	80 83       	st	Z, r24
    3e38:	de 01       	movw	r26, r28
    3e3a:	a7 55       	subi	r26, 0x57	; 87
    3e3c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e3e:	fe 01       	movw	r30, r28
    3e40:	e3 55       	subi	r30, 0x53	; 83
    3e42:	ff 4f       	sbci	r31, 0xFF	; 255
    3e44:	80 81       	ld	r24, Z
    3e46:	91 81       	ldd	r25, Z+1	; 0x01
    3e48:	8d 93       	st	X+, r24
    3e4a:	9c 93       	st	X, r25
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	e7 55       	subi	r30, 0x57	; 87
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	80 81       	ld	r24, Z
    3e54:	91 81       	ldd	r25, Z+1	; 0x01
    3e56:	01 97       	sbiw	r24, 0x01	; 1
    3e58:	f1 f7       	brne	.-4      	; 0x3e56 <LED_voidFLASH+0x1a0c>
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	e7 55       	subi	r30, 0x57	; 87
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	91 83       	std	Z+1, r25	; 0x01
    3e62:	80 83       	st	Z, r24
			_delay_ms(100);
			LED_voidLedOn(LED1);
    3e64:	81 e0       	ldi	r24, 0x01	; 1
    3e66:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	eb 55       	subi	r30, 0x5B	; 91
    3e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	a8 e4       	ldi	r26, 0x48	; 72
    3e76:	b3 e4       	ldi	r27, 0x43	; 67
    3e78:	80 83       	st	Z, r24
    3e7a:	91 83       	std	Z+1, r25	; 0x01
    3e7c:	a2 83       	std	Z+2, r26	; 0x02
    3e7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e80:	8e 01       	movw	r16, r28
    3e82:	0f 55       	subi	r16, 0x5F	; 95
    3e84:	1f 4f       	sbci	r17, 0xFF	; 255
    3e86:	fe 01       	movw	r30, r28
    3e88:	eb 55       	subi	r30, 0x5B	; 91
    3e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8c:	60 81       	ld	r22, Z
    3e8e:	71 81       	ldd	r23, Z+1	; 0x01
    3e90:	82 81       	ldd	r24, Z+2	; 0x02
    3e92:	93 81       	ldd	r25, Z+3	; 0x03
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	4a e7       	ldi	r20, 0x7A	; 122
    3e9a:	55 e4       	ldi	r21, 0x45	; 69
    3e9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	cb 01       	movw	r24, r22
    3ea4:	f8 01       	movw	r30, r16
    3ea6:	80 83       	st	Z, r24
    3ea8:	91 83       	std	Z+1, r25	; 0x01
    3eaa:	a2 83       	std	Z+2, r26	; 0x02
    3eac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3eae:	fe 01       	movw	r30, r28
    3eb0:	ef 55       	subi	r30, 0x5F	; 95
    3eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb4:	60 81       	ld	r22, Z
    3eb6:	71 81       	ldd	r23, Z+1	; 0x01
    3eb8:	82 81       	ldd	r24, Z+2	; 0x02
    3eba:	93 81       	ldd	r25, Z+3	; 0x03
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	40 e8       	ldi	r20, 0x80	; 128
    3ec2:	5f e3       	ldi	r21, 0x3F	; 63
    3ec4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3ec8:	88 23       	and	r24, r24
    3eca:	44 f4       	brge	.+16     	; 0x3edc <LED_voidFLASH+0x1a92>
		__ticks = 1;
    3ecc:	fe 01       	movw	r30, r28
    3ece:	e1 56       	subi	r30, 0x61	; 97
    3ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed2:	81 e0       	ldi	r24, 0x01	; 1
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	91 83       	std	Z+1, r25	; 0x01
    3ed8:	80 83       	st	Z, r24
    3eda:	64 c0       	rjmp	.+200    	; 0x3fa4 <LED_voidFLASH+0x1b5a>
	else if (__tmp > 65535)
    3edc:	fe 01       	movw	r30, r28
    3ede:	ef 55       	subi	r30, 0x5F	; 95
    3ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee2:	60 81       	ld	r22, Z
    3ee4:	71 81       	ldd	r23, Z+1	; 0x01
    3ee6:	82 81       	ldd	r24, Z+2	; 0x02
    3ee8:	93 81       	ldd	r25, Z+3	; 0x03
    3eea:	20 e0       	ldi	r18, 0x00	; 0
    3eec:	3f ef       	ldi	r19, 0xFF	; 255
    3eee:	4f e7       	ldi	r20, 0x7F	; 127
    3ef0:	57 e4       	ldi	r21, 0x47	; 71
    3ef2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3ef6:	18 16       	cp	r1, r24
    3ef8:	0c f0       	brlt	.+2      	; 0x3efc <LED_voidFLASH+0x1ab2>
    3efa:	43 c0       	rjmp	.+134    	; 0x3f82 <LED_voidFLASH+0x1b38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3efc:	fe 01       	movw	r30, r28
    3efe:	eb 55       	subi	r30, 0x5B	; 91
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	60 81       	ld	r22, Z
    3f04:	71 81       	ldd	r23, Z+1	; 0x01
    3f06:	82 81       	ldd	r24, Z+2	; 0x02
    3f08:	93 81       	ldd	r25, Z+3	; 0x03
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	40 e2       	ldi	r20, 0x20	; 32
    3f10:	51 e4       	ldi	r21, 0x41	; 65
    3f12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f16:	dc 01       	movw	r26, r24
    3f18:	cb 01       	movw	r24, r22
    3f1a:	8e 01       	movw	r16, r28
    3f1c:	01 56       	subi	r16, 0x61	; 97
    3f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f20:	bc 01       	movw	r22, r24
    3f22:	cd 01       	movw	r24, r26
    3f24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f28:	dc 01       	movw	r26, r24
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	f8 01       	movw	r30, r16
    3f2e:	91 83       	std	Z+1, r25	; 0x01
    3f30:	80 83       	st	Z, r24
    3f32:	1f c0       	rjmp	.+62     	; 0x3f72 <LED_voidFLASH+0x1b28>
    3f34:	fe 01       	movw	r30, r28
    3f36:	e3 56       	subi	r30, 0x63	; 99
    3f38:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3a:	80 e9       	ldi	r24, 0x90	; 144
    3f3c:	91 e0       	ldi	r25, 0x01	; 1
    3f3e:	91 83       	std	Z+1, r25	; 0x01
    3f40:	80 83       	st	Z, r24
    3f42:	fe 01       	movw	r30, r28
    3f44:	e3 56       	subi	r30, 0x63	; 99
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	80 81       	ld	r24, Z
    3f4a:	91 81       	ldd	r25, Z+1	; 0x01
    3f4c:	01 97       	sbiw	r24, 0x01	; 1
    3f4e:	f1 f7       	brne	.-4      	; 0x3f4c <LED_voidFLASH+0x1b02>
    3f50:	fe 01       	movw	r30, r28
    3f52:	e3 56       	subi	r30, 0x63	; 99
    3f54:	ff 4f       	sbci	r31, 0xFF	; 255
    3f56:	91 83       	std	Z+1, r25	; 0x01
    3f58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f5a:	de 01       	movw	r26, r28
    3f5c:	a1 56       	subi	r26, 0x61	; 97
    3f5e:	bf 4f       	sbci	r27, 0xFF	; 255
    3f60:	fe 01       	movw	r30, r28
    3f62:	e1 56       	subi	r30, 0x61	; 97
    3f64:	ff 4f       	sbci	r31, 0xFF	; 255
    3f66:	80 81       	ld	r24, Z
    3f68:	91 81       	ldd	r25, Z+1	; 0x01
    3f6a:	01 97       	sbiw	r24, 0x01	; 1
    3f6c:	11 96       	adiw	r26, 0x01	; 1
    3f6e:	9c 93       	st	X, r25
    3f70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f72:	fe 01       	movw	r30, r28
    3f74:	e1 56       	subi	r30, 0x61	; 97
    3f76:	ff 4f       	sbci	r31, 0xFF	; 255
    3f78:	80 81       	ld	r24, Z
    3f7a:	91 81       	ldd	r25, Z+1	; 0x01
    3f7c:	00 97       	sbiw	r24, 0x00	; 0
    3f7e:	d1 f6       	brne	.-76     	; 0x3f34 <LED_voidFLASH+0x1aea>
    3f80:	27 c0       	rjmp	.+78     	; 0x3fd0 <LED_voidFLASH+0x1b86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f82:	8e 01       	movw	r16, r28
    3f84:	01 56       	subi	r16, 0x61	; 97
    3f86:	1f 4f       	sbci	r17, 0xFF	; 255
    3f88:	fe 01       	movw	r30, r28
    3f8a:	ef 55       	subi	r30, 0x5F	; 95
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	60 81       	ld	r22, Z
    3f90:	71 81       	ldd	r23, Z+1	; 0x01
    3f92:	82 81       	ldd	r24, Z+2	; 0x02
    3f94:	93 81       	ldd	r25, Z+3	; 0x03
    3f96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f9a:	dc 01       	movw	r26, r24
    3f9c:	cb 01       	movw	r24, r22
    3f9e:	f8 01       	movw	r30, r16
    3fa0:	91 83       	std	Z+1, r25	; 0x01
    3fa2:	80 83       	st	Z, r24
    3fa4:	de 01       	movw	r26, r28
    3fa6:	a5 56       	subi	r26, 0x65	; 101
    3fa8:	bf 4f       	sbci	r27, 0xFF	; 255
    3faa:	fe 01       	movw	r30, r28
    3fac:	e1 56       	subi	r30, 0x61	; 97
    3fae:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb0:	80 81       	ld	r24, Z
    3fb2:	91 81       	ldd	r25, Z+1	; 0x01
    3fb4:	8d 93       	st	X+, r24
    3fb6:	9c 93       	st	X, r25
    3fb8:	fe 01       	movw	r30, r28
    3fba:	e5 56       	subi	r30, 0x65	; 101
    3fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbe:	80 81       	ld	r24, Z
    3fc0:	91 81       	ldd	r25, Z+1	; 0x01
    3fc2:	01 97       	sbiw	r24, 0x01	; 1
    3fc4:	f1 f7       	brne	.-4      	; 0x3fc2 <LED_voidFLASH+0x1b78>
    3fc6:	fe 01       	movw	r30, r28
    3fc8:	e5 56       	subi	r30, 0x65	; 101
    3fca:	ff 4f       	sbci	r31, 0xFF	; 255
    3fcc:	91 83       	std	Z+1, r25	; 0x01
    3fce:	80 83       	st	Z, r24
			_delay_ms(200);
			LED_voidLedOff(LED1);
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    3fd6:	fe 01       	movw	r30, r28
    3fd8:	e9 56       	subi	r30, 0x69	; 105
    3fda:	ff 4f       	sbci	r31, 0xFF	; 255
    3fdc:	80 e0       	ldi	r24, 0x00	; 0
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	a8 e4       	ldi	r26, 0x48	; 72
    3fe2:	b3 e4       	ldi	r27, 0x43	; 67
    3fe4:	80 83       	st	Z, r24
    3fe6:	91 83       	std	Z+1, r25	; 0x01
    3fe8:	a2 83       	std	Z+2, r26	; 0x02
    3fea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fec:	8e 01       	movw	r16, r28
    3fee:	0d 56       	subi	r16, 0x6D	; 109
    3ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff2:	fe 01       	movw	r30, r28
    3ff4:	e9 56       	subi	r30, 0x69	; 105
    3ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff8:	60 81       	ld	r22, Z
    3ffa:	71 81       	ldd	r23, Z+1	; 0x01
    3ffc:	82 81       	ldd	r24, Z+2	; 0x02
    3ffe:	93 81       	ldd	r25, Z+3	; 0x03
    4000:	20 e0       	ldi	r18, 0x00	; 0
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	4a e7       	ldi	r20, 0x7A	; 122
    4006:	55 e4       	ldi	r21, 0x45	; 69
    4008:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    400c:	dc 01       	movw	r26, r24
    400e:	cb 01       	movw	r24, r22
    4010:	f8 01       	movw	r30, r16
    4012:	80 83       	st	Z, r24
    4014:	91 83       	std	Z+1, r25	; 0x01
    4016:	a2 83       	std	Z+2, r26	; 0x02
    4018:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    401a:	fe 01       	movw	r30, r28
    401c:	ed 56       	subi	r30, 0x6D	; 109
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	60 81       	ld	r22, Z
    4022:	71 81       	ldd	r23, Z+1	; 0x01
    4024:	82 81       	ldd	r24, Z+2	; 0x02
    4026:	93 81       	ldd	r25, Z+3	; 0x03
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	40 e8       	ldi	r20, 0x80	; 128
    402e:	5f e3       	ldi	r21, 0x3F	; 63
    4030:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4034:	88 23       	and	r24, r24
    4036:	44 f4       	brge	.+16     	; 0x4048 <LED_voidFLASH+0x1bfe>
		__ticks = 1;
    4038:	fe 01       	movw	r30, r28
    403a:	ef 56       	subi	r30, 0x6F	; 111
    403c:	ff 4f       	sbci	r31, 0xFF	; 255
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	91 83       	std	Z+1, r25	; 0x01
    4044:	80 83       	st	Z, r24
    4046:	64 c0       	rjmp	.+200    	; 0x4110 <LED_voidFLASH+0x1cc6>
	else if (__tmp > 65535)
    4048:	fe 01       	movw	r30, r28
    404a:	ed 56       	subi	r30, 0x6D	; 109
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	60 81       	ld	r22, Z
    4050:	71 81       	ldd	r23, Z+1	; 0x01
    4052:	82 81       	ldd	r24, Z+2	; 0x02
    4054:	93 81       	ldd	r25, Z+3	; 0x03
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	3f ef       	ldi	r19, 0xFF	; 255
    405a:	4f e7       	ldi	r20, 0x7F	; 127
    405c:	57 e4       	ldi	r21, 0x47	; 71
    405e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4062:	18 16       	cp	r1, r24
    4064:	0c f0       	brlt	.+2      	; 0x4068 <LED_voidFLASH+0x1c1e>
    4066:	43 c0       	rjmp	.+134    	; 0x40ee <LED_voidFLASH+0x1ca4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4068:	fe 01       	movw	r30, r28
    406a:	e9 56       	subi	r30, 0x69	; 105
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	60 81       	ld	r22, Z
    4070:	71 81       	ldd	r23, Z+1	; 0x01
    4072:	82 81       	ldd	r24, Z+2	; 0x02
    4074:	93 81       	ldd	r25, Z+3	; 0x03
    4076:	20 e0       	ldi	r18, 0x00	; 0
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	40 e2       	ldi	r20, 0x20	; 32
    407c:	51 e4       	ldi	r21, 0x41	; 65
    407e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4082:	dc 01       	movw	r26, r24
    4084:	cb 01       	movw	r24, r22
    4086:	8e 01       	movw	r16, r28
    4088:	0f 56       	subi	r16, 0x6F	; 111
    408a:	1f 4f       	sbci	r17, 0xFF	; 255
    408c:	bc 01       	movw	r22, r24
    408e:	cd 01       	movw	r24, r26
    4090:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4094:	dc 01       	movw	r26, r24
    4096:	cb 01       	movw	r24, r22
    4098:	f8 01       	movw	r30, r16
    409a:	91 83       	std	Z+1, r25	; 0x01
    409c:	80 83       	st	Z, r24
    409e:	1f c0       	rjmp	.+62     	; 0x40de <LED_voidFLASH+0x1c94>
    40a0:	fe 01       	movw	r30, r28
    40a2:	e1 57       	subi	r30, 0x71	; 113
    40a4:	ff 4f       	sbci	r31, 0xFF	; 255
    40a6:	80 e9       	ldi	r24, 0x90	; 144
    40a8:	91 e0       	ldi	r25, 0x01	; 1
    40aa:	91 83       	std	Z+1, r25	; 0x01
    40ac:	80 83       	st	Z, r24
    40ae:	fe 01       	movw	r30, r28
    40b0:	e1 57       	subi	r30, 0x71	; 113
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	80 81       	ld	r24, Z
    40b6:	91 81       	ldd	r25, Z+1	; 0x01
    40b8:	01 97       	sbiw	r24, 0x01	; 1
    40ba:	f1 f7       	brne	.-4      	; 0x40b8 <LED_voidFLASH+0x1c6e>
    40bc:	fe 01       	movw	r30, r28
    40be:	e1 57       	subi	r30, 0x71	; 113
    40c0:	ff 4f       	sbci	r31, 0xFF	; 255
    40c2:	91 83       	std	Z+1, r25	; 0x01
    40c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c6:	de 01       	movw	r26, r28
    40c8:	af 56       	subi	r26, 0x6F	; 111
    40ca:	bf 4f       	sbci	r27, 0xFF	; 255
    40cc:	fe 01       	movw	r30, r28
    40ce:	ef 56       	subi	r30, 0x6F	; 111
    40d0:	ff 4f       	sbci	r31, 0xFF	; 255
    40d2:	80 81       	ld	r24, Z
    40d4:	91 81       	ldd	r25, Z+1	; 0x01
    40d6:	01 97       	sbiw	r24, 0x01	; 1
    40d8:	11 96       	adiw	r26, 0x01	; 1
    40da:	9c 93       	st	X, r25
    40dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40de:	fe 01       	movw	r30, r28
    40e0:	ef 56       	subi	r30, 0x6F	; 111
    40e2:	ff 4f       	sbci	r31, 0xFF	; 255
    40e4:	80 81       	ld	r24, Z
    40e6:	91 81       	ldd	r25, Z+1	; 0x01
    40e8:	00 97       	sbiw	r24, 0x00	; 0
    40ea:	d1 f6       	brne	.-76     	; 0x40a0 <LED_voidFLASH+0x1c56>
    40ec:	13 c6       	rjmp	.+3110   	; 0x4d14 <LED_voidFLASH+0x28ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ee:	8e 01       	movw	r16, r28
    40f0:	0f 56       	subi	r16, 0x6F	; 111
    40f2:	1f 4f       	sbci	r17, 0xFF	; 255
    40f4:	fe 01       	movw	r30, r28
    40f6:	ed 56       	subi	r30, 0x6D	; 109
    40f8:	ff 4f       	sbci	r31, 0xFF	; 255
    40fa:	60 81       	ld	r22, Z
    40fc:	71 81       	ldd	r23, Z+1	; 0x01
    40fe:	82 81       	ldd	r24, Z+2	; 0x02
    4100:	93 81       	ldd	r25, Z+3	; 0x03
    4102:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	f8 01       	movw	r30, r16
    410c:	91 83       	std	Z+1, r25	; 0x01
    410e:	80 83       	st	Z, r24
    4110:	de 01       	movw	r26, r28
    4112:	a3 57       	subi	r26, 0x73	; 115
    4114:	bf 4f       	sbci	r27, 0xFF	; 255
    4116:	fe 01       	movw	r30, r28
    4118:	ef 56       	subi	r30, 0x6F	; 111
    411a:	ff 4f       	sbci	r31, 0xFF	; 255
    411c:	80 81       	ld	r24, Z
    411e:	91 81       	ldd	r25, Z+1	; 0x01
    4120:	11 96       	adiw	r26, 0x01	; 1
    4122:	9c 93       	st	X, r25
    4124:	8e 93       	st	-X, r24
    4126:	fe 01       	movw	r30, r28
    4128:	e3 57       	subi	r30, 0x73	; 115
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	80 81       	ld	r24, Z
    412e:	91 81       	ldd	r25, Z+1	; 0x01
    4130:	01 97       	sbiw	r24, 0x01	; 1
    4132:	f1 f7       	brne	.-4      	; 0x4130 <LED_voidFLASH+0x1ce6>
    4134:	fe 01       	movw	r30, r28
    4136:	e3 57       	subi	r30, 0x73	; 115
    4138:	ff 4f       	sbci	r31, 0xFF	; 255
    413a:	91 83       	std	Z+1, r25	; 0x01
    413c:	80 83       	st	Z, r24
    413e:	ea c5       	rjmp	.+3028   	; 0x4d14 <LED_voidFLASH+0x28ca>
			_delay_ms(200);
			break;
		case LED2:
			LED_voidLedOn(LED2);
    4140:	82 e0       	ldi	r24, 0x02	; 2
    4142:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    4146:	fe 01       	movw	r30, r28
    4148:	e7 57       	subi	r30, 0x77	; 119
    414a:	ff 4f       	sbci	r31, 0xFF	; 255
    414c:	80 e0       	ldi	r24, 0x00	; 0
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	aa ef       	ldi	r26, 0xFA	; 250
    4152:	b3 e4       	ldi	r27, 0x43	; 67
    4154:	80 83       	st	Z, r24
    4156:	91 83       	std	Z+1, r25	; 0x01
    4158:	a2 83       	std	Z+2, r26	; 0x02
    415a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    415c:	8e 01       	movw	r16, r28
    415e:	0b 57       	subi	r16, 0x7B	; 123
    4160:	1f 4f       	sbci	r17, 0xFF	; 255
    4162:	fe 01       	movw	r30, r28
    4164:	e7 57       	subi	r30, 0x77	; 119
    4166:	ff 4f       	sbci	r31, 0xFF	; 255
    4168:	60 81       	ld	r22, Z
    416a:	71 81       	ldd	r23, Z+1	; 0x01
    416c:	82 81       	ldd	r24, Z+2	; 0x02
    416e:	93 81       	ldd	r25, Z+3	; 0x03
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	4a e7       	ldi	r20, 0x7A	; 122
    4176:	55 e4       	ldi	r21, 0x45	; 69
    4178:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    417c:	dc 01       	movw	r26, r24
    417e:	cb 01       	movw	r24, r22
    4180:	f8 01       	movw	r30, r16
    4182:	80 83       	st	Z, r24
    4184:	91 83       	std	Z+1, r25	; 0x01
    4186:	a2 83       	std	Z+2, r26	; 0x02
    4188:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    418a:	fe 01       	movw	r30, r28
    418c:	eb 57       	subi	r30, 0x7B	; 123
    418e:	ff 4f       	sbci	r31, 0xFF	; 255
    4190:	60 81       	ld	r22, Z
    4192:	71 81       	ldd	r23, Z+1	; 0x01
    4194:	82 81       	ldd	r24, Z+2	; 0x02
    4196:	93 81       	ldd	r25, Z+3	; 0x03
    4198:	20 e0       	ldi	r18, 0x00	; 0
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	40 e8       	ldi	r20, 0x80	; 128
    419e:	5f e3       	ldi	r21, 0x3F	; 63
    41a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    41a4:	88 23       	and	r24, r24
    41a6:	44 f4       	brge	.+16     	; 0x41b8 <LED_voidFLASH+0x1d6e>
		__ticks = 1;
    41a8:	fe 01       	movw	r30, r28
    41aa:	ed 57       	subi	r30, 0x7D	; 125
    41ac:	ff 4f       	sbci	r31, 0xFF	; 255
    41ae:	81 e0       	ldi	r24, 0x01	; 1
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	91 83       	std	Z+1, r25	; 0x01
    41b4:	80 83       	st	Z, r24
    41b6:	64 c0       	rjmp	.+200    	; 0x4280 <LED_voidFLASH+0x1e36>
	else if (__tmp > 65535)
    41b8:	fe 01       	movw	r30, r28
    41ba:	eb 57       	subi	r30, 0x7B	; 123
    41bc:	ff 4f       	sbci	r31, 0xFF	; 255
    41be:	60 81       	ld	r22, Z
    41c0:	71 81       	ldd	r23, Z+1	; 0x01
    41c2:	82 81       	ldd	r24, Z+2	; 0x02
    41c4:	93 81       	ldd	r25, Z+3	; 0x03
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	3f ef       	ldi	r19, 0xFF	; 255
    41ca:	4f e7       	ldi	r20, 0x7F	; 127
    41cc:	57 e4       	ldi	r21, 0x47	; 71
    41ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    41d2:	18 16       	cp	r1, r24
    41d4:	0c f0       	brlt	.+2      	; 0x41d8 <LED_voidFLASH+0x1d8e>
    41d6:	43 c0       	rjmp	.+134    	; 0x425e <LED_voidFLASH+0x1e14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41d8:	fe 01       	movw	r30, r28
    41da:	e7 57       	subi	r30, 0x77	; 119
    41dc:	ff 4f       	sbci	r31, 0xFF	; 255
    41de:	60 81       	ld	r22, Z
    41e0:	71 81       	ldd	r23, Z+1	; 0x01
    41e2:	82 81       	ldd	r24, Z+2	; 0x02
    41e4:	93 81       	ldd	r25, Z+3	; 0x03
    41e6:	20 e0       	ldi	r18, 0x00	; 0
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	40 e2       	ldi	r20, 0x20	; 32
    41ec:	51 e4       	ldi	r21, 0x41	; 65
    41ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    41f2:	dc 01       	movw	r26, r24
    41f4:	cb 01       	movw	r24, r22
    41f6:	8e 01       	movw	r16, r28
    41f8:	0d 57       	subi	r16, 0x7D	; 125
    41fa:	1f 4f       	sbci	r17, 0xFF	; 255
    41fc:	bc 01       	movw	r22, r24
    41fe:	cd 01       	movw	r24, r26
    4200:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4204:	dc 01       	movw	r26, r24
    4206:	cb 01       	movw	r24, r22
    4208:	f8 01       	movw	r30, r16
    420a:	91 83       	std	Z+1, r25	; 0x01
    420c:	80 83       	st	Z, r24
    420e:	1f c0       	rjmp	.+62     	; 0x424e <LED_voidFLASH+0x1e04>
    4210:	fe 01       	movw	r30, r28
    4212:	ef 57       	subi	r30, 0x7F	; 127
    4214:	ff 4f       	sbci	r31, 0xFF	; 255
    4216:	80 e9       	ldi	r24, 0x90	; 144
    4218:	91 e0       	ldi	r25, 0x01	; 1
    421a:	91 83       	std	Z+1, r25	; 0x01
    421c:	80 83       	st	Z, r24
    421e:	fe 01       	movw	r30, r28
    4220:	ef 57       	subi	r30, 0x7F	; 127
    4222:	ff 4f       	sbci	r31, 0xFF	; 255
    4224:	80 81       	ld	r24, Z
    4226:	91 81       	ldd	r25, Z+1	; 0x01
    4228:	01 97       	sbiw	r24, 0x01	; 1
    422a:	f1 f7       	brne	.-4      	; 0x4228 <LED_voidFLASH+0x1dde>
    422c:	fe 01       	movw	r30, r28
    422e:	ef 57       	subi	r30, 0x7F	; 127
    4230:	ff 4f       	sbci	r31, 0xFF	; 255
    4232:	91 83       	std	Z+1, r25	; 0x01
    4234:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4236:	de 01       	movw	r26, r28
    4238:	ad 57       	subi	r26, 0x7D	; 125
    423a:	bf 4f       	sbci	r27, 0xFF	; 255
    423c:	fe 01       	movw	r30, r28
    423e:	ed 57       	subi	r30, 0x7D	; 125
    4240:	ff 4f       	sbci	r31, 0xFF	; 255
    4242:	80 81       	ld	r24, Z
    4244:	91 81       	ldd	r25, Z+1	; 0x01
    4246:	01 97       	sbiw	r24, 0x01	; 1
    4248:	11 96       	adiw	r26, 0x01	; 1
    424a:	9c 93       	st	X, r25
    424c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    424e:	fe 01       	movw	r30, r28
    4250:	ed 57       	subi	r30, 0x7D	; 125
    4252:	ff 4f       	sbci	r31, 0xFF	; 255
    4254:	80 81       	ld	r24, Z
    4256:	91 81       	ldd	r25, Z+1	; 0x01
    4258:	00 97       	sbiw	r24, 0x00	; 0
    425a:	d1 f6       	brne	.-76     	; 0x4210 <LED_voidFLASH+0x1dc6>
    425c:	27 c0       	rjmp	.+78     	; 0x42ac <LED_voidFLASH+0x1e62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    425e:	8e 01       	movw	r16, r28
    4260:	0d 57       	subi	r16, 0x7D	; 125
    4262:	1f 4f       	sbci	r17, 0xFF	; 255
    4264:	fe 01       	movw	r30, r28
    4266:	eb 57       	subi	r30, 0x7B	; 123
    4268:	ff 4f       	sbci	r31, 0xFF	; 255
    426a:	60 81       	ld	r22, Z
    426c:	71 81       	ldd	r23, Z+1	; 0x01
    426e:	82 81       	ldd	r24, Z+2	; 0x02
    4270:	93 81       	ldd	r25, Z+3	; 0x03
    4272:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4276:	dc 01       	movw	r26, r24
    4278:	cb 01       	movw	r24, r22
    427a:	f8 01       	movw	r30, r16
    427c:	91 83       	std	Z+1, r25	; 0x01
    427e:	80 83       	st	Z, r24
    4280:	de 01       	movw	r26, r28
    4282:	a1 58       	subi	r26, 0x81	; 129
    4284:	bf 4f       	sbci	r27, 0xFF	; 255
    4286:	fe 01       	movw	r30, r28
    4288:	ed 57       	subi	r30, 0x7D	; 125
    428a:	ff 4f       	sbci	r31, 0xFF	; 255
    428c:	80 81       	ld	r24, Z
    428e:	91 81       	ldd	r25, Z+1	; 0x01
    4290:	8d 93       	st	X+, r24
    4292:	9c 93       	st	X, r25
    4294:	fe 01       	movw	r30, r28
    4296:	e1 58       	subi	r30, 0x81	; 129
    4298:	ff 4f       	sbci	r31, 0xFF	; 255
    429a:	80 81       	ld	r24, Z
    429c:	91 81       	ldd	r25, Z+1	; 0x01
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	f1 f7       	brne	.-4      	; 0x429e <LED_voidFLASH+0x1e54>
    42a2:	fe 01       	movw	r30, r28
    42a4:	e1 58       	subi	r30, 0x81	; 129
    42a6:	ff 4f       	sbci	r31, 0xFF	; 255
    42a8:	91 83       	std	Z+1, r25	; 0x01
    42aa:	80 83       	st	Z, r24
			_delay_ms(500);
			LED_voidLedOff(LED2);
    42ac:	82 e0       	ldi	r24, 0x02	; 2
    42ae:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    42b2:	fe 01       	movw	r30, r28
    42b4:	e5 58       	subi	r30, 0x85	; 133
    42b6:	ff 4f       	sbci	r31, 0xFF	; 255
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	aa ef       	ldi	r26, 0xFA	; 250
    42be:	b3 e4       	ldi	r27, 0x43	; 67
    42c0:	80 83       	st	Z, r24
    42c2:	91 83       	std	Z+1, r25	; 0x01
    42c4:	a2 83       	std	Z+2, r26	; 0x02
    42c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42c8:	8e 01       	movw	r16, r28
    42ca:	09 58       	subi	r16, 0x89	; 137
    42cc:	1f 4f       	sbci	r17, 0xFF	; 255
    42ce:	fe 01       	movw	r30, r28
    42d0:	e5 58       	subi	r30, 0x85	; 133
    42d2:	ff 4f       	sbci	r31, 0xFF	; 255
    42d4:	60 81       	ld	r22, Z
    42d6:	71 81       	ldd	r23, Z+1	; 0x01
    42d8:	82 81       	ldd	r24, Z+2	; 0x02
    42da:	93 81       	ldd	r25, Z+3	; 0x03
    42dc:	20 e0       	ldi	r18, 0x00	; 0
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	4a e7       	ldi	r20, 0x7A	; 122
    42e2:	55 e4       	ldi	r21, 0x45	; 69
    42e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	f8 01       	movw	r30, r16
    42ee:	80 83       	st	Z, r24
    42f0:	91 83       	std	Z+1, r25	; 0x01
    42f2:	a2 83       	std	Z+2, r26	; 0x02
    42f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42f6:	fe 01       	movw	r30, r28
    42f8:	e9 58       	subi	r30, 0x89	; 137
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	60 81       	ld	r22, Z
    42fe:	71 81       	ldd	r23, Z+1	; 0x01
    4300:	82 81       	ldd	r24, Z+2	; 0x02
    4302:	93 81       	ldd	r25, Z+3	; 0x03
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	40 e8       	ldi	r20, 0x80	; 128
    430a:	5f e3       	ldi	r21, 0x3F	; 63
    430c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4310:	88 23       	and	r24, r24
    4312:	44 f4       	brge	.+16     	; 0x4324 <LED_voidFLASH+0x1eda>
		__ticks = 1;
    4314:	fe 01       	movw	r30, r28
    4316:	eb 58       	subi	r30, 0x8B	; 139
    4318:	ff 4f       	sbci	r31, 0xFF	; 255
    431a:	81 e0       	ldi	r24, 0x01	; 1
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	91 83       	std	Z+1, r25	; 0x01
    4320:	80 83       	st	Z, r24
    4322:	64 c0       	rjmp	.+200    	; 0x43ec <LED_voidFLASH+0x1fa2>
	else if (__tmp > 65535)
    4324:	fe 01       	movw	r30, r28
    4326:	e9 58       	subi	r30, 0x89	; 137
    4328:	ff 4f       	sbci	r31, 0xFF	; 255
    432a:	60 81       	ld	r22, Z
    432c:	71 81       	ldd	r23, Z+1	; 0x01
    432e:	82 81       	ldd	r24, Z+2	; 0x02
    4330:	93 81       	ldd	r25, Z+3	; 0x03
    4332:	20 e0       	ldi	r18, 0x00	; 0
    4334:	3f ef       	ldi	r19, 0xFF	; 255
    4336:	4f e7       	ldi	r20, 0x7F	; 127
    4338:	57 e4       	ldi	r21, 0x47	; 71
    433a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    433e:	18 16       	cp	r1, r24
    4340:	0c f0       	brlt	.+2      	; 0x4344 <LED_voidFLASH+0x1efa>
    4342:	43 c0       	rjmp	.+134    	; 0x43ca <LED_voidFLASH+0x1f80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4344:	fe 01       	movw	r30, r28
    4346:	e5 58       	subi	r30, 0x85	; 133
    4348:	ff 4f       	sbci	r31, 0xFF	; 255
    434a:	60 81       	ld	r22, Z
    434c:	71 81       	ldd	r23, Z+1	; 0x01
    434e:	82 81       	ldd	r24, Z+2	; 0x02
    4350:	93 81       	ldd	r25, Z+3	; 0x03
    4352:	20 e0       	ldi	r18, 0x00	; 0
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	40 e2       	ldi	r20, 0x20	; 32
    4358:	51 e4       	ldi	r21, 0x41	; 65
    435a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    435e:	dc 01       	movw	r26, r24
    4360:	cb 01       	movw	r24, r22
    4362:	8e 01       	movw	r16, r28
    4364:	0b 58       	subi	r16, 0x8B	; 139
    4366:	1f 4f       	sbci	r17, 0xFF	; 255
    4368:	bc 01       	movw	r22, r24
    436a:	cd 01       	movw	r24, r26
    436c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4370:	dc 01       	movw	r26, r24
    4372:	cb 01       	movw	r24, r22
    4374:	f8 01       	movw	r30, r16
    4376:	91 83       	std	Z+1, r25	; 0x01
    4378:	80 83       	st	Z, r24
    437a:	1f c0       	rjmp	.+62     	; 0x43ba <LED_voidFLASH+0x1f70>
    437c:	fe 01       	movw	r30, r28
    437e:	ed 58       	subi	r30, 0x8D	; 141
    4380:	ff 4f       	sbci	r31, 0xFF	; 255
    4382:	80 e9       	ldi	r24, 0x90	; 144
    4384:	91 e0       	ldi	r25, 0x01	; 1
    4386:	91 83       	std	Z+1, r25	; 0x01
    4388:	80 83       	st	Z, r24
    438a:	fe 01       	movw	r30, r28
    438c:	ed 58       	subi	r30, 0x8D	; 141
    438e:	ff 4f       	sbci	r31, 0xFF	; 255
    4390:	80 81       	ld	r24, Z
    4392:	91 81       	ldd	r25, Z+1	; 0x01
    4394:	01 97       	sbiw	r24, 0x01	; 1
    4396:	f1 f7       	brne	.-4      	; 0x4394 <LED_voidFLASH+0x1f4a>
    4398:	fe 01       	movw	r30, r28
    439a:	ed 58       	subi	r30, 0x8D	; 141
    439c:	ff 4f       	sbci	r31, 0xFF	; 255
    439e:	91 83       	std	Z+1, r25	; 0x01
    43a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43a2:	de 01       	movw	r26, r28
    43a4:	ab 58       	subi	r26, 0x8B	; 139
    43a6:	bf 4f       	sbci	r27, 0xFF	; 255
    43a8:	fe 01       	movw	r30, r28
    43aa:	eb 58       	subi	r30, 0x8B	; 139
    43ac:	ff 4f       	sbci	r31, 0xFF	; 255
    43ae:	80 81       	ld	r24, Z
    43b0:	91 81       	ldd	r25, Z+1	; 0x01
    43b2:	01 97       	sbiw	r24, 0x01	; 1
    43b4:	11 96       	adiw	r26, 0x01	; 1
    43b6:	9c 93       	st	X, r25
    43b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ba:	fe 01       	movw	r30, r28
    43bc:	eb 58       	subi	r30, 0x8B	; 139
    43be:	ff 4f       	sbci	r31, 0xFF	; 255
    43c0:	80 81       	ld	r24, Z
    43c2:	91 81       	ldd	r25, Z+1	; 0x01
    43c4:	00 97       	sbiw	r24, 0x00	; 0
    43c6:	d1 f6       	brne	.-76     	; 0x437c <LED_voidFLASH+0x1f32>
    43c8:	27 c0       	rjmp	.+78     	; 0x4418 <LED_voidFLASH+0x1fce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ca:	8e 01       	movw	r16, r28
    43cc:	0b 58       	subi	r16, 0x8B	; 139
    43ce:	1f 4f       	sbci	r17, 0xFF	; 255
    43d0:	fe 01       	movw	r30, r28
    43d2:	e9 58       	subi	r30, 0x89	; 137
    43d4:	ff 4f       	sbci	r31, 0xFF	; 255
    43d6:	60 81       	ld	r22, Z
    43d8:	71 81       	ldd	r23, Z+1	; 0x01
    43da:	82 81       	ldd	r24, Z+2	; 0x02
    43dc:	93 81       	ldd	r25, Z+3	; 0x03
    43de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43e2:	dc 01       	movw	r26, r24
    43e4:	cb 01       	movw	r24, r22
    43e6:	f8 01       	movw	r30, r16
    43e8:	91 83       	std	Z+1, r25	; 0x01
    43ea:	80 83       	st	Z, r24
    43ec:	de 01       	movw	r26, r28
    43ee:	af 58       	subi	r26, 0x8F	; 143
    43f0:	bf 4f       	sbci	r27, 0xFF	; 255
    43f2:	fe 01       	movw	r30, r28
    43f4:	eb 58       	subi	r30, 0x8B	; 139
    43f6:	ff 4f       	sbci	r31, 0xFF	; 255
    43f8:	80 81       	ld	r24, Z
    43fa:	91 81       	ldd	r25, Z+1	; 0x01
    43fc:	8d 93       	st	X+, r24
    43fe:	9c 93       	st	X, r25
    4400:	fe 01       	movw	r30, r28
    4402:	ef 58       	subi	r30, 0x8F	; 143
    4404:	ff 4f       	sbci	r31, 0xFF	; 255
    4406:	80 81       	ld	r24, Z
    4408:	91 81       	ldd	r25, Z+1	; 0x01
    440a:	01 97       	sbiw	r24, 0x01	; 1
    440c:	f1 f7       	brne	.-4      	; 0x440a <LED_voidFLASH+0x1fc0>
    440e:	fe 01       	movw	r30, r28
    4410:	ef 58       	subi	r30, 0x8F	; 143
    4412:	ff 4f       	sbci	r31, 0xFF	; 255
    4414:	91 83       	std	Z+1, r25	; 0x01
    4416:	80 83       	st	Z, r24
			_delay_ms(500);
			LED_voidLedOn(LED2);
    4418:	82 e0       	ldi	r24, 0x02	; 2
    441a:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    441e:	fe 01       	movw	r30, r28
    4420:	e3 59       	subi	r30, 0x93	; 147
    4422:	ff 4f       	sbci	r31, 0xFF	; 255
    4424:	80 e0       	ldi	r24, 0x00	; 0
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	a8 ec       	ldi	r26, 0xC8	; 200
    442a:	b2 e4       	ldi	r27, 0x42	; 66
    442c:	80 83       	st	Z, r24
    442e:	91 83       	std	Z+1, r25	; 0x01
    4430:	a2 83       	std	Z+2, r26	; 0x02
    4432:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4434:	8e 01       	movw	r16, r28
    4436:	07 59       	subi	r16, 0x97	; 151
    4438:	1f 4f       	sbci	r17, 0xFF	; 255
    443a:	fe 01       	movw	r30, r28
    443c:	e3 59       	subi	r30, 0x93	; 147
    443e:	ff 4f       	sbci	r31, 0xFF	; 255
    4440:	60 81       	ld	r22, Z
    4442:	71 81       	ldd	r23, Z+1	; 0x01
    4444:	82 81       	ldd	r24, Z+2	; 0x02
    4446:	93 81       	ldd	r25, Z+3	; 0x03
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	30 e0       	ldi	r19, 0x00	; 0
    444c:	4a e7       	ldi	r20, 0x7A	; 122
    444e:	55 e4       	ldi	r21, 0x45	; 69
    4450:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4454:	dc 01       	movw	r26, r24
    4456:	cb 01       	movw	r24, r22
    4458:	f8 01       	movw	r30, r16
    445a:	80 83       	st	Z, r24
    445c:	91 83       	std	Z+1, r25	; 0x01
    445e:	a2 83       	std	Z+2, r26	; 0x02
    4460:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4462:	fe 01       	movw	r30, r28
    4464:	e7 59       	subi	r30, 0x97	; 151
    4466:	ff 4f       	sbci	r31, 0xFF	; 255
    4468:	60 81       	ld	r22, Z
    446a:	71 81       	ldd	r23, Z+1	; 0x01
    446c:	82 81       	ldd	r24, Z+2	; 0x02
    446e:	93 81       	ldd	r25, Z+3	; 0x03
    4470:	20 e0       	ldi	r18, 0x00	; 0
    4472:	30 e0       	ldi	r19, 0x00	; 0
    4474:	40 e8       	ldi	r20, 0x80	; 128
    4476:	5f e3       	ldi	r21, 0x3F	; 63
    4478:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    447c:	88 23       	and	r24, r24
    447e:	44 f4       	brge	.+16     	; 0x4490 <LED_voidFLASH+0x2046>
		__ticks = 1;
    4480:	fe 01       	movw	r30, r28
    4482:	e9 59       	subi	r30, 0x99	; 153
    4484:	ff 4f       	sbci	r31, 0xFF	; 255
    4486:	81 e0       	ldi	r24, 0x01	; 1
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	91 83       	std	Z+1, r25	; 0x01
    448c:	80 83       	st	Z, r24
    448e:	64 c0       	rjmp	.+200    	; 0x4558 <LED_voidFLASH+0x210e>
	else if (__tmp > 65535)
    4490:	fe 01       	movw	r30, r28
    4492:	e7 59       	subi	r30, 0x97	; 151
    4494:	ff 4f       	sbci	r31, 0xFF	; 255
    4496:	60 81       	ld	r22, Z
    4498:	71 81       	ldd	r23, Z+1	; 0x01
    449a:	82 81       	ldd	r24, Z+2	; 0x02
    449c:	93 81       	ldd	r25, Z+3	; 0x03
    449e:	20 e0       	ldi	r18, 0x00	; 0
    44a0:	3f ef       	ldi	r19, 0xFF	; 255
    44a2:	4f e7       	ldi	r20, 0x7F	; 127
    44a4:	57 e4       	ldi	r21, 0x47	; 71
    44a6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    44aa:	18 16       	cp	r1, r24
    44ac:	0c f0       	brlt	.+2      	; 0x44b0 <LED_voidFLASH+0x2066>
    44ae:	43 c0       	rjmp	.+134    	; 0x4536 <LED_voidFLASH+0x20ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44b0:	fe 01       	movw	r30, r28
    44b2:	e3 59       	subi	r30, 0x93	; 147
    44b4:	ff 4f       	sbci	r31, 0xFF	; 255
    44b6:	60 81       	ld	r22, Z
    44b8:	71 81       	ldd	r23, Z+1	; 0x01
    44ba:	82 81       	ldd	r24, Z+2	; 0x02
    44bc:	93 81       	ldd	r25, Z+3	; 0x03
    44be:	20 e0       	ldi	r18, 0x00	; 0
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	40 e2       	ldi	r20, 0x20	; 32
    44c4:	51 e4       	ldi	r21, 0x41	; 65
    44c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    44ca:	dc 01       	movw	r26, r24
    44cc:	cb 01       	movw	r24, r22
    44ce:	8e 01       	movw	r16, r28
    44d0:	09 59       	subi	r16, 0x99	; 153
    44d2:	1f 4f       	sbci	r17, 0xFF	; 255
    44d4:	bc 01       	movw	r22, r24
    44d6:	cd 01       	movw	r24, r26
    44d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44dc:	dc 01       	movw	r26, r24
    44de:	cb 01       	movw	r24, r22
    44e0:	f8 01       	movw	r30, r16
    44e2:	91 83       	std	Z+1, r25	; 0x01
    44e4:	80 83       	st	Z, r24
    44e6:	1f c0       	rjmp	.+62     	; 0x4526 <LED_voidFLASH+0x20dc>
    44e8:	fe 01       	movw	r30, r28
    44ea:	eb 59       	subi	r30, 0x9B	; 155
    44ec:	ff 4f       	sbci	r31, 0xFF	; 255
    44ee:	80 e9       	ldi	r24, 0x90	; 144
    44f0:	91 e0       	ldi	r25, 0x01	; 1
    44f2:	91 83       	std	Z+1, r25	; 0x01
    44f4:	80 83       	st	Z, r24
    44f6:	fe 01       	movw	r30, r28
    44f8:	eb 59       	subi	r30, 0x9B	; 155
    44fa:	ff 4f       	sbci	r31, 0xFF	; 255
    44fc:	80 81       	ld	r24, Z
    44fe:	91 81       	ldd	r25, Z+1	; 0x01
    4500:	01 97       	sbiw	r24, 0x01	; 1
    4502:	f1 f7       	brne	.-4      	; 0x4500 <LED_voidFLASH+0x20b6>
    4504:	fe 01       	movw	r30, r28
    4506:	eb 59       	subi	r30, 0x9B	; 155
    4508:	ff 4f       	sbci	r31, 0xFF	; 255
    450a:	91 83       	std	Z+1, r25	; 0x01
    450c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    450e:	de 01       	movw	r26, r28
    4510:	a9 59       	subi	r26, 0x99	; 153
    4512:	bf 4f       	sbci	r27, 0xFF	; 255
    4514:	fe 01       	movw	r30, r28
    4516:	e9 59       	subi	r30, 0x99	; 153
    4518:	ff 4f       	sbci	r31, 0xFF	; 255
    451a:	80 81       	ld	r24, Z
    451c:	91 81       	ldd	r25, Z+1	; 0x01
    451e:	01 97       	sbiw	r24, 0x01	; 1
    4520:	11 96       	adiw	r26, 0x01	; 1
    4522:	9c 93       	st	X, r25
    4524:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4526:	fe 01       	movw	r30, r28
    4528:	e9 59       	subi	r30, 0x99	; 153
    452a:	ff 4f       	sbci	r31, 0xFF	; 255
    452c:	80 81       	ld	r24, Z
    452e:	91 81       	ldd	r25, Z+1	; 0x01
    4530:	00 97       	sbiw	r24, 0x00	; 0
    4532:	d1 f6       	brne	.-76     	; 0x44e8 <LED_voidFLASH+0x209e>
    4534:	27 c0       	rjmp	.+78     	; 0x4584 <LED_voidFLASH+0x213a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4536:	8e 01       	movw	r16, r28
    4538:	09 59       	subi	r16, 0x99	; 153
    453a:	1f 4f       	sbci	r17, 0xFF	; 255
    453c:	fe 01       	movw	r30, r28
    453e:	e7 59       	subi	r30, 0x97	; 151
    4540:	ff 4f       	sbci	r31, 0xFF	; 255
    4542:	60 81       	ld	r22, Z
    4544:	71 81       	ldd	r23, Z+1	; 0x01
    4546:	82 81       	ldd	r24, Z+2	; 0x02
    4548:	93 81       	ldd	r25, Z+3	; 0x03
    454a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    454e:	dc 01       	movw	r26, r24
    4550:	cb 01       	movw	r24, r22
    4552:	f8 01       	movw	r30, r16
    4554:	91 83       	std	Z+1, r25	; 0x01
    4556:	80 83       	st	Z, r24
    4558:	de 01       	movw	r26, r28
    455a:	ad 59       	subi	r26, 0x9D	; 157
    455c:	bf 4f       	sbci	r27, 0xFF	; 255
    455e:	fe 01       	movw	r30, r28
    4560:	e9 59       	subi	r30, 0x99	; 153
    4562:	ff 4f       	sbci	r31, 0xFF	; 255
    4564:	80 81       	ld	r24, Z
    4566:	91 81       	ldd	r25, Z+1	; 0x01
    4568:	8d 93       	st	X+, r24
    456a:	9c 93       	st	X, r25
    456c:	fe 01       	movw	r30, r28
    456e:	ed 59       	subi	r30, 0x9D	; 157
    4570:	ff 4f       	sbci	r31, 0xFF	; 255
    4572:	80 81       	ld	r24, Z
    4574:	91 81       	ldd	r25, Z+1	; 0x01
    4576:	01 97       	sbiw	r24, 0x01	; 1
    4578:	f1 f7       	brne	.-4      	; 0x4576 <LED_voidFLASH+0x212c>
    457a:	fe 01       	movw	r30, r28
    457c:	ed 59       	subi	r30, 0x9D	; 157
    457e:	ff 4f       	sbci	r31, 0xFF	; 255
    4580:	91 83       	std	Z+1, r25	; 0x01
    4582:	80 83       	st	Z, r24
			_delay_ms(100);
			LED_voidLedOff(LED2);
    4584:	82 e0       	ldi	r24, 0x02	; 2
    4586:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    458a:	fe 01       	movw	r30, r28
    458c:	e1 5a       	subi	r30, 0xA1	; 161
    458e:	ff 4f       	sbci	r31, 0xFF	; 255
    4590:	80 e0       	ldi	r24, 0x00	; 0
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	a8 ec       	ldi	r26, 0xC8	; 200
    4596:	b2 e4       	ldi	r27, 0x42	; 66
    4598:	80 83       	st	Z, r24
    459a:	91 83       	std	Z+1, r25	; 0x01
    459c:	a2 83       	std	Z+2, r26	; 0x02
    459e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45a0:	8e 01       	movw	r16, r28
    45a2:	05 5a       	subi	r16, 0xA5	; 165
    45a4:	1f 4f       	sbci	r17, 0xFF	; 255
    45a6:	fe 01       	movw	r30, r28
    45a8:	e1 5a       	subi	r30, 0xA1	; 161
    45aa:	ff 4f       	sbci	r31, 0xFF	; 255
    45ac:	60 81       	ld	r22, Z
    45ae:	71 81       	ldd	r23, Z+1	; 0x01
    45b0:	82 81       	ldd	r24, Z+2	; 0x02
    45b2:	93 81       	ldd	r25, Z+3	; 0x03
    45b4:	20 e0       	ldi	r18, 0x00	; 0
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	4a e7       	ldi	r20, 0x7A	; 122
    45ba:	55 e4       	ldi	r21, 0x45	; 69
    45bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    45c0:	dc 01       	movw	r26, r24
    45c2:	cb 01       	movw	r24, r22
    45c4:	f8 01       	movw	r30, r16
    45c6:	80 83       	st	Z, r24
    45c8:	91 83       	std	Z+1, r25	; 0x01
    45ca:	a2 83       	std	Z+2, r26	; 0x02
    45cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45ce:	fe 01       	movw	r30, r28
    45d0:	e5 5a       	subi	r30, 0xA5	; 165
    45d2:	ff 4f       	sbci	r31, 0xFF	; 255
    45d4:	60 81       	ld	r22, Z
    45d6:	71 81       	ldd	r23, Z+1	; 0x01
    45d8:	82 81       	ldd	r24, Z+2	; 0x02
    45da:	93 81       	ldd	r25, Z+3	; 0x03
    45dc:	20 e0       	ldi	r18, 0x00	; 0
    45de:	30 e0       	ldi	r19, 0x00	; 0
    45e0:	40 e8       	ldi	r20, 0x80	; 128
    45e2:	5f e3       	ldi	r21, 0x3F	; 63
    45e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    45e8:	88 23       	and	r24, r24
    45ea:	44 f4       	brge	.+16     	; 0x45fc <LED_voidFLASH+0x21b2>
		__ticks = 1;
    45ec:	fe 01       	movw	r30, r28
    45ee:	e7 5a       	subi	r30, 0xA7	; 167
    45f0:	ff 4f       	sbci	r31, 0xFF	; 255
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	91 83       	std	Z+1, r25	; 0x01
    45f8:	80 83       	st	Z, r24
    45fa:	64 c0       	rjmp	.+200    	; 0x46c4 <LED_voidFLASH+0x227a>
	else if (__tmp > 65535)
    45fc:	fe 01       	movw	r30, r28
    45fe:	e5 5a       	subi	r30, 0xA5	; 165
    4600:	ff 4f       	sbci	r31, 0xFF	; 255
    4602:	60 81       	ld	r22, Z
    4604:	71 81       	ldd	r23, Z+1	; 0x01
    4606:	82 81       	ldd	r24, Z+2	; 0x02
    4608:	93 81       	ldd	r25, Z+3	; 0x03
    460a:	20 e0       	ldi	r18, 0x00	; 0
    460c:	3f ef       	ldi	r19, 0xFF	; 255
    460e:	4f e7       	ldi	r20, 0x7F	; 127
    4610:	57 e4       	ldi	r21, 0x47	; 71
    4612:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4616:	18 16       	cp	r1, r24
    4618:	0c f0       	brlt	.+2      	; 0x461c <LED_voidFLASH+0x21d2>
    461a:	43 c0       	rjmp	.+134    	; 0x46a2 <LED_voidFLASH+0x2258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    461c:	fe 01       	movw	r30, r28
    461e:	e1 5a       	subi	r30, 0xA1	; 161
    4620:	ff 4f       	sbci	r31, 0xFF	; 255
    4622:	60 81       	ld	r22, Z
    4624:	71 81       	ldd	r23, Z+1	; 0x01
    4626:	82 81       	ldd	r24, Z+2	; 0x02
    4628:	93 81       	ldd	r25, Z+3	; 0x03
    462a:	20 e0       	ldi	r18, 0x00	; 0
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	40 e2       	ldi	r20, 0x20	; 32
    4630:	51 e4       	ldi	r21, 0x41	; 65
    4632:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4636:	dc 01       	movw	r26, r24
    4638:	cb 01       	movw	r24, r22
    463a:	8e 01       	movw	r16, r28
    463c:	07 5a       	subi	r16, 0xA7	; 167
    463e:	1f 4f       	sbci	r17, 0xFF	; 255
    4640:	bc 01       	movw	r22, r24
    4642:	cd 01       	movw	r24, r26
    4644:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4648:	dc 01       	movw	r26, r24
    464a:	cb 01       	movw	r24, r22
    464c:	f8 01       	movw	r30, r16
    464e:	91 83       	std	Z+1, r25	; 0x01
    4650:	80 83       	st	Z, r24
    4652:	1f c0       	rjmp	.+62     	; 0x4692 <LED_voidFLASH+0x2248>
    4654:	fe 01       	movw	r30, r28
    4656:	e9 5a       	subi	r30, 0xA9	; 169
    4658:	ff 4f       	sbci	r31, 0xFF	; 255
    465a:	80 e9       	ldi	r24, 0x90	; 144
    465c:	91 e0       	ldi	r25, 0x01	; 1
    465e:	91 83       	std	Z+1, r25	; 0x01
    4660:	80 83       	st	Z, r24
    4662:	fe 01       	movw	r30, r28
    4664:	e9 5a       	subi	r30, 0xA9	; 169
    4666:	ff 4f       	sbci	r31, 0xFF	; 255
    4668:	80 81       	ld	r24, Z
    466a:	91 81       	ldd	r25, Z+1	; 0x01
    466c:	01 97       	sbiw	r24, 0x01	; 1
    466e:	f1 f7       	brne	.-4      	; 0x466c <LED_voidFLASH+0x2222>
    4670:	fe 01       	movw	r30, r28
    4672:	e9 5a       	subi	r30, 0xA9	; 169
    4674:	ff 4f       	sbci	r31, 0xFF	; 255
    4676:	91 83       	std	Z+1, r25	; 0x01
    4678:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    467a:	de 01       	movw	r26, r28
    467c:	a7 5a       	subi	r26, 0xA7	; 167
    467e:	bf 4f       	sbci	r27, 0xFF	; 255
    4680:	fe 01       	movw	r30, r28
    4682:	e7 5a       	subi	r30, 0xA7	; 167
    4684:	ff 4f       	sbci	r31, 0xFF	; 255
    4686:	80 81       	ld	r24, Z
    4688:	91 81       	ldd	r25, Z+1	; 0x01
    468a:	01 97       	sbiw	r24, 0x01	; 1
    468c:	11 96       	adiw	r26, 0x01	; 1
    468e:	9c 93       	st	X, r25
    4690:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4692:	fe 01       	movw	r30, r28
    4694:	e7 5a       	subi	r30, 0xA7	; 167
    4696:	ff 4f       	sbci	r31, 0xFF	; 255
    4698:	80 81       	ld	r24, Z
    469a:	91 81       	ldd	r25, Z+1	; 0x01
    469c:	00 97       	sbiw	r24, 0x00	; 0
    469e:	d1 f6       	brne	.-76     	; 0x4654 <LED_voidFLASH+0x220a>
    46a0:	27 c0       	rjmp	.+78     	; 0x46f0 <LED_voidFLASH+0x22a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46a2:	8e 01       	movw	r16, r28
    46a4:	07 5a       	subi	r16, 0xA7	; 167
    46a6:	1f 4f       	sbci	r17, 0xFF	; 255
    46a8:	fe 01       	movw	r30, r28
    46aa:	e5 5a       	subi	r30, 0xA5	; 165
    46ac:	ff 4f       	sbci	r31, 0xFF	; 255
    46ae:	60 81       	ld	r22, Z
    46b0:	71 81       	ldd	r23, Z+1	; 0x01
    46b2:	82 81       	ldd	r24, Z+2	; 0x02
    46b4:	93 81       	ldd	r25, Z+3	; 0x03
    46b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    46ba:	dc 01       	movw	r26, r24
    46bc:	cb 01       	movw	r24, r22
    46be:	f8 01       	movw	r30, r16
    46c0:	91 83       	std	Z+1, r25	; 0x01
    46c2:	80 83       	st	Z, r24
    46c4:	de 01       	movw	r26, r28
    46c6:	ab 5a       	subi	r26, 0xAB	; 171
    46c8:	bf 4f       	sbci	r27, 0xFF	; 255
    46ca:	fe 01       	movw	r30, r28
    46cc:	e7 5a       	subi	r30, 0xA7	; 167
    46ce:	ff 4f       	sbci	r31, 0xFF	; 255
    46d0:	80 81       	ld	r24, Z
    46d2:	91 81       	ldd	r25, Z+1	; 0x01
    46d4:	8d 93       	st	X+, r24
    46d6:	9c 93       	st	X, r25
    46d8:	fe 01       	movw	r30, r28
    46da:	eb 5a       	subi	r30, 0xAB	; 171
    46dc:	ff 4f       	sbci	r31, 0xFF	; 255
    46de:	80 81       	ld	r24, Z
    46e0:	91 81       	ldd	r25, Z+1	; 0x01
    46e2:	01 97       	sbiw	r24, 0x01	; 1
    46e4:	f1 f7       	brne	.-4      	; 0x46e2 <LED_voidFLASH+0x2298>
    46e6:	fe 01       	movw	r30, r28
    46e8:	eb 5a       	subi	r30, 0xAB	; 171
    46ea:	ff 4f       	sbci	r31, 0xFF	; 255
    46ec:	91 83       	std	Z+1, r25	; 0x01
    46ee:	80 83       	st	Z, r24
			_delay_ms(100);
			LED_voidLedOn(LED2);
    46f0:	82 e0       	ldi	r24, 0x02	; 2
    46f2:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    46f6:	fe 01       	movw	r30, r28
    46f8:	ef 5a       	subi	r30, 0xAF	; 175
    46fa:	ff 4f       	sbci	r31, 0xFF	; 255
    46fc:	80 e0       	ldi	r24, 0x00	; 0
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	aa ef       	ldi	r26, 0xFA	; 250
    4702:	b3 e4       	ldi	r27, 0x43	; 67
    4704:	80 83       	st	Z, r24
    4706:	91 83       	std	Z+1, r25	; 0x01
    4708:	a2 83       	std	Z+2, r26	; 0x02
    470a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    470c:	8e 01       	movw	r16, r28
    470e:	03 5b       	subi	r16, 0xB3	; 179
    4710:	1f 4f       	sbci	r17, 0xFF	; 255
    4712:	fe 01       	movw	r30, r28
    4714:	ef 5a       	subi	r30, 0xAF	; 175
    4716:	ff 4f       	sbci	r31, 0xFF	; 255
    4718:	60 81       	ld	r22, Z
    471a:	71 81       	ldd	r23, Z+1	; 0x01
    471c:	82 81       	ldd	r24, Z+2	; 0x02
    471e:	93 81       	ldd	r25, Z+3	; 0x03
    4720:	20 e0       	ldi	r18, 0x00	; 0
    4722:	30 e0       	ldi	r19, 0x00	; 0
    4724:	4a e7       	ldi	r20, 0x7A	; 122
    4726:	55 e4       	ldi	r21, 0x45	; 69
    4728:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    472c:	dc 01       	movw	r26, r24
    472e:	cb 01       	movw	r24, r22
    4730:	f8 01       	movw	r30, r16
    4732:	80 83       	st	Z, r24
    4734:	91 83       	std	Z+1, r25	; 0x01
    4736:	a2 83       	std	Z+2, r26	; 0x02
    4738:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    473a:	fe 01       	movw	r30, r28
    473c:	e3 5b       	subi	r30, 0xB3	; 179
    473e:	ff 4f       	sbci	r31, 0xFF	; 255
    4740:	60 81       	ld	r22, Z
    4742:	71 81       	ldd	r23, Z+1	; 0x01
    4744:	82 81       	ldd	r24, Z+2	; 0x02
    4746:	93 81       	ldd	r25, Z+3	; 0x03
    4748:	20 e0       	ldi	r18, 0x00	; 0
    474a:	30 e0       	ldi	r19, 0x00	; 0
    474c:	40 e8       	ldi	r20, 0x80	; 128
    474e:	5f e3       	ldi	r21, 0x3F	; 63
    4750:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4754:	88 23       	and	r24, r24
    4756:	44 f4       	brge	.+16     	; 0x4768 <LED_voidFLASH+0x231e>
		__ticks = 1;
    4758:	fe 01       	movw	r30, r28
    475a:	e5 5b       	subi	r30, 0xB5	; 181
    475c:	ff 4f       	sbci	r31, 0xFF	; 255
    475e:	81 e0       	ldi	r24, 0x01	; 1
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	91 83       	std	Z+1, r25	; 0x01
    4764:	80 83       	st	Z, r24
    4766:	64 c0       	rjmp	.+200    	; 0x4830 <LED_voidFLASH+0x23e6>
	else if (__tmp > 65535)
    4768:	fe 01       	movw	r30, r28
    476a:	e3 5b       	subi	r30, 0xB3	; 179
    476c:	ff 4f       	sbci	r31, 0xFF	; 255
    476e:	60 81       	ld	r22, Z
    4770:	71 81       	ldd	r23, Z+1	; 0x01
    4772:	82 81       	ldd	r24, Z+2	; 0x02
    4774:	93 81       	ldd	r25, Z+3	; 0x03
    4776:	20 e0       	ldi	r18, 0x00	; 0
    4778:	3f ef       	ldi	r19, 0xFF	; 255
    477a:	4f e7       	ldi	r20, 0x7F	; 127
    477c:	57 e4       	ldi	r21, 0x47	; 71
    477e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4782:	18 16       	cp	r1, r24
    4784:	0c f0       	brlt	.+2      	; 0x4788 <LED_voidFLASH+0x233e>
    4786:	43 c0       	rjmp	.+134    	; 0x480e <LED_voidFLASH+0x23c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4788:	fe 01       	movw	r30, r28
    478a:	ef 5a       	subi	r30, 0xAF	; 175
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	60 81       	ld	r22, Z
    4790:	71 81       	ldd	r23, Z+1	; 0x01
    4792:	82 81       	ldd	r24, Z+2	; 0x02
    4794:	93 81       	ldd	r25, Z+3	; 0x03
    4796:	20 e0       	ldi	r18, 0x00	; 0
    4798:	30 e0       	ldi	r19, 0x00	; 0
    479a:	40 e2       	ldi	r20, 0x20	; 32
    479c:	51 e4       	ldi	r21, 0x41	; 65
    479e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47a2:	dc 01       	movw	r26, r24
    47a4:	cb 01       	movw	r24, r22
    47a6:	8e 01       	movw	r16, r28
    47a8:	05 5b       	subi	r16, 0xB5	; 181
    47aa:	1f 4f       	sbci	r17, 0xFF	; 255
    47ac:	bc 01       	movw	r22, r24
    47ae:	cd 01       	movw	r24, r26
    47b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    47b4:	dc 01       	movw	r26, r24
    47b6:	cb 01       	movw	r24, r22
    47b8:	f8 01       	movw	r30, r16
    47ba:	91 83       	std	Z+1, r25	; 0x01
    47bc:	80 83       	st	Z, r24
    47be:	1f c0       	rjmp	.+62     	; 0x47fe <LED_voidFLASH+0x23b4>
    47c0:	fe 01       	movw	r30, r28
    47c2:	e7 5b       	subi	r30, 0xB7	; 183
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	80 e9       	ldi	r24, 0x90	; 144
    47c8:	91 e0       	ldi	r25, 0x01	; 1
    47ca:	91 83       	std	Z+1, r25	; 0x01
    47cc:	80 83       	st	Z, r24
    47ce:	fe 01       	movw	r30, r28
    47d0:	e7 5b       	subi	r30, 0xB7	; 183
    47d2:	ff 4f       	sbci	r31, 0xFF	; 255
    47d4:	80 81       	ld	r24, Z
    47d6:	91 81       	ldd	r25, Z+1	; 0x01
    47d8:	01 97       	sbiw	r24, 0x01	; 1
    47da:	f1 f7       	brne	.-4      	; 0x47d8 <LED_voidFLASH+0x238e>
    47dc:	fe 01       	movw	r30, r28
    47de:	e7 5b       	subi	r30, 0xB7	; 183
    47e0:	ff 4f       	sbci	r31, 0xFF	; 255
    47e2:	91 83       	std	Z+1, r25	; 0x01
    47e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47e6:	de 01       	movw	r26, r28
    47e8:	a5 5b       	subi	r26, 0xB5	; 181
    47ea:	bf 4f       	sbci	r27, 0xFF	; 255
    47ec:	fe 01       	movw	r30, r28
    47ee:	e5 5b       	subi	r30, 0xB5	; 181
    47f0:	ff 4f       	sbci	r31, 0xFF	; 255
    47f2:	80 81       	ld	r24, Z
    47f4:	91 81       	ldd	r25, Z+1	; 0x01
    47f6:	01 97       	sbiw	r24, 0x01	; 1
    47f8:	11 96       	adiw	r26, 0x01	; 1
    47fa:	9c 93       	st	X, r25
    47fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47fe:	fe 01       	movw	r30, r28
    4800:	e5 5b       	subi	r30, 0xB5	; 181
    4802:	ff 4f       	sbci	r31, 0xFF	; 255
    4804:	80 81       	ld	r24, Z
    4806:	91 81       	ldd	r25, Z+1	; 0x01
    4808:	00 97       	sbiw	r24, 0x00	; 0
    480a:	d1 f6       	brne	.-76     	; 0x47c0 <LED_voidFLASH+0x2376>
    480c:	27 c0       	rjmp	.+78     	; 0x485c <LED_voidFLASH+0x2412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    480e:	8e 01       	movw	r16, r28
    4810:	05 5b       	subi	r16, 0xB5	; 181
    4812:	1f 4f       	sbci	r17, 0xFF	; 255
    4814:	fe 01       	movw	r30, r28
    4816:	e3 5b       	subi	r30, 0xB3	; 179
    4818:	ff 4f       	sbci	r31, 0xFF	; 255
    481a:	60 81       	ld	r22, Z
    481c:	71 81       	ldd	r23, Z+1	; 0x01
    481e:	82 81       	ldd	r24, Z+2	; 0x02
    4820:	93 81       	ldd	r25, Z+3	; 0x03
    4822:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4826:	dc 01       	movw	r26, r24
    4828:	cb 01       	movw	r24, r22
    482a:	f8 01       	movw	r30, r16
    482c:	91 83       	std	Z+1, r25	; 0x01
    482e:	80 83       	st	Z, r24
    4830:	de 01       	movw	r26, r28
    4832:	a9 5b       	subi	r26, 0xB9	; 185
    4834:	bf 4f       	sbci	r27, 0xFF	; 255
    4836:	fe 01       	movw	r30, r28
    4838:	e5 5b       	subi	r30, 0xB5	; 181
    483a:	ff 4f       	sbci	r31, 0xFF	; 255
    483c:	80 81       	ld	r24, Z
    483e:	91 81       	ldd	r25, Z+1	; 0x01
    4840:	8d 93       	st	X+, r24
    4842:	9c 93       	st	X, r25
    4844:	fe 01       	movw	r30, r28
    4846:	e9 5b       	subi	r30, 0xB9	; 185
    4848:	ff 4f       	sbci	r31, 0xFF	; 255
    484a:	80 81       	ld	r24, Z
    484c:	91 81       	ldd	r25, Z+1	; 0x01
    484e:	01 97       	sbiw	r24, 0x01	; 1
    4850:	f1 f7       	brne	.-4      	; 0x484e <LED_voidFLASH+0x2404>
    4852:	fe 01       	movw	r30, r28
    4854:	e9 5b       	subi	r30, 0xB9	; 185
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	91 83       	std	Z+1, r25	; 0x01
    485a:	80 83       	st	Z, r24
			_delay_ms(500);
			LED_voidLedOff(LED2);
    485c:	82 e0       	ldi	r24, 0x02	; 2
    485e:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    4862:	fe 01       	movw	r30, r28
    4864:	ed 5b       	subi	r30, 0xBD	; 189
    4866:	ff 4f       	sbci	r31, 0xFF	; 255
    4868:	80 e0       	ldi	r24, 0x00	; 0
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	aa ef       	ldi	r26, 0xFA	; 250
    486e:	b3 e4       	ldi	r27, 0x43	; 67
    4870:	80 83       	st	Z, r24
    4872:	91 83       	std	Z+1, r25	; 0x01
    4874:	a2 83       	std	Z+2, r26	; 0x02
    4876:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4878:	8e 01       	movw	r16, r28
    487a:	01 5c       	subi	r16, 0xC1	; 193
    487c:	1f 4f       	sbci	r17, 0xFF	; 255
    487e:	fe 01       	movw	r30, r28
    4880:	ed 5b       	subi	r30, 0xBD	; 189
    4882:	ff 4f       	sbci	r31, 0xFF	; 255
    4884:	60 81       	ld	r22, Z
    4886:	71 81       	ldd	r23, Z+1	; 0x01
    4888:	82 81       	ldd	r24, Z+2	; 0x02
    488a:	93 81       	ldd	r25, Z+3	; 0x03
    488c:	20 e0       	ldi	r18, 0x00	; 0
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	4a e7       	ldi	r20, 0x7A	; 122
    4892:	55 e4       	ldi	r21, 0x45	; 69
    4894:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4898:	dc 01       	movw	r26, r24
    489a:	cb 01       	movw	r24, r22
    489c:	f8 01       	movw	r30, r16
    489e:	80 83       	st	Z, r24
    48a0:	91 83       	std	Z+1, r25	; 0x01
    48a2:	a2 83       	std	Z+2, r26	; 0x02
    48a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48a6:	fe 01       	movw	r30, r28
    48a8:	ff 96       	adiw	r30, 0x3f	; 63
    48aa:	60 81       	ld	r22, Z
    48ac:	71 81       	ldd	r23, Z+1	; 0x01
    48ae:	82 81       	ldd	r24, Z+2	; 0x02
    48b0:	93 81       	ldd	r25, Z+3	; 0x03
    48b2:	20 e0       	ldi	r18, 0x00	; 0
    48b4:	30 e0       	ldi	r19, 0x00	; 0
    48b6:	40 e8       	ldi	r20, 0x80	; 128
    48b8:	5f e3       	ldi	r21, 0x3F	; 63
    48ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    48be:	88 23       	and	r24, r24
    48c0:	2c f4       	brge	.+10     	; 0x48cc <LED_voidFLASH+0x2482>
		__ticks = 1;
    48c2:	81 e0       	ldi	r24, 0x01	; 1
    48c4:	90 e0       	ldi	r25, 0x00	; 0
    48c6:	9e af       	std	Y+62, r25	; 0x3e
    48c8:	8d af       	std	Y+61, r24	; 0x3d
    48ca:	46 c0       	rjmp	.+140    	; 0x4958 <LED_voidFLASH+0x250e>
	else if (__tmp > 65535)
    48cc:	fe 01       	movw	r30, r28
    48ce:	ff 96       	adiw	r30, 0x3f	; 63
    48d0:	60 81       	ld	r22, Z
    48d2:	71 81       	ldd	r23, Z+1	; 0x01
    48d4:	82 81       	ldd	r24, Z+2	; 0x02
    48d6:	93 81       	ldd	r25, Z+3	; 0x03
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	3f ef       	ldi	r19, 0xFF	; 255
    48dc:	4f e7       	ldi	r20, 0x7F	; 127
    48de:	57 e4       	ldi	r21, 0x47	; 71
    48e0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    48e4:	18 16       	cp	r1, r24
    48e6:	64 f5       	brge	.+88     	; 0x4940 <LED_voidFLASH+0x24f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48e8:	fe 01       	movw	r30, r28
    48ea:	ed 5b       	subi	r30, 0xBD	; 189
    48ec:	ff 4f       	sbci	r31, 0xFF	; 255
    48ee:	60 81       	ld	r22, Z
    48f0:	71 81       	ldd	r23, Z+1	; 0x01
    48f2:	82 81       	ldd	r24, Z+2	; 0x02
    48f4:	93 81       	ldd	r25, Z+3	; 0x03
    48f6:	20 e0       	ldi	r18, 0x00	; 0
    48f8:	30 e0       	ldi	r19, 0x00	; 0
    48fa:	40 e2       	ldi	r20, 0x20	; 32
    48fc:	51 e4       	ldi	r21, 0x41	; 65
    48fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4902:	dc 01       	movw	r26, r24
    4904:	cb 01       	movw	r24, r22
    4906:	bc 01       	movw	r22, r24
    4908:	cd 01       	movw	r24, r26
    490a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    490e:	dc 01       	movw	r26, r24
    4910:	cb 01       	movw	r24, r22
    4912:	9e af       	std	Y+62, r25	; 0x3e
    4914:	8d af       	std	Y+61, r24	; 0x3d
    4916:	0f c0       	rjmp	.+30     	; 0x4936 <LED_voidFLASH+0x24ec>
    4918:	80 e9       	ldi	r24, 0x90	; 144
    491a:	91 e0       	ldi	r25, 0x01	; 1
    491c:	9c af       	std	Y+60, r25	; 0x3c
    491e:	8b af       	std	Y+59, r24	; 0x3b
    4920:	8b ad       	ldd	r24, Y+59	; 0x3b
    4922:	9c ad       	ldd	r25, Y+60	; 0x3c
    4924:	01 97       	sbiw	r24, 0x01	; 1
    4926:	f1 f7       	brne	.-4      	; 0x4924 <LED_voidFLASH+0x24da>
    4928:	9c af       	std	Y+60, r25	; 0x3c
    492a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    492c:	8d ad       	ldd	r24, Y+61	; 0x3d
    492e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4930:	01 97       	sbiw	r24, 0x01	; 1
    4932:	9e af       	std	Y+62, r25	; 0x3e
    4934:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4936:	8d ad       	ldd	r24, Y+61	; 0x3d
    4938:	9e ad       	ldd	r25, Y+62	; 0x3e
    493a:	00 97       	sbiw	r24, 0x00	; 0
    493c:	69 f7       	brne	.-38     	; 0x4918 <LED_voidFLASH+0x24ce>
    493e:	16 c0       	rjmp	.+44     	; 0x496c <LED_voidFLASH+0x2522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4940:	fe 01       	movw	r30, r28
    4942:	ff 96       	adiw	r30, 0x3f	; 63
    4944:	60 81       	ld	r22, Z
    4946:	71 81       	ldd	r23, Z+1	; 0x01
    4948:	82 81       	ldd	r24, Z+2	; 0x02
    494a:	93 81       	ldd	r25, Z+3	; 0x03
    494c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4950:	dc 01       	movw	r26, r24
    4952:	cb 01       	movw	r24, r22
    4954:	9e af       	std	Y+62, r25	; 0x3e
    4956:	8d af       	std	Y+61, r24	; 0x3d
    4958:	8d ad       	ldd	r24, Y+61	; 0x3d
    495a:	9e ad       	ldd	r25, Y+62	; 0x3e
    495c:	9a af       	std	Y+58, r25	; 0x3a
    495e:	89 af       	std	Y+57, r24	; 0x39
    4960:	89 ad       	ldd	r24, Y+57	; 0x39
    4962:	9a ad       	ldd	r25, Y+58	; 0x3a
    4964:	01 97       	sbiw	r24, 0x01	; 1
    4966:	f1 f7       	brne	.-4      	; 0x4964 <LED_voidFLASH+0x251a>
    4968:	9a af       	std	Y+58, r25	; 0x3a
    496a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(500);
			LED_voidLedOn(LED2);
    496c:	82 e0       	ldi	r24, 0x02	; 2
    496e:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    4972:	80 e0       	ldi	r24, 0x00	; 0
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	a8 ec       	ldi	r26, 0xC8	; 200
    4978:	b2 e4       	ldi	r27, 0x42	; 66
    497a:	8d ab       	std	Y+53, r24	; 0x35
    497c:	9e ab       	std	Y+54, r25	; 0x36
    497e:	af ab       	std	Y+55, r26	; 0x37
    4980:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4982:	6d a9       	ldd	r22, Y+53	; 0x35
    4984:	7e a9       	ldd	r23, Y+54	; 0x36
    4986:	8f a9       	ldd	r24, Y+55	; 0x37
    4988:	98 ad       	ldd	r25, Y+56	; 0x38
    498a:	20 e0       	ldi	r18, 0x00	; 0
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	4a e7       	ldi	r20, 0x7A	; 122
    4990:	55 e4       	ldi	r21, 0x45	; 69
    4992:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4996:	dc 01       	movw	r26, r24
    4998:	cb 01       	movw	r24, r22
    499a:	89 ab       	std	Y+49, r24	; 0x31
    499c:	9a ab       	std	Y+50, r25	; 0x32
    499e:	ab ab       	std	Y+51, r26	; 0x33
    49a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    49a2:	69 a9       	ldd	r22, Y+49	; 0x31
    49a4:	7a a9       	ldd	r23, Y+50	; 0x32
    49a6:	8b a9       	ldd	r24, Y+51	; 0x33
    49a8:	9c a9       	ldd	r25, Y+52	; 0x34
    49aa:	20 e0       	ldi	r18, 0x00	; 0
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	40 e8       	ldi	r20, 0x80	; 128
    49b0:	5f e3       	ldi	r21, 0x3F	; 63
    49b2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    49b6:	88 23       	and	r24, r24
    49b8:	2c f4       	brge	.+10     	; 0x49c4 <LED_voidFLASH+0x257a>
		__ticks = 1;
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	98 ab       	std	Y+48, r25	; 0x30
    49c0:	8f a7       	std	Y+47, r24	; 0x2f
    49c2:	3f c0       	rjmp	.+126    	; 0x4a42 <LED_voidFLASH+0x25f8>
	else if (__tmp > 65535)
    49c4:	69 a9       	ldd	r22, Y+49	; 0x31
    49c6:	7a a9       	ldd	r23, Y+50	; 0x32
    49c8:	8b a9       	ldd	r24, Y+51	; 0x33
    49ca:	9c a9       	ldd	r25, Y+52	; 0x34
    49cc:	20 e0       	ldi	r18, 0x00	; 0
    49ce:	3f ef       	ldi	r19, 0xFF	; 255
    49d0:	4f e7       	ldi	r20, 0x7F	; 127
    49d2:	57 e4       	ldi	r21, 0x47	; 71
    49d4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    49d8:	18 16       	cp	r1, r24
    49da:	4c f5       	brge	.+82     	; 0x4a2e <LED_voidFLASH+0x25e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49dc:	6d a9       	ldd	r22, Y+53	; 0x35
    49de:	7e a9       	ldd	r23, Y+54	; 0x36
    49e0:	8f a9       	ldd	r24, Y+55	; 0x37
    49e2:	98 ad       	ldd	r25, Y+56	; 0x38
    49e4:	20 e0       	ldi	r18, 0x00	; 0
    49e6:	30 e0       	ldi	r19, 0x00	; 0
    49e8:	40 e2       	ldi	r20, 0x20	; 32
    49ea:	51 e4       	ldi	r21, 0x41	; 65
    49ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    49f0:	dc 01       	movw	r26, r24
    49f2:	cb 01       	movw	r24, r22
    49f4:	bc 01       	movw	r22, r24
    49f6:	cd 01       	movw	r24, r26
    49f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    49fc:	dc 01       	movw	r26, r24
    49fe:	cb 01       	movw	r24, r22
    4a00:	98 ab       	std	Y+48, r25	; 0x30
    4a02:	8f a7       	std	Y+47, r24	; 0x2f
    4a04:	0f c0       	rjmp	.+30     	; 0x4a24 <LED_voidFLASH+0x25da>
    4a06:	80 e9       	ldi	r24, 0x90	; 144
    4a08:	91 e0       	ldi	r25, 0x01	; 1
    4a0a:	9e a7       	std	Y+46, r25	; 0x2e
    4a0c:	8d a7       	std	Y+45, r24	; 0x2d
    4a0e:	8d a5       	ldd	r24, Y+45	; 0x2d
    4a10:	9e a5       	ldd	r25, Y+46	; 0x2e
    4a12:	01 97       	sbiw	r24, 0x01	; 1
    4a14:	f1 f7       	brne	.-4      	; 0x4a12 <LED_voidFLASH+0x25c8>
    4a16:	9e a7       	std	Y+46, r25	; 0x2e
    4a18:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a1c:	98 a9       	ldd	r25, Y+48	; 0x30
    4a1e:	01 97       	sbiw	r24, 0x01	; 1
    4a20:	98 ab       	std	Y+48, r25	; 0x30
    4a22:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a26:	98 a9       	ldd	r25, Y+48	; 0x30
    4a28:	00 97       	sbiw	r24, 0x00	; 0
    4a2a:	69 f7       	brne	.-38     	; 0x4a06 <LED_voidFLASH+0x25bc>
    4a2c:	14 c0       	rjmp	.+40     	; 0x4a56 <LED_voidFLASH+0x260c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a2e:	69 a9       	ldd	r22, Y+49	; 0x31
    4a30:	7a a9       	ldd	r23, Y+50	; 0x32
    4a32:	8b a9       	ldd	r24, Y+51	; 0x33
    4a34:	9c a9       	ldd	r25, Y+52	; 0x34
    4a36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a3a:	dc 01       	movw	r26, r24
    4a3c:	cb 01       	movw	r24, r22
    4a3e:	98 ab       	std	Y+48, r25	; 0x30
    4a40:	8f a7       	std	Y+47, r24	; 0x2f
    4a42:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a44:	98 a9       	ldd	r25, Y+48	; 0x30
    4a46:	9c a7       	std	Y+44, r25	; 0x2c
    4a48:	8b a7       	std	Y+43, r24	; 0x2b
    4a4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a4e:	01 97       	sbiw	r24, 0x01	; 1
    4a50:	f1 f7       	brne	.-4      	; 0x4a4e <LED_voidFLASH+0x2604>
    4a52:	9c a7       	std	Y+44, r25	; 0x2c
    4a54:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(100);
			LED_voidLedOff(LED2);
    4a56:	82 e0       	ldi	r24, 0x02	; 2
    4a58:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    4a5c:	80 e0       	ldi	r24, 0x00	; 0
    4a5e:	90 e0       	ldi	r25, 0x00	; 0
    4a60:	a8 ec       	ldi	r26, 0xC8	; 200
    4a62:	b2 e4       	ldi	r27, 0x42	; 66
    4a64:	8f a3       	std	Y+39, r24	; 0x27
    4a66:	98 a7       	std	Y+40, r25	; 0x28
    4a68:	a9 a7       	std	Y+41, r26	; 0x29
    4a6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a6c:	6f a1       	ldd	r22, Y+39	; 0x27
    4a6e:	78 a5       	ldd	r23, Y+40	; 0x28
    4a70:	89 a5       	ldd	r24, Y+41	; 0x29
    4a72:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a74:	20 e0       	ldi	r18, 0x00	; 0
    4a76:	30 e0       	ldi	r19, 0x00	; 0
    4a78:	4a e7       	ldi	r20, 0x7A	; 122
    4a7a:	55 e4       	ldi	r21, 0x45	; 69
    4a7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a80:	dc 01       	movw	r26, r24
    4a82:	cb 01       	movw	r24, r22
    4a84:	8b a3       	std	Y+35, r24	; 0x23
    4a86:	9c a3       	std	Y+36, r25	; 0x24
    4a88:	ad a3       	std	Y+37, r26	; 0x25
    4a8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    4a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    4a90:	8d a1       	ldd	r24, Y+37	; 0x25
    4a92:	9e a1       	ldd	r25, Y+38	; 0x26
    4a94:	20 e0       	ldi	r18, 0x00	; 0
    4a96:	30 e0       	ldi	r19, 0x00	; 0
    4a98:	40 e8       	ldi	r20, 0x80	; 128
    4a9a:	5f e3       	ldi	r21, 0x3F	; 63
    4a9c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4aa0:	88 23       	and	r24, r24
    4aa2:	2c f4       	brge	.+10     	; 0x4aae <LED_voidFLASH+0x2664>
		__ticks = 1;
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	90 e0       	ldi	r25, 0x00	; 0
    4aa8:	9a a3       	std	Y+34, r25	; 0x22
    4aaa:	89 a3       	std	Y+33, r24	; 0x21
    4aac:	3f c0       	rjmp	.+126    	; 0x4b2c <LED_voidFLASH+0x26e2>
	else if (__tmp > 65535)
    4aae:	6b a1       	ldd	r22, Y+35	; 0x23
    4ab0:	7c a1       	ldd	r23, Y+36	; 0x24
    4ab2:	8d a1       	ldd	r24, Y+37	; 0x25
    4ab4:	9e a1       	ldd	r25, Y+38	; 0x26
    4ab6:	20 e0       	ldi	r18, 0x00	; 0
    4ab8:	3f ef       	ldi	r19, 0xFF	; 255
    4aba:	4f e7       	ldi	r20, 0x7F	; 127
    4abc:	57 e4       	ldi	r21, 0x47	; 71
    4abe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4ac2:	18 16       	cp	r1, r24
    4ac4:	4c f5       	brge	.+82     	; 0x4b18 <LED_voidFLASH+0x26ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ac6:	6f a1       	ldd	r22, Y+39	; 0x27
    4ac8:	78 a5       	ldd	r23, Y+40	; 0x28
    4aca:	89 a5       	ldd	r24, Y+41	; 0x29
    4acc:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	40 e2       	ldi	r20, 0x20	; 32
    4ad4:	51 e4       	ldi	r21, 0x41	; 65
    4ad6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ada:	dc 01       	movw	r26, r24
    4adc:	cb 01       	movw	r24, r22
    4ade:	bc 01       	movw	r22, r24
    4ae0:	cd 01       	movw	r24, r26
    4ae2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	cb 01       	movw	r24, r22
    4aea:	9a a3       	std	Y+34, r25	; 0x22
    4aec:	89 a3       	std	Y+33, r24	; 0x21
    4aee:	0f c0       	rjmp	.+30     	; 0x4b0e <LED_voidFLASH+0x26c4>
    4af0:	80 e9       	ldi	r24, 0x90	; 144
    4af2:	91 e0       	ldi	r25, 0x01	; 1
    4af4:	98 a3       	std	Y+32, r25	; 0x20
    4af6:	8f 8f       	std	Y+31, r24	; 0x1f
    4af8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4afa:	98 a1       	ldd	r25, Y+32	; 0x20
    4afc:	01 97       	sbiw	r24, 0x01	; 1
    4afe:	f1 f7       	brne	.-4      	; 0x4afc <LED_voidFLASH+0x26b2>
    4b00:	98 a3       	std	Y+32, r25	; 0x20
    4b02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b04:	89 a1       	ldd	r24, Y+33	; 0x21
    4b06:	9a a1       	ldd	r25, Y+34	; 0x22
    4b08:	01 97       	sbiw	r24, 0x01	; 1
    4b0a:	9a a3       	std	Y+34, r25	; 0x22
    4b0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    4b10:	9a a1       	ldd	r25, Y+34	; 0x22
    4b12:	00 97       	sbiw	r24, 0x00	; 0
    4b14:	69 f7       	brne	.-38     	; 0x4af0 <LED_voidFLASH+0x26a6>
    4b16:	14 c0       	rjmp	.+40     	; 0x4b40 <LED_voidFLASH+0x26f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b18:	6b a1       	ldd	r22, Y+35	; 0x23
    4b1a:	7c a1       	ldd	r23, Y+36	; 0x24
    4b1c:	8d a1       	ldd	r24, Y+37	; 0x25
    4b1e:	9e a1       	ldd	r25, Y+38	; 0x26
    4b20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4b24:	dc 01       	movw	r26, r24
    4b26:	cb 01       	movw	r24, r22
    4b28:	9a a3       	std	Y+34, r25	; 0x22
    4b2a:	89 a3       	std	Y+33, r24	; 0x21
    4b2c:	89 a1       	ldd	r24, Y+33	; 0x21
    4b2e:	9a a1       	ldd	r25, Y+34	; 0x22
    4b30:	9e 8f       	std	Y+30, r25	; 0x1e
    4b32:	8d 8f       	std	Y+29, r24	; 0x1d
    4b34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b38:	01 97       	sbiw	r24, 0x01	; 1
    4b3a:	f1 f7       	brne	.-4      	; 0x4b38 <LED_voidFLASH+0x26ee>
    4b3c:	9e 8f       	std	Y+30, r25	; 0x1e
    4b3e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			LED_voidLedOn(LED2);
    4b40:	82 e0       	ldi	r24, 0x02	; 2
    4b42:	0e 94 95 11 	call	0x232a	; 0x232a <LED_voidLedOn>
    4b46:	80 e0       	ldi	r24, 0x00	; 0
    4b48:	90 e0       	ldi	r25, 0x00	; 0
    4b4a:	a8 e4       	ldi	r26, 0x48	; 72
    4b4c:	b3 e4       	ldi	r27, 0x43	; 67
    4b4e:	89 8f       	std	Y+25, r24	; 0x19
    4b50:	9a 8f       	std	Y+26, r25	; 0x1a
    4b52:	ab 8f       	std	Y+27, r26	; 0x1b
    4b54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b56:	69 8d       	ldd	r22, Y+25	; 0x19
    4b58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b5e:	20 e0       	ldi	r18, 0x00	; 0
    4b60:	30 e0       	ldi	r19, 0x00	; 0
    4b62:	4a e7       	ldi	r20, 0x7A	; 122
    4b64:	55 e4       	ldi	r21, 0x45	; 69
    4b66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4b6a:	dc 01       	movw	r26, r24
    4b6c:	cb 01       	movw	r24, r22
    4b6e:	8d 8b       	std	Y+21, r24	; 0x15
    4b70:	9e 8b       	std	Y+22, r25	; 0x16
    4b72:	af 8b       	std	Y+23, r26	; 0x17
    4b74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b76:	6d 89       	ldd	r22, Y+21	; 0x15
    4b78:	7e 89       	ldd	r23, Y+22	; 0x16
    4b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    4b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    4b7e:	20 e0       	ldi	r18, 0x00	; 0
    4b80:	30 e0       	ldi	r19, 0x00	; 0
    4b82:	40 e8       	ldi	r20, 0x80	; 128
    4b84:	5f e3       	ldi	r21, 0x3F	; 63
    4b86:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4b8a:	88 23       	and	r24, r24
    4b8c:	2c f4       	brge	.+10     	; 0x4b98 <LED_voidFLASH+0x274e>
		__ticks = 1;
    4b8e:	81 e0       	ldi	r24, 0x01	; 1
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	9c 8b       	std	Y+20, r25	; 0x14
    4b94:	8b 8b       	std	Y+19, r24	; 0x13
    4b96:	3f c0       	rjmp	.+126    	; 0x4c16 <LED_voidFLASH+0x27cc>
	else if (__tmp > 65535)
    4b98:	6d 89       	ldd	r22, Y+21	; 0x15
    4b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    4b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    4b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    4ba0:	20 e0       	ldi	r18, 0x00	; 0
    4ba2:	3f ef       	ldi	r19, 0xFF	; 255
    4ba4:	4f e7       	ldi	r20, 0x7F	; 127
    4ba6:	57 e4       	ldi	r21, 0x47	; 71
    4ba8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4bac:	18 16       	cp	r1, r24
    4bae:	4c f5       	brge	.+82     	; 0x4c02 <LED_voidFLASH+0x27b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bb0:	69 8d       	ldd	r22, Y+25	; 0x19
    4bb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bb8:	20 e0       	ldi	r18, 0x00	; 0
    4bba:	30 e0       	ldi	r19, 0x00	; 0
    4bbc:	40 e2       	ldi	r20, 0x20	; 32
    4bbe:	51 e4       	ldi	r21, 0x41	; 65
    4bc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4bc4:	dc 01       	movw	r26, r24
    4bc6:	cb 01       	movw	r24, r22
    4bc8:	bc 01       	movw	r22, r24
    4bca:	cd 01       	movw	r24, r26
    4bcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4bd0:	dc 01       	movw	r26, r24
    4bd2:	cb 01       	movw	r24, r22
    4bd4:	9c 8b       	std	Y+20, r25	; 0x14
    4bd6:	8b 8b       	std	Y+19, r24	; 0x13
    4bd8:	0f c0       	rjmp	.+30     	; 0x4bf8 <LED_voidFLASH+0x27ae>
    4bda:	80 e9       	ldi	r24, 0x90	; 144
    4bdc:	91 e0       	ldi	r25, 0x01	; 1
    4bde:	9a 8b       	std	Y+18, r25	; 0x12
    4be0:	89 8b       	std	Y+17, r24	; 0x11
    4be2:	89 89       	ldd	r24, Y+17	; 0x11
    4be4:	9a 89       	ldd	r25, Y+18	; 0x12
    4be6:	01 97       	sbiw	r24, 0x01	; 1
    4be8:	f1 f7       	brne	.-4      	; 0x4be6 <LED_voidFLASH+0x279c>
    4bea:	9a 8b       	std	Y+18, r25	; 0x12
    4bec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bee:	8b 89       	ldd	r24, Y+19	; 0x13
    4bf0:	9c 89       	ldd	r25, Y+20	; 0x14
    4bf2:	01 97       	sbiw	r24, 0x01	; 1
    4bf4:	9c 8b       	std	Y+20, r25	; 0x14
    4bf6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    4bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    4bfc:	00 97       	sbiw	r24, 0x00	; 0
    4bfe:	69 f7       	brne	.-38     	; 0x4bda <LED_voidFLASH+0x2790>
    4c00:	14 c0       	rjmp	.+40     	; 0x4c2a <LED_voidFLASH+0x27e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c02:	6d 89       	ldd	r22, Y+21	; 0x15
    4c04:	7e 89       	ldd	r23, Y+22	; 0x16
    4c06:	8f 89       	ldd	r24, Y+23	; 0x17
    4c08:	98 8d       	ldd	r25, Y+24	; 0x18
    4c0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c0e:	dc 01       	movw	r26, r24
    4c10:	cb 01       	movw	r24, r22
    4c12:	9c 8b       	std	Y+20, r25	; 0x14
    4c14:	8b 8b       	std	Y+19, r24	; 0x13
    4c16:	8b 89       	ldd	r24, Y+19	; 0x13
    4c18:	9c 89       	ldd	r25, Y+20	; 0x14
    4c1a:	98 8b       	std	Y+16, r25	; 0x10
    4c1c:	8f 87       	std	Y+15, r24	; 0x0f
    4c1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c20:	98 89       	ldd	r25, Y+16	; 0x10
    4c22:	01 97       	sbiw	r24, 0x01	; 1
    4c24:	f1 f7       	brne	.-4      	; 0x4c22 <LED_voidFLASH+0x27d8>
    4c26:	98 8b       	std	Y+16, r25	; 0x10
    4c28:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			LED_voidLedOff(LED2);
    4c2a:	82 e0       	ldi	r24, 0x02	; 2
    4c2c:	0e 94 c6 11 	call	0x238c	; 0x238c <LED_voidLedOff>
    4c30:	80 e0       	ldi	r24, 0x00	; 0
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	a8 e4       	ldi	r26, 0x48	; 72
    4c36:	b3 e4       	ldi	r27, 0x43	; 67
    4c38:	8b 87       	std	Y+11, r24	; 0x0b
    4c3a:	9c 87       	std	Y+12, r25	; 0x0c
    4c3c:	ad 87       	std	Y+13, r26	; 0x0d
    4c3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c48:	20 e0       	ldi	r18, 0x00	; 0
    4c4a:	30 e0       	ldi	r19, 0x00	; 0
    4c4c:	4a e7       	ldi	r20, 0x7A	; 122
    4c4e:	55 e4       	ldi	r21, 0x45	; 69
    4c50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c54:	dc 01       	movw	r26, r24
    4c56:	cb 01       	movw	r24, r22
    4c58:	8f 83       	std	Y+7, r24	; 0x07
    4c5a:	98 87       	std	Y+8, r25	; 0x08
    4c5c:	a9 87       	std	Y+9, r26	; 0x09
    4c5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c60:	6f 81       	ldd	r22, Y+7	; 0x07
    4c62:	78 85       	ldd	r23, Y+8	; 0x08
    4c64:	89 85       	ldd	r24, Y+9	; 0x09
    4c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c68:	20 e0       	ldi	r18, 0x00	; 0
    4c6a:	30 e0       	ldi	r19, 0x00	; 0
    4c6c:	40 e8       	ldi	r20, 0x80	; 128
    4c6e:	5f e3       	ldi	r21, 0x3F	; 63
    4c70:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4c74:	88 23       	and	r24, r24
    4c76:	2c f4       	brge	.+10     	; 0x4c82 <LED_voidFLASH+0x2838>
		__ticks = 1;
    4c78:	81 e0       	ldi	r24, 0x01	; 1
    4c7a:	90 e0       	ldi	r25, 0x00	; 0
    4c7c:	9e 83       	std	Y+6, r25	; 0x06
    4c7e:	8d 83       	std	Y+5, r24	; 0x05
    4c80:	3f c0       	rjmp	.+126    	; 0x4d00 <LED_voidFLASH+0x28b6>
	else if (__tmp > 65535)
    4c82:	6f 81       	ldd	r22, Y+7	; 0x07
    4c84:	78 85       	ldd	r23, Y+8	; 0x08
    4c86:	89 85       	ldd	r24, Y+9	; 0x09
    4c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c8a:	20 e0       	ldi	r18, 0x00	; 0
    4c8c:	3f ef       	ldi	r19, 0xFF	; 255
    4c8e:	4f e7       	ldi	r20, 0x7F	; 127
    4c90:	57 e4       	ldi	r21, 0x47	; 71
    4c92:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4c96:	18 16       	cp	r1, r24
    4c98:	4c f5       	brge	.+82     	; 0x4cec <LED_voidFLASH+0x28a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ca0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ca2:	20 e0       	ldi	r18, 0x00	; 0
    4ca4:	30 e0       	ldi	r19, 0x00	; 0
    4ca6:	40 e2       	ldi	r20, 0x20	; 32
    4ca8:	51 e4       	ldi	r21, 0x41	; 65
    4caa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4cae:	dc 01       	movw	r26, r24
    4cb0:	cb 01       	movw	r24, r22
    4cb2:	bc 01       	movw	r22, r24
    4cb4:	cd 01       	movw	r24, r26
    4cb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4cba:	dc 01       	movw	r26, r24
    4cbc:	cb 01       	movw	r24, r22
    4cbe:	9e 83       	std	Y+6, r25	; 0x06
    4cc0:	8d 83       	std	Y+5, r24	; 0x05
    4cc2:	0f c0       	rjmp	.+30     	; 0x4ce2 <LED_voidFLASH+0x2898>
    4cc4:	80 e9       	ldi	r24, 0x90	; 144
    4cc6:	91 e0       	ldi	r25, 0x01	; 1
    4cc8:	9c 83       	std	Y+4, r25	; 0x04
    4cca:	8b 83       	std	Y+3, r24	; 0x03
    4ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    4cce:	9c 81       	ldd	r25, Y+4	; 0x04
    4cd0:	01 97       	sbiw	r24, 0x01	; 1
    4cd2:	f1 f7       	brne	.-4      	; 0x4cd0 <LED_voidFLASH+0x2886>
    4cd4:	9c 83       	std	Y+4, r25	; 0x04
    4cd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cda:	9e 81       	ldd	r25, Y+6	; 0x06
    4cdc:	01 97       	sbiw	r24, 0x01	; 1
    4cde:	9e 83       	std	Y+6, r25	; 0x06
    4ce0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ce6:	00 97       	sbiw	r24, 0x00	; 0
    4ce8:	69 f7       	brne	.-38     	; 0x4cc4 <LED_voidFLASH+0x287a>
    4cea:	14 c0       	rjmp	.+40     	; 0x4d14 <LED_voidFLASH+0x28ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cec:	6f 81       	ldd	r22, Y+7	; 0x07
    4cee:	78 85       	ldd	r23, Y+8	; 0x08
    4cf0:	89 85       	ldd	r24, Y+9	; 0x09
    4cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4cf8:	dc 01       	movw	r26, r24
    4cfa:	cb 01       	movw	r24, r22
    4cfc:	9e 83       	std	Y+6, r25	; 0x06
    4cfe:	8d 83       	std	Y+5, r24	; 0x05
    4d00:	8d 81       	ldd	r24, Y+5	; 0x05
    4d02:	9e 81       	ldd	r25, Y+6	; 0x06
    4d04:	9a 83       	std	Y+2, r25	; 0x02
    4d06:	89 83       	std	Y+1, r24	; 0x01
    4d08:	89 81       	ldd	r24, Y+1	; 0x01
    4d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d0c:	01 97       	sbiw	r24, 0x01	; 1
    4d0e:	f1 f7       	brne	.-4      	; 0x4d0c <LED_voidFLASH+0x28c2>
    4d10:	9a 83       	std	Y+2, r25	; 0x02
    4d12:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);
			break;
		}
}
    4d14:	c9 55       	subi	r28, 0x59	; 89
    4d16:	de 4f       	sbci	r29, 0xFE	; 254
    4d18:	0f b6       	in	r0, 0x3f	; 63
    4d1a:	f8 94       	cli
    4d1c:	de bf       	out	0x3e, r29	; 62
    4d1e:	0f be       	out	0x3f, r0	; 63
    4d20:	cd bf       	out	0x3d, r28	; 61
    4d22:	cf 91       	pop	r28
    4d24:	df 91       	pop	r29
    4d26:	1f 91       	pop	r17
    4d28:	0f 91       	pop	r16
    4d2a:	08 95       	ret

00004d2c <LCD_voidInit>:




void LCD_voidInit(void)
{
    4d2c:	df 93       	push	r29
    4d2e:	cf 93       	push	r28
    4d30:	cd b7       	in	r28, 0x3d	; 61
    4d32:	de b7       	in	r29, 0x3e	; 62
    4d34:	e4 97       	sbiw	r28, 0x34	; 52
    4d36:	0f b6       	in	r0, 0x3f	; 63
    4d38:	f8 94       	cli
    4d3a:	de bf       	out	0x3e, r29	; 62
    4d3c:	0f be       	out	0x3f, r0	; 63
    4d3e:	cd bf       	out	0x3d, r28	; 61
	//Initialise COntrol Lines
	DIO_voidconfigureChannel(DIO_PORTB,DIO_PIN1,DIO_OUTPUT);
    4d40:	81 e0       	ldi	r24, 0x01	; 1
    4d42:	61 e0       	ldi	r22, 0x01	; 1
    4d44:	41 e0       	ldi	r20, 0x01	; 1
    4d46:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTB,DIO_PIN2,DIO_OUTPUT);
    4d4a:	81 e0       	ldi	r24, 0x01	; 1
    4d4c:	62 e0       	ldi	r22, 0x02	; 2
    4d4e:	41 e0       	ldi	r20, 0x01	; 1
    4d50:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTB,DIO_PIN3,DIO_OUTPUT);
    4d54:	81 e0       	ldi	r24, 0x01	; 1
    4d56:	63 e0       	ldi	r22, 0x03	; 3
    4d58:	41 e0       	ldi	r20, 0x01	; 1
    4d5a:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	//Initialise Data Lines
	DIO_voidconfigureChannel(DIO_PORTA,DIO_PIN4,DIO_OUTPUT);
    4d5e:	80 e0       	ldi	r24, 0x00	; 0
    4d60:	64 e0       	ldi	r22, 0x04	; 4
    4d62:	41 e0       	ldi	r20, 0x01	; 1
    4d64:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTA,DIO_PIN5,DIO_OUTPUT);
    4d68:	80 e0       	ldi	r24, 0x00	; 0
    4d6a:	65 e0       	ldi	r22, 0x05	; 5
    4d6c:	41 e0       	ldi	r20, 0x01	; 1
    4d6e:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTA,DIO_PIN6,DIO_OUTPUT);
    4d72:	80 e0       	ldi	r24, 0x00	; 0
    4d74:	66 e0       	ldi	r22, 0x06	; 6
    4d76:	41 e0       	ldi	r20, 0x01	; 1
    4d78:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTA,DIO_PIN7,DIO_OUTPUT);
    4d7c:	80 e0       	ldi	r24, 0x00	; 0
    4d7e:	67 e0       	ldi	r22, 0x07	; 7
    4d80:	41 e0       	ldi	r20, 0x01	; 1
    4d82:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	//RW = 0
	DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN2,DIO_LOW);
    4d86:	81 e0       	ldi	r24, 0x01	; 1
    4d88:	62 e0       	ldi	r22, 0x02	; 2
    4d8a:	40 e0       	ldi	r20, 0x00	; 0
    4d8c:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
    4d90:	80 e0       	ldi	r24, 0x00	; 0
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	a0 e7       	ldi	r26, 0x70	; 112
    4d96:	b1 e4       	ldi	r27, 0x41	; 65
    4d98:	89 ab       	std	Y+49, r24	; 0x31
    4d9a:	9a ab       	std	Y+50, r25	; 0x32
    4d9c:	ab ab       	std	Y+51, r26	; 0x33
    4d9e:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4da0:	69 a9       	ldd	r22, Y+49	; 0x31
    4da2:	7a a9       	ldd	r23, Y+50	; 0x32
    4da4:	8b a9       	ldd	r24, Y+51	; 0x33
    4da6:	9c a9       	ldd	r25, Y+52	; 0x34
    4da8:	20 e0       	ldi	r18, 0x00	; 0
    4daa:	30 e0       	ldi	r19, 0x00	; 0
    4dac:	4a e7       	ldi	r20, 0x7A	; 122
    4dae:	55 e4       	ldi	r21, 0x45	; 69
    4db0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4db4:	dc 01       	movw	r26, r24
    4db6:	cb 01       	movw	r24, r22
    4db8:	8d a7       	std	Y+45, r24	; 0x2d
    4dba:	9e a7       	std	Y+46, r25	; 0x2e
    4dbc:	af a7       	std	Y+47, r26	; 0x2f
    4dbe:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    4dc0:	6d a5       	ldd	r22, Y+45	; 0x2d
    4dc2:	7e a5       	ldd	r23, Y+46	; 0x2e
    4dc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    4dc6:	98 a9       	ldd	r25, Y+48	; 0x30
    4dc8:	20 e0       	ldi	r18, 0x00	; 0
    4dca:	30 e0       	ldi	r19, 0x00	; 0
    4dcc:	40 e8       	ldi	r20, 0x80	; 128
    4dce:	5f e3       	ldi	r21, 0x3F	; 63
    4dd0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4dd4:	88 23       	and	r24, r24
    4dd6:	2c f4       	brge	.+10     	; 0x4de2 <LCD_voidInit+0xb6>
		__ticks = 1;
    4dd8:	81 e0       	ldi	r24, 0x01	; 1
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	9c a7       	std	Y+44, r25	; 0x2c
    4dde:	8b a7       	std	Y+43, r24	; 0x2b
    4de0:	3f c0       	rjmp	.+126    	; 0x4e60 <LCD_voidInit+0x134>
	else if (__tmp > 65535)
    4de2:	6d a5       	ldd	r22, Y+45	; 0x2d
    4de4:	7e a5       	ldd	r23, Y+46	; 0x2e
    4de6:	8f a5       	ldd	r24, Y+47	; 0x2f
    4de8:	98 a9       	ldd	r25, Y+48	; 0x30
    4dea:	20 e0       	ldi	r18, 0x00	; 0
    4dec:	3f ef       	ldi	r19, 0xFF	; 255
    4dee:	4f e7       	ldi	r20, 0x7F	; 127
    4df0:	57 e4       	ldi	r21, 0x47	; 71
    4df2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4df6:	18 16       	cp	r1, r24
    4df8:	4c f5       	brge	.+82     	; 0x4e4c <LCD_voidInit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dfa:	69 a9       	ldd	r22, Y+49	; 0x31
    4dfc:	7a a9       	ldd	r23, Y+50	; 0x32
    4dfe:	8b a9       	ldd	r24, Y+51	; 0x33
    4e00:	9c a9       	ldd	r25, Y+52	; 0x34
    4e02:	20 e0       	ldi	r18, 0x00	; 0
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	40 e2       	ldi	r20, 0x20	; 32
    4e08:	51 e4       	ldi	r21, 0x41	; 65
    4e0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4e0e:	dc 01       	movw	r26, r24
    4e10:	cb 01       	movw	r24, r22
    4e12:	bc 01       	movw	r22, r24
    4e14:	cd 01       	movw	r24, r26
    4e16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e1a:	dc 01       	movw	r26, r24
    4e1c:	cb 01       	movw	r24, r22
    4e1e:	9c a7       	std	Y+44, r25	; 0x2c
    4e20:	8b a7       	std	Y+43, r24	; 0x2b
    4e22:	0f c0       	rjmp	.+30     	; 0x4e42 <LCD_voidInit+0x116>
    4e24:	80 e9       	ldi	r24, 0x90	; 144
    4e26:	91 e0       	ldi	r25, 0x01	; 1
    4e28:	9a a7       	std	Y+42, r25	; 0x2a
    4e2a:	89 a7       	std	Y+41, r24	; 0x29
    4e2c:	89 a5       	ldd	r24, Y+41	; 0x29
    4e2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e30:	01 97       	sbiw	r24, 0x01	; 1
    4e32:	f1 f7       	brne	.-4      	; 0x4e30 <LCD_voidInit+0x104>
    4e34:	9a a7       	std	Y+42, r25	; 0x2a
    4e36:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e38:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e3c:	01 97       	sbiw	r24, 0x01	; 1
    4e3e:	9c a7       	std	Y+44, r25	; 0x2c
    4e40:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e42:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e44:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e46:	00 97       	sbiw	r24, 0x00	; 0
    4e48:	69 f7       	brne	.-38     	; 0x4e24 <LCD_voidInit+0xf8>
    4e4a:	14 c0       	rjmp	.+40     	; 0x4e74 <LCD_voidInit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e4c:	6d a5       	ldd	r22, Y+45	; 0x2d
    4e4e:	7e a5       	ldd	r23, Y+46	; 0x2e
    4e50:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e52:	98 a9       	ldd	r25, Y+48	; 0x30
    4e54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e58:	dc 01       	movw	r26, r24
    4e5a:	cb 01       	movw	r24, r22
    4e5c:	9c a7       	std	Y+44, r25	; 0x2c
    4e5e:	8b a7       	std	Y+43, r24	; 0x2b
    4e60:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e62:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e64:	98 a7       	std	Y+40, r25	; 0x28
    4e66:	8f a3       	std	Y+39, r24	; 0x27
    4e68:	8f a1       	ldd	r24, Y+39	; 0x27
    4e6a:	98 a5       	ldd	r25, Y+40	; 0x28
    4e6c:	01 97       	sbiw	r24, 0x01	; 1
    4e6e:	f1 f7       	brne	.-4      	; 0x4e6c <LCD_voidInit+0x140>
    4e70:	98 a7       	std	Y+40, r25	; 0x28
    4e72:	8f a3       	std	Y+39, r24	; 0x27

	//initialisation steps on data sheet
	_delay_ms(15);
	LCD_voidCMD(0x30);
    4e74:	80 e3       	ldi	r24, 0x30	; 48
    4e76:	0e 94 6f 2a 	call	0x54de	; 0x54de <LCD_voidCMD>
    4e7a:	80 e0       	ldi	r24, 0x00	; 0
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	a0 ea       	ldi	r26, 0xA0	; 160
    4e80:	b0 e4       	ldi	r27, 0x40	; 64
    4e82:	8b a3       	std	Y+35, r24	; 0x23
    4e84:	9c a3       	std	Y+36, r25	; 0x24
    4e86:	ad a3       	std	Y+37, r26	; 0x25
    4e88:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e8a:	6b a1       	ldd	r22, Y+35	; 0x23
    4e8c:	7c a1       	ldd	r23, Y+36	; 0x24
    4e8e:	8d a1       	ldd	r24, Y+37	; 0x25
    4e90:	9e a1       	ldd	r25, Y+38	; 0x26
    4e92:	20 e0       	ldi	r18, 0x00	; 0
    4e94:	30 e0       	ldi	r19, 0x00	; 0
    4e96:	4a e7       	ldi	r20, 0x7A	; 122
    4e98:	55 e4       	ldi	r21, 0x45	; 69
    4e9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4e9e:	dc 01       	movw	r26, r24
    4ea0:	cb 01       	movw	r24, r22
    4ea2:	8f 8f       	std	Y+31, r24	; 0x1f
    4ea4:	98 a3       	std	Y+32, r25	; 0x20
    4ea6:	a9 a3       	std	Y+33, r26	; 0x21
    4ea8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    4eaa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4eac:	78 a1       	ldd	r23, Y+32	; 0x20
    4eae:	89 a1       	ldd	r24, Y+33	; 0x21
    4eb0:	9a a1       	ldd	r25, Y+34	; 0x22
    4eb2:	20 e0       	ldi	r18, 0x00	; 0
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	40 e8       	ldi	r20, 0x80	; 128
    4eb8:	5f e3       	ldi	r21, 0x3F	; 63
    4eba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4ebe:	88 23       	and	r24, r24
    4ec0:	2c f4       	brge	.+10     	; 0x4ecc <LCD_voidInit+0x1a0>
		__ticks = 1;
    4ec2:	81 e0       	ldi	r24, 0x01	; 1
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	9e 8f       	std	Y+30, r25	; 0x1e
    4ec8:	8d 8f       	std	Y+29, r24	; 0x1d
    4eca:	3f c0       	rjmp	.+126    	; 0x4f4a <LCD_voidInit+0x21e>
	else if (__tmp > 65535)
    4ecc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4ece:	78 a1       	ldd	r23, Y+32	; 0x20
    4ed0:	89 a1       	ldd	r24, Y+33	; 0x21
    4ed2:	9a a1       	ldd	r25, Y+34	; 0x22
    4ed4:	20 e0       	ldi	r18, 0x00	; 0
    4ed6:	3f ef       	ldi	r19, 0xFF	; 255
    4ed8:	4f e7       	ldi	r20, 0x7F	; 127
    4eda:	57 e4       	ldi	r21, 0x47	; 71
    4edc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4ee0:	18 16       	cp	r1, r24
    4ee2:	4c f5       	brge	.+82     	; 0x4f36 <LCD_voidInit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ee4:	6b a1       	ldd	r22, Y+35	; 0x23
    4ee6:	7c a1       	ldd	r23, Y+36	; 0x24
    4ee8:	8d a1       	ldd	r24, Y+37	; 0x25
    4eea:	9e a1       	ldd	r25, Y+38	; 0x26
    4eec:	20 e0       	ldi	r18, 0x00	; 0
    4eee:	30 e0       	ldi	r19, 0x00	; 0
    4ef0:	40 e2       	ldi	r20, 0x20	; 32
    4ef2:	51 e4       	ldi	r21, 0x41	; 65
    4ef4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ef8:	dc 01       	movw	r26, r24
    4efa:	cb 01       	movw	r24, r22
    4efc:	bc 01       	movw	r22, r24
    4efe:	cd 01       	movw	r24, r26
    4f00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f04:	dc 01       	movw	r26, r24
    4f06:	cb 01       	movw	r24, r22
    4f08:	9e 8f       	std	Y+30, r25	; 0x1e
    4f0a:	8d 8f       	std	Y+29, r24	; 0x1d
    4f0c:	0f c0       	rjmp	.+30     	; 0x4f2c <LCD_voidInit+0x200>
    4f0e:	80 e9       	ldi	r24, 0x90	; 144
    4f10:	91 e0       	ldi	r25, 0x01	; 1
    4f12:	9c 8f       	std	Y+28, r25	; 0x1c
    4f14:	8b 8f       	std	Y+27, r24	; 0x1b
    4f16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f1a:	01 97       	sbiw	r24, 0x01	; 1
    4f1c:	f1 f7       	brne	.-4      	; 0x4f1a <LCD_voidInit+0x1ee>
    4f1e:	9c 8f       	std	Y+28, r25	; 0x1c
    4f20:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f26:	01 97       	sbiw	r24, 0x01	; 1
    4f28:	9e 8f       	std	Y+30, r25	; 0x1e
    4f2a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f30:	00 97       	sbiw	r24, 0x00	; 0
    4f32:	69 f7       	brne	.-38     	; 0x4f0e <LCD_voidInit+0x1e2>
    4f34:	14 c0       	rjmp	.+40     	; 0x4f5e <LCD_voidInit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f36:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4f38:	78 a1       	ldd	r23, Y+32	; 0x20
    4f3a:	89 a1       	ldd	r24, Y+33	; 0x21
    4f3c:	9a a1       	ldd	r25, Y+34	; 0x22
    4f3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f42:	dc 01       	movw	r26, r24
    4f44:	cb 01       	movw	r24, r22
    4f46:	9e 8f       	std	Y+30, r25	; 0x1e
    4f48:	8d 8f       	std	Y+29, r24	; 0x1d
    4f4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f4e:	9a 8f       	std	Y+26, r25	; 0x1a
    4f50:	89 8f       	std	Y+25, r24	; 0x19
    4f52:	89 8d       	ldd	r24, Y+25	; 0x19
    4f54:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4f56:	01 97       	sbiw	r24, 0x01	; 1
    4f58:	f1 f7       	brne	.-4      	; 0x4f56 <LCD_voidInit+0x22a>
    4f5a:	9a 8f       	std	Y+26, r25	; 0x1a
    4f5c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	LCD_voidCMD(0x30);
    4f5e:	80 e3       	ldi	r24, 0x30	; 48
    4f60:	0e 94 6f 2a 	call	0x54de	; 0x54de <LCD_voidCMD>
    4f64:	80 e0       	ldi	r24, 0x00	; 0
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	a8 ec       	ldi	r26, 0xC8	; 200
    4f6a:	b2 e4       	ldi	r27, 0x42	; 66
    4f6c:	8d 8b       	std	Y+21, r24	; 0x15
    4f6e:	9e 8b       	std	Y+22, r25	; 0x16
    4f70:	af 8b       	std	Y+23, r26	; 0x17
    4f72:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4f74:	6d 89       	ldd	r22, Y+21	; 0x15
    4f76:	7e 89       	ldd	r23, Y+22	; 0x16
    4f78:	8f 89       	ldd	r24, Y+23	; 0x17
    4f7a:	98 8d       	ldd	r25, Y+24	; 0x18
    4f7c:	2b ea       	ldi	r18, 0xAB	; 171
    4f7e:	3a ea       	ldi	r19, 0xAA	; 170
    4f80:	4a ea       	ldi	r20, 0xAA	; 170
    4f82:	50 e4       	ldi	r21, 0x40	; 64
    4f84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4f88:	dc 01       	movw	r26, r24
    4f8a:	cb 01       	movw	r24, r22
    4f8c:	89 8b       	std	Y+17, r24	; 0x11
    4f8e:	9a 8b       	std	Y+18, r25	; 0x12
    4f90:	ab 8b       	std	Y+19, r26	; 0x13
    4f92:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4f94:	69 89       	ldd	r22, Y+17	; 0x11
    4f96:	7a 89       	ldd	r23, Y+18	; 0x12
    4f98:	8b 89       	ldd	r24, Y+19	; 0x13
    4f9a:	9c 89       	ldd	r25, Y+20	; 0x14
    4f9c:	20 e0       	ldi	r18, 0x00	; 0
    4f9e:	30 e0       	ldi	r19, 0x00	; 0
    4fa0:	40 e8       	ldi	r20, 0x80	; 128
    4fa2:	5f e3       	ldi	r21, 0x3F	; 63
    4fa4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4fa8:	88 23       	and	r24, r24
    4faa:	1c f4       	brge	.+6      	; 0x4fb2 <LCD_voidInit+0x286>
		__ticks = 1;
    4fac:	81 e0       	ldi	r24, 0x01	; 1
    4fae:	88 8b       	std	Y+16, r24	; 0x10
    4fb0:	91 c0       	rjmp	.+290    	; 0x50d4 <LCD_voidInit+0x3a8>
	else if (__tmp > 255)
    4fb2:	69 89       	ldd	r22, Y+17	; 0x11
    4fb4:	7a 89       	ldd	r23, Y+18	; 0x12
    4fb6:	8b 89       	ldd	r24, Y+19	; 0x13
    4fb8:	9c 89       	ldd	r25, Y+20	; 0x14
    4fba:	20 e0       	ldi	r18, 0x00	; 0
    4fbc:	30 e0       	ldi	r19, 0x00	; 0
    4fbe:	4f e7       	ldi	r20, 0x7F	; 127
    4fc0:	53 e4       	ldi	r21, 0x43	; 67
    4fc2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4fc6:	18 16       	cp	r1, r24
    4fc8:	0c f0       	brlt	.+2      	; 0x4fcc <LCD_voidInit+0x2a0>
    4fca:	7b c0       	rjmp	.+246    	; 0x50c2 <LCD_voidInit+0x396>
	{
		_delay_ms(__us / 1000.0);
    4fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    4fce:	7e 89       	ldd	r23, Y+22	; 0x16
    4fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    4fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    4fd4:	20 e0       	ldi	r18, 0x00	; 0
    4fd6:	30 e0       	ldi	r19, 0x00	; 0
    4fd8:	4a e7       	ldi	r20, 0x7A	; 122
    4fda:	54 e4       	ldi	r21, 0x44	; 68
    4fdc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4fe0:	dc 01       	movw	r26, r24
    4fe2:	cb 01       	movw	r24, r22
    4fe4:	8c 87       	std	Y+12, r24	; 0x0c
    4fe6:	9d 87       	std	Y+13, r25	; 0x0d
    4fe8:	ae 87       	std	Y+14, r26	; 0x0e
    4fea:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fec:	6c 85       	ldd	r22, Y+12	; 0x0c
    4fee:	7d 85       	ldd	r23, Y+13	; 0x0d
    4ff0:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ff2:	9f 85       	ldd	r25, Y+15	; 0x0f
    4ff4:	20 e0       	ldi	r18, 0x00	; 0
    4ff6:	30 e0       	ldi	r19, 0x00	; 0
    4ff8:	4a e7       	ldi	r20, 0x7A	; 122
    4ffa:	55 e4       	ldi	r21, 0x45	; 69
    4ffc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5000:	dc 01       	movw	r26, r24
    5002:	cb 01       	movw	r24, r22
    5004:	88 87       	std	Y+8, r24	; 0x08
    5006:	99 87       	std	Y+9, r25	; 0x09
    5008:	aa 87       	std	Y+10, r26	; 0x0a
    500a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    500c:	68 85       	ldd	r22, Y+8	; 0x08
    500e:	79 85       	ldd	r23, Y+9	; 0x09
    5010:	8a 85       	ldd	r24, Y+10	; 0x0a
    5012:	9b 85       	ldd	r25, Y+11	; 0x0b
    5014:	20 e0       	ldi	r18, 0x00	; 0
    5016:	30 e0       	ldi	r19, 0x00	; 0
    5018:	40 e8       	ldi	r20, 0x80	; 128
    501a:	5f e3       	ldi	r21, 0x3F	; 63
    501c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5020:	88 23       	and	r24, r24
    5022:	2c f4       	brge	.+10     	; 0x502e <LCD_voidInit+0x302>
		__ticks = 1;
    5024:	81 e0       	ldi	r24, 0x01	; 1
    5026:	90 e0       	ldi	r25, 0x00	; 0
    5028:	9f 83       	std	Y+7, r25	; 0x07
    502a:	8e 83       	std	Y+6, r24	; 0x06
    502c:	3f c0       	rjmp	.+126    	; 0x50ac <LCD_voidInit+0x380>
	else if (__tmp > 65535)
    502e:	68 85       	ldd	r22, Y+8	; 0x08
    5030:	79 85       	ldd	r23, Y+9	; 0x09
    5032:	8a 85       	ldd	r24, Y+10	; 0x0a
    5034:	9b 85       	ldd	r25, Y+11	; 0x0b
    5036:	20 e0       	ldi	r18, 0x00	; 0
    5038:	3f ef       	ldi	r19, 0xFF	; 255
    503a:	4f e7       	ldi	r20, 0x7F	; 127
    503c:	57 e4       	ldi	r21, 0x47	; 71
    503e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5042:	18 16       	cp	r1, r24
    5044:	4c f5       	brge	.+82     	; 0x5098 <LCD_voidInit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5046:	6c 85       	ldd	r22, Y+12	; 0x0c
    5048:	7d 85       	ldd	r23, Y+13	; 0x0d
    504a:	8e 85       	ldd	r24, Y+14	; 0x0e
    504c:	9f 85       	ldd	r25, Y+15	; 0x0f
    504e:	20 e0       	ldi	r18, 0x00	; 0
    5050:	30 e0       	ldi	r19, 0x00	; 0
    5052:	40 e2       	ldi	r20, 0x20	; 32
    5054:	51 e4       	ldi	r21, 0x41	; 65
    5056:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    505a:	dc 01       	movw	r26, r24
    505c:	cb 01       	movw	r24, r22
    505e:	bc 01       	movw	r22, r24
    5060:	cd 01       	movw	r24, r26
    5062:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5066:	dc 01       	movw	r26, r24
    5068:	cb 01       	movw	r24, r22
    506a:	9f 83       	std	Y+7, r25	; 0x07
    506c:	8e 83       	std	Y+6, r24	; 0x06
    506e:	0f c0       	rjmp	.+30     	; 0x508e <LCD_voidInit+0x362>
    5070:	80 e9       	ldi	r24, 0x90	; 144
    5072:	91 e0       	ldi	r25, 0x01	; 1
    5074:	9d 83       	std	Y+5, r25	; 0x05
    5076:	8c 83       	std	Y+4, r24	; 0x04
    5078:	8c 81       	ldd	r24, Y+4	; 0x04
    507a:	9d 81       	ldd	r25, Y+5	; 0x05
    507c:	01 97       	sbiw	r24, 0x01	; 1
    507e:	f1 f7       	brne	.-4      	; 0x507c <LCD_voidInit+0x350>
    5080:	9d 83       	std	Y+5, r25	; 0x05
    5082:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5084:	8e 81       	ldd	r24, Y+6	; 0x06
    5086:	9f 81       	ldd	r25, Y+7	; 0x07
    5088:	01 97       	sbiw	r24, 0x01	; 1
    508a:	9f 83       	std	Y+7, r25	; 0x07
    508c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    508e:	8e 81       	ldd	r24, Y+6	; 0x06
    5090:	9f 81       	ldd	r25, Y+7	; 0x07
    5092:	00 97       	sbiw	r24, 0x00	; 0
    5094:	69 f7       	brne	.-38     	; 0x5070 <LCD_voidInit+0x344>
    5096:	24 c0       	rjmp	.+72     	; 0x50e0 <LCD_voidInit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5098:	68 85       	ldd	r22, Y+8	; 0x08
    509a:	79 85       	ldd	r23, Y+9	; 0x09
    509c:	8a 85       	ldd	r24, Y+10	; 0x0a
    509e:	9b 85       	ldd	r25, Y+11	; 0x0b
    50a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    50a4:	dc 01       	movw	r26, r24
    50a6:	cb 01       	movw	r24, r22
    50a8:	9f 83       	std	Y+7, r25	; 0x07
    50aa:	8e 83       	std	Y+6, r24	; 0x06
    50ac:	8e 81       	ldd	r24, Y+6	; 0x06
    50ae:	9f 81       	ldd	r25, Y+7	; 0x07
    50b0:	9b 83       	std	Y+3, r25	; 0x03
    50b2:	8a 83       	std	Y+2, r24	; 0x02
    50b4:	8a 81       	ldd	r24, Y+2	; 0x02
    50b6:	9b 81       	ldd	r25, Y+3	; 0x03
    50b8:	01 97       	sbiw	r24, 0x01	; 1
    50ba:	f1 f7       	brne	.-4      	; 0x50b8 <LCD_voidInit+0x38c>
    50bc:	9b 83       	std	Y+3, r25	; 0x03
    50be:	8a 83       	std	Y+2, r24	; 0x02
    50c0:	0f c0       	rjmp	.+30     	; 0x50e0 <LCD_voidInit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    50c2:	69 89       	ldd	r22, Y+17	; 0x11
    50c4:	7a 89       	ldd	r23, Y+18	; 0x12
    50c6:	8b 89       	ldd	r24, Y+19	; 0x13
    50c8:	9c 89       	ldd	r25, Y+20	; 0x14
    50ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    50ce:	dc 01       	movw	r26, r24
    50d0:	cb 01       	movw	r24, r22
    50d2:	88 8b       	std	Y+16, r24	; 0x10
    50d4:	88 89       	ldd	r24, Y+16	; 0x10
    50d6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    50d8:	89 81       	ldd	r24, Y+1	; 0x01
    50da:	8a 95       	dec	r24
    50dc:	f1 f7       	brne	.-4      	; 0x50da <LCD_voidInit+0x3ae>
    50de:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	LCD_voidCMD(0x03);
    50e0:	83 e0       	ldi	r24, 0x03	; 3
    50e2:	0e 94 6f 2a 	call	0x54de	; 0x54de <LCD_voidCMD>
	LCD_voidCMD(0x02);
    50e6:	82 e0       	ldi	r24, 0x02	; 2
    50e8:	0e 94 6f 2a 	call	0x54de	; 0x54de <LCD_voidCMD>
	LCD_voidCMD(_LCD_4BIT_MODE);
    50ec:	88 e2       	ldi	r24, 0x28	; 40
    50ee:	0e 94 6f 2a 	call	0x54de	; 0x54de <LCD_voidCMD>

}
    50f2:	e4 96       	adiw	r28, 0x34	; 52
    50f4:	0f b6       	in	r0, 0x3f	; 63
    50f6:	f8 94       	cli
    50f8:	de bf       	out	0x3e, r29	; 62
    50fa:	0f be       	out	0x3f, r0	; 63
    50fc:	cd bf       	out	0x3d, r28	; 61
    50fe:	cf 91       	pop	r28
    5100:	df 91       	pop	r29
    5102:	08 95       	ret

00005104 <Pulse>:
static void Pulse(void)
{
    5104:	df 93       	push	r29
    5106:	cf 93       	push	r28
    5108:	cd b7       	in	r28, 0x3d	; 61
    510a:	de b7       	in	r29, 0x3e	; 62
    510c:	68 97       	sbiw	r28, 0x18	; 24
    510e:	0f b6       	in	r0, 0x3f	; 63
    5110:	f8 94       	cli
    5112:	de bf       	out	0x3e, r29	; 62
    5114:	0f be       	out	0x3f, r0	; 63
    5116:	cd bf       	out	0x3d, r28	; 61
	//send Enable pulse
	DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN3,DIO_HIGH);
    5118:	81 e0       	ldi	r24, 0x01	; 1
    511a:	63 e0       	ldi	r22, 0x03	; 3
    511c:	41 e0       	ldi	r20, 0x01	; 1
    511e:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
    5122:	80 e0       	ldi	r24, 0x00	; 0
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	a0 e8       	ldi	r26, 0x80	; 128
    5128:	bf e3       	ldi	r27, 0x3F	; 63
    512a:	8d 8b       	std	Y+21, r24	; 0x15
    512c:	9e 8b       	std	Y+22, r25	; 0x16
    512e:	af 8b       	std	Y+23, r26	; 0x17
    5130:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5132:	6d 89       	ldd	r22, Y+21	; 0x15
    5134:	7e 89       	ldd	r23, Y+22	; 0x16
    5136:	8f 89       	ldd	r24, Y+23	; 0x17
    5138:	98 8d       	ldd	r25, Y+24	; 0x18
    513a:	2b ea       	ldi	r18, 0xAB	; 171
    513c:	3a ea       	ldi	r19, 0xAA	; 170
    513e:	4a ea       	ldi	r20, 0xAA	; 170
    5140:	50 e4       	ldi	r21, 0x40	; 64
    5142:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5146:	dc 01       	movw	r26, r24
    5148:	cb 01       	movw	r24, r22
    514a:	89 8b       	std	Y+17, r24	; 0x11
    514c:	9a 8b       	std	Y+18, r25	; 0x12
    514e:	ab 8b       	std	Y+19, r26	; 0x13
    5150:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5152:	69 89       	ldd	r22, Y+17	; 0x11
    5154:	7a 89       	ldd	r23, Y+18	; 0x12
    5156:	8b 89       	ldd	r24, Y+19	; 0x13
    5158:	9c 89       	ldd	r25, Y+20	; 0x14
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	30 e0       	ldi	r19, 0x00	; 0
    515e:	40 e8       	ldi	r20, 0x80	; 128
    5160:	5f e3       	ldi	r21, 0x3F	; 63
    5162:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5166:	88 23       	and	r24, r24
    5168:	1c f4       	brge	.+6      	; 0x5170 <Pulse+0x6c>
		__ticks = 1;
    516a:	81 e0       	ldi	r24, 0x01	; 1
    516c:	88 8b       	std	Y+16, r24	; 0x10
    516e:	91 c0       	rjmp	.+290    	; 0x5292 <Pulse+0x18e>
	else if (__tmp > 255)
    5170:	69 89       	ldd	r22, Y+17	; 0x11
    5172:	7a 89       	ldd	r23, Y+18	; 0x12
    5174:	8b 89       	ldd	r24, Y+19	; 0x13
    5176:	9c 89       	ldd	r25, Y+20	; 0x14
    5178:	20 e0       	ldi	r18, 0x00	; 0
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	4f e7       	ldi	r20, 0x7F	; 127
    517e:	53 e4       	ldi	r21, 0x43	; 67
    5180:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5184:	18 16       	cp	r1, r24
    5186:	0c f0       	brlt	.+2      	; 0x518a <Pulse+0x86>
    5188:	7b c0       	rjmp	.+246    	; 0x5280 <Pulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    518a:	6d 89       	ldd	r22, Y+21	; 0x15
    518c:	7e 89       	ldd	r23, Y+22	; 0x16
    518e:	8f 89       	ldd	r24, Y+23	; 0x17
    5190:	98 8d       	ldd	r25, Y+24	; 0x18
    5192:	20 e0       	ldi	r18, 0x00	; 0
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	4a e7       	ldi	r20, 0x7A	; 122
    5198:	54 e4       	ldi	r21, 0x44	; 68
    519a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    519e:	dc 01       	movw	r26, r24
    51a0:	cb 01       	movw	r24, r22
    51a2:	8c 87       	std	Y+12, r24	; 0x0c
    51a4:	9d 87       	std	Y+13, r25	; 0x0d
    51a6:	ae 87       	std	Y+14, r26	; 0x0e
    51a8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    51ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    51ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    51b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    51b2:	20 e0       	ldi	r18, 0x00	; 0
    51b4:	30 e0       	ldi	r19, 0x00	; 0
    51b6:	4a e7       	ldi	r20, 0x7A	; 122
    51b8:	55 e4       	ldi	r21, 0x45	; 69
    51ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    51be:	dc 01       	movw	r26, r24
    51c0:	cb 01       	movw	r24, r22
    51c2:	88 87       	std	Y+8, r24	; 0x08
    51c4:	99 87       	std	Y+9, r25	; 0x09
    51c6:	aa 87       	std	Y+10, r26	; 0x0a
    51c8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    51ca:	68 85       	ldd	r22, Y+8	; 0x08
    51cc:	79 85       	ldd	r23, Y+9	; 0x09
    51ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    51d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    51d2:	20 e0       	ldi	r18, 0x00	; 0
    51d4:	30 e0       	ldi	r19, 0x00	; 0
    51d6:	40 e8       	ldi	r20, 0x80	; 128
    51d8:	5f e3       	ldi	r21, 0x3F	; 63
    51da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    51de:	88 23       	and	r24, r24
    51e0:	2c f4       	brge	.+10     	; 0x51ec <Pulse+0xe8>
		__ticks = 1;
    51e2:	81 e0       	ldi	r24, 0x01	; 1
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	9f 83       	std	Y+7, r25	; 0x07
    51e8:	8e 83       	std	Y+6, r24	; 0x06
    51ea:	3f c0       	rjmp	.+126    	; 0x526a <Pulse+0x166>
	else if (__tmp > 65535)
    51ec:	68 85       	ldd	r22, Y+8	; 0x08
    51ee:	79 85       	ldd	r23, Y+9	; 0x09
    51f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    51f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    51f4:	20 e0       	ldi	r18, 0x00	; 0
    51f6:	3f ef       	ldi	r19, 0xFF	; 255
    51f8:	4f e7       	ldi	r20, 0x7F	; 127
    51fa:	57 e4       	ldi	r21, 0x47	; 71
    51fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5200:	18 16       	cp	r1, r24
    5202:	4c f5       	brge	.+82     	; 0x5256 <Pulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5204:	6c 85       	ldd	r22, Y+12	; 0x0c
    5206:	7d 85       	ldd	r23, Y+13	; 0x0d
    5208:	8e 85       	ldd	r24, Y+14	; 0x0e
    520a:	9f 85       	ldd	r25, Y+15	; 0x0f
    520c:	20 e0       	ldi	r18, 0x00	; 0
    520e:	30 e0       	ldi	r19, 0x00	; 0
    5210:	40 e2       	ldi	r20, 0x20	; 32
    5212:	51 e4       	ldi	r21, 0x41	; 65
    5214:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5218:	dc 01       	movw	r26, r24
    521a:	cb 01       	movw	r24, r22
    521c:	bc 01       	movw	r22, r24
    521e:	cd 01       	movw	r24, r26
    5220:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5224:	dc 01       	movw	r26, r24
    5226:	cb 01       	movw	r24, r22
    5228:	9f 83       	std	Y+7, r25	; 0x07
    522a:	8e 83       	std	Y+6, r24	; 0x06
    522c:	0f c0       	rjmp	.+30     	; 0x524c <Pulse+0x148>
    522e:	80 e9       	ldi	r24, 0x90	; 144
    5230:	91 e0       	ldi	r25, 0x01	; 1
    5232:	9d 83       	std	Y+5, r25	; 0x05
    5234:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5236:	8c 81       	ldd	r24, Y+4	; 0x04
    5238:	9d 81       	ldd	r25, Y+5	; 0x05
    523a:	01 97       	sbiw	r24, 0x01	; 1
    523c:	f1 f7       	brne	.-4      	; 0x523a <Pulse+0x136>
    523e:	9d 83       	std	Y+5, r25	; 0x05
    5240:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5242:	8e 81       	ldd	r24, Y+6	; 0x06
    5244:	9f 81       	ldd	r25, Y+7	; 0x07
    5246:	01 97       	sbiw	r24, 0x01	; 1
    5248:	9f 83       	std	Y+7, r25	; 0x07
    524a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    524c:	8e 81       	ldd	r24, Y+6	; 0x06
    524e:	9f 81       	ldd	r25, Y+7	; 0x07
    5250:	00 97       	sbiw	r24, 0x00	; 0
    5252:	69 f7       	brne	.-38     	; 0x522e <Pulse+0x12a>
    5254:	24 c0       	rjmp	.+72     	; 0x529e <Pulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5256:	68 85       	ldd	r22, Y+8	; 0x08
    5258:	79 85       	ldd	r23, Y+9	; 0x09
    525a:	8a 85       	ldd	r24, Y+10	; 0x0a
    525c:	9b 85       	ldd	r25, Y+11	; 0x0b
    525e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5262:	dc 01       	movw	r26, r24
    5264:	cb 01       	movw	r24, r22
    5266:	9f 83       	std	Y+7, r25	; 0x07
    5268:	8e 83       	std	Y+6, r24	; 0x06
    526a:	8e 81       	ldd	r24, Y+6	; 0x06
    526c:	9f 81       	ldd	r25, Y+7	; 0x07
    526e:	9b 83       	std	Y+3, r25	; 0x03
    5270:	8a 83       	std	Y+2, r24	; 0x02
    5272:	8a 81       	ldd	r24, Y+2	; 0x02
    5274:	9b 81       	ldd	r25, Y+3	; 0x03
    5276:	01 97       	sbiw	r24, 0x01	; 1
    5278:	f1 f7       	brne	.-4      	; 0x5276 <Pulse+0x172>
    527a:	9b 83       	std	Y+3, r25	; 0x03
    527c:	8a 83       	std	Y+2, r24	; 0x02
    527e:	0f c0       	rjmp	.+30     	; 0x529e <Pulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5280:	69 89       	ldd	r22, Y+17	; 0x11
    5282:	7a 89       	ldd	r23, Y+18	; 0x12
    5284:	8b 89       	ldd	r24, Y+19	; 0x13
    5286:	9c 89       	ldd	r25, Y+20	; 0x14
    5288:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    528c:	dc 01       	movw	r26, r24
    528e:	cb 01       	movw	r24, r22
    5290:	88 8b       	std	Y+16, r24	; 0x10
    5292:	88 89       	ldd	r24, Y+16	; 0x10
    5294:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5296:	89 81       	ldd	r24, Y+1	; 0x01
    5298:	8a 95       	dec	r24
    529a:	f1 f7       	brne	.-4      	; 0x5298 <Pulse+0x194>
    529c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN3,DIO_LOW);
    529e:	81 e0       	ldi	r24, 0x01	; 1
    52a0:	63 e0       	ldi	r22, 0x03	; 3
    52a2:	40 e0       	ldi	r20, 0x00	; 0
    52a4:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>

}
    52a8:	68 96       	adiw	r28, 0x18	; 24
    52aa:	0f b6       	in	r0, 0x3f	; 63
    52ac:	f8 94       	cli
    52ae:	de bf       	out	0x3e, r29	; 62
    52b0:	0f be       	out	0x3f, r0	; 63
    52b2:	cd bf       	out	0x3d, r28	; 61
    52b4:	cf 91       	pop	r28
    52b6:	df 91       	pop	r29
    52b8:	08 95       	ret

000052ba <LCD_voidDisplayChar>:
void LCD_voidDisplayChar(u8 chr)
{
    52ba:	df 93       	push	r29
    52bc:	cf 93       	push	r28
    52be:	cd b7       	in	r28, 0x3d	; 61
    52c0:	de b7       	in	r29, 0x3e	; 62
    52c2:	6f 97       	sbiw	r28, 0x1f	; 31
    52c4:	0f b6       	in	r0, 0x3f	; 63
    52c6:	f8 94       	cli
    52c8:	de bf       	out	0x3e, r29	; 62
    52ca:	0f be       	out	0x3f, r0	; 63
    52cc:	cd bf       	out	0x3d, r28	; 61
    52ce:	8f 8f       	std	Y+31, r24	; 0x1f
	//RS -> 1
	DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN1,DIO_HIGH);
    52d0:	81 e0       	ldi	r24, 0x01	; 1
    52d2:	61 e0       	ldi	r22, 0x01	; 1
    52d4:	41 e0       	ldi	r20, 0x01	; 1
    52d6:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	// 0b0000						0000
	// chr = 0b1101 1001
	// we split chr into 1101 0000 which goes to MSB
	// and 1001 0000 which goes to LSB
	// the first 4 zeros because we only work on the last 4 pins
	u8 loc_MSB = chr & ~LCDMASK;
    52da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    52dc:	80 7f       	andi	r24, 0xF0	; 240
    52de:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 loc_LSB = (chr<<4);
    52e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    52e2:	82 95       	swap	r24
    52e4:	80 7f       	andi	r24, 0xF0	; 240
    52e6:	8d 8f       	std	Y+29, r24	; 0x1d

	//write MSB data to LCD
	DIO_voidWRITEChannelGroup(DIO_PORTA,loc_MSB,LCDMASK);
    52e8:	80 e0       	ldi	r24, 0x00	; 0
    52ea:	6e 8d       	ldd	r22, Y+30	; 0x1e
    52ec:	4f e0       	ldi	r20, 0x0F	; 15
    52ee:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <DIO_voidWRITEChannelGroup>
	//send Enable pulse
	Pulse();
    52f2:	0e 94 82 28 	call	0x5104	; 0x5104 <Pulse>
    52f6:	80 e0       	ldi	r24, 0x00	; 0
    52f8:	90 e0       	ldi	r25, 0x00	; 0
    52fa:	a0 e0       	ldi	r26, 0x00	; 0
    52fc:	b0 e4       	ldi	r27, 0x40	; 64
    52fe:	89 8f       	std	Y+25, r24	; 0x19
    5300:	9a 8f       	std	Y+26, r25	; 0x1a
    5302:	ab 8f       	std	Y+27, r26	; 0x1b
    5304:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5306:	69 8d       	ldd	r22, Y+25	; 0x19
    5308:	7a 8d       	ldd	r23, Y+26	; 0x1a
    530a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    530c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    530e:	20 e0       	ldi	r18, 0x00	; 0
    5310:	30 e0       	ldi	r19, 0x00	; 0
    5312:	4a e7       	ldi	r20, 0x7A	; 122
    5314:	55 e4       	ldi	r21, 0x45	; 69
    5316:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    531a:	dc 01       	movw	r26, r24
    531c:	cb 01       	movw	r24, r22
    531e:	8d 8b       	std	Y+21, r24	; 0x15
    5320:	9e 8b       	std	Y+22, r25	; 0x16
    5322:	af 8b       	std	Y+23, r26	; 0x17
    5324:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5326:	6d 89       	ldd	r22, Y+21	; 0x15
    5328:	7e 89       	ldd	r23, Y+22	; 0x16
    532a:	8f 89       	ldd	r24, Y+23	; 0x17
    532c:	98 8d       	ldd	r25, Y+24	; 0x18
    532e:	20 e0       	ldi	r18, 0x00	; 0
    5330:	30 e0       	ldi	r19, 0x00	; 0
    5332:	40 e8       	ldi	r20, 0x80	; 128
    5334:	5f e3       	ldi	r21, 0x3F	; 63
    5336:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    533a:	88 23       	and	r24, r24
    533c:	2c f4       	brge	.+10     	; 0x5348 <LCD_voidDisplayChar+0x8e>
		__ticks = 1;
    533e:	81 e0       	ldi	r24, 0x01	; 1
    5340:	90 e0       	ldi	r25, 0x00	; 0
    5342:	9c 8b       	std	Y+20, r25	; 0x14
    5344:	8b 8b       	std	Y+19, r24	; 0x13
    5346:	3f c0       	rjmp	.+126    	; 0x53c6 <LCD_voidDisplayChar+0x10c>
	else if (__tmp > 65535)
    5348:	6d 89       	ldd	r22, Y+21	; 0x15
    534a:	7e 89       	ldd	r23, Y+22	; 0x16
    534c:	8f 89       	ldd	r24, Y+23	; 0x17
    534e:	98 8d       	ldd	r25, Y+24	; 0x18
    5350:	20 e0       	ldi	r18, 0x00	; 0
    5352:	3f ef       	ldi	r19, 0xFF	; 255
    5354:	4f e7       	ldi	r20, 0x7F	; 127
    5356:	57 e4       	ldi	r21, 0x47	; 71
    5358:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    535c:	18 16       	cp	r1, r24
    535e:	4c f5       	brge	.+82     	; 0x53b2 <LCD_voidDisplayChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5360:	69 8d       	ldd	r22, Y+25	; 0x19
    5362:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5364:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5366:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5368:	20 e0       	ldi	r18, 0x00	; 0
    536a:	30 e0       	ldi	r19, 0x00	; 0
    536c:	40 e2       	ldi	r20, 0x20	; 32
    536e:	51 e4       	ldi	r21, 0x41	; 65
    5370:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5374:	dc 01       	movw	r26, r24
    5376:	cb 01       	movw	r24, r22
    5378:	bc 01       	movw	r22, r24
    537a:	cd 01       	movw	r24, r26
    537c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5380:	dc 01       	movw	r26, r24
    5382:	cb 01       	movw	r24, r22
    5384:	9c 8b       	std	Y+20, r25	; 0x14
    5386:	8b 8b       	std	Y+19, r24	; 0x13
    5388:	0f c0       	rjmp	.+30     	; 0x53a8 <LCD_voidDisplayChar+0xee>
    538a:	80 e9       	ldi	r24, 0x90	; 144
    538c:	91 e0       	ldi	r25, 0x01	; 1
    538e:	9a 8b       	std	Y+18, r25	; 0x12
    5390:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5392:	89 89       	ldd	r24, Y+17	; 0x11
    5394:	9a 89       	ldd	r25, Y+18	; 0x12
    5396:	01 97       	sbiw	r24, 0x01	; 1
    5398:	f1 f7       	brne	.-4      	; 0x5396 <LCD_voidDisplayChar+0xdc>
    539a:	9a 8b       	std	Y+18, r25	; 0x12
    539c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    539e:	8b 89       	ldd	r24, Y+19	; 0x13
    53a0:	9c 89       	ldd	r25, Y+20	; 0x14
    53a2:	01 97       	sbiw	r24, 0x01	; 1
    53a4:	9c 8b       	std	Y+20, r25	; 0x14
    53a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53a8:	8b 89       	ldd	r24, Y+19	; 0x13
    53aa:	9c 89       	ldd	r25, Y+20	; 0x14
    53ac:	00 97       	sbiw	r24, 0x00	; 0
    53ae:	69 f7       	brne	.-38     	; 0x538a <LCD_voidDisplayChar+0xd0>
    53b0:	14 c0       	rjmp	.+40     	; 0x53da <LCD_voidDisplayChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53b2:	6d 89       	ldd	r22, Y+21	; 0x15
    53b4:	7e 89       	ldd	r23, Y+22	; 0x16
    53b6:	8f 89       	ldd	r24, Y+23	; 0x17
    53b8:	98 8d       	ldd	r25, Y+24	; 0x18
    53ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    53be:	dc 01       	movw	r26, r24
    53c0:	cb 01       	movw	r24, r22
    53c2:	9c 8b       	std	Y+20, r25	; 0x14
    53c4:	8b 8b       	std	Y+19, r24	; 0x13
    53c6:	8b 89       	ldd	r24, Y+19	; 0x13
    53c8:	9c 89       	ldd	r25, Y+20	; 0x14
    53ca:	98 8b       	std	Y+16, r25	; 0x10
    53cc:	8f 87       	std	Y+15, r24	; 0x0f
    53ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    53d0:	98 89       	ldd	r25, Y+16	; 0x10
    53d2:	01 97       	sbiw	r24, 0x01	; 1
    53d4:	f1 f7       	brne	.-4      	; 0x53d2 <LCD_voidDisplayChar+0x118>
    53d6:	98 8b       	std	Y+16, r25	; 0x10
    53d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	//write LSB data to LCD
	DIO_voidWRITEChannelGroup(DIO_PORTA,loc_LSB,LCDMASK);
    53da:	80 e0       	ldi	r24, 0x00	; 0
    53dc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    53de:	4f e0       	ldi	r20, 0x0F	; 15
    53e0:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <DIO_voidWRITEChannelGroup>
	//send Enable pulse
	Pulse();
    53e4:	0e 94 82 28 	call	0x5104	; 0x5104 <Pulse>
    53e8:	80 e0       	ldi	r24, 0x00	; 0
    53ea:	90 e0       	ldi	r25, 0x00	; 0
    53ec:	a0 e0       	ldi	r26, 0x00	; 0
    53ee:	b0 e4       	ldi	r27, 0x40	; 64
    53f0:	8b 87       	std	Y+11, r24	; 0x0b
    53f2:	9c 87       	std	Y+12, r25	; 0x0c
    53f4:	ad 87       	std	Y+13, r26	; 0x0d
    53f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    53fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    53fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    53fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5400:	20 e0       	ldi	r18, 0x00	; 0
    5402:	30 e0       	ldi	r19, 0x00	; 0
    5404:	4a e7       	ldi	r20, 0x7A	; 122
    5406:	55 e4       	ldi	r21, 0x45	; 69
    5408:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    540c:	dc 01       	movw	r26, r24
    540e:	cb 01       	movw	r24, r22
    5410:	8f 83       	std	Y+7, r24	; 0x07
    5412:	98 87       	std	Y+8, r25	; 0x08
    5414:	a9 87       	std	Y+9, r26	; 0x09
    5416:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5418:	6f 81       	ldd	r22, Y+7	; 0x07
    541a:	78 85       	ldd	r23, Y+8	; 0x08
    541c:	89 85       	ldd	r24, Y+9	; 0x09
    541e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5420:	20 e0       	ldi	r18, 0x00	; 0
    5422:	30 e0       	ldi	r19, 0x00	; 0
    5424:	40 e8       	ldi	r20, 0x80	; 128
    5426:	5f e3       	ldi	r21, 0x3F	; 63
    5428:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    542c:	88 23       	and	r24, r24
    542e:	2c f4       	brge	.+10     	; 0x543a <LCD_voidDisplayChar+0x180>
		__ticks = 1;
    5430:	81 e0       	ldi	r24, 0x01	; 1
    5432:	90 e0       	ldi	r25, 0x00	; 0
    5434:	9e 83       	std	Y+6, r25	; 0x06
    5436:	8d 83       	std	Y+5, r24	; 0x05
    5438:	3f c0       	rjmp	.+126    	; 0x54b8 <LCD_voidDisplayChar+0x1fe>
	else if (__tmp > 65535)
    543a:	6f 81       	ldd	r22, Y+7	; 0x07
    543c:	78 85       	ldd	r23, Y+8	; 0x08
    543e:	89 85       	ldd	r24, Y+9	; 0x09
    5440:	9a 85       	ldd	r25, Y+10	; 0x0a
    5442:	20 e0       	ldi	r18, 0x00	; 0
    5444:	3f ef       	ldi	r19, 0xFF	; 255
    5446:	4f e7       	ldi	r20, 0x7F	; 127
    5448:	57 e4       	ldi	r21, 0x47	; 71
    544a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    544e:	18 16       	cp	r1, r24
    5450:	4c f5       	brge	.+82     	; 0x54a4 <LCD_voidDisplayChar+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5452:	6b 85       	ldd	r22, Y+11	; 0x0b
    5454:	7c 85       	ldd	r23, Y+12	; 0x0c
    5456:	8d 85       	ldd	r24, Y+13	; 0x0d
    5458:	9e 85       	ldd	r25, Y+14	; 0x0e
    545a:	20 e0       	ldi	r18, 0x00	; 0
    545c:	30 e0       	ldi	r19, 0x00	; 0
    545e:	40 e2       	ldi	r20, 0x20	; 32
    5460:	51 e4       	ldi	r21, 0x41	; 65
    5462:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5466:	dc 01       	movw	r26, r24
    5468:	cb 01       	movw	r24, r22
    546a:	bc 01       	movw	r22, r24
    546c:	cd 01       	movw	r24, r26
    546e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5472:	dc 01       	movw	r26, r24
    5474:	cb 01       	movw	r24, r22
    5476:	9e 83       	std	Y+6, r25	; 0x06
    5478:	8d 83       	std	Y+5, r24	; 0x05
    547a:	0f c0       	rjmp	.+30     	; 0x549a <LCD_voidDisplayChar+0x1e0>
    547c:	80 e9       	ldi	r24, 0x90	; 144
    547e:	91 e0       	ldi	r25, 0x01	; 1
    5480:	9c 83       	std	Y+4, r25	; 0x04
    5482:	8b 83       	std	Y+3, r24	; 0x03
    5484:	8b 81       	ldd	r24, Y+3	; 0x03
    5486:	9c 81       	ldd	r25, Y+4	; 0x04
    5488:	01 97       	sbiw	r24, 0x01	; 1
    548a:	f1 f7       	brne	.-4      	; 0x5488 <LCD_voidDisplayChar+0x1ce>
    548c:	9c 83       	std	Y+4, r25	; 0x04
    548e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5490:	8d 81       	ldd	r24, Y+5	; 0x05
    5492:	9e 81       	ldd	r25, Y+6	; 0x06
    5494:	01 97       	sbiw	r24, 0x01	; 1
    5496:	9e 83       	std	Y+6, r25	; 0x06
    5498:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    549a:	8d 81       	ldd	r24, Y+5	; 0x05
    549c:	9e 81       	ldd	r25, Y+6	; 0x06
    549e:	00 97       	sbiw	r24, 0x00	; 0
    54a0:	69 f7       	brne	.-38     	; 0x547c <LCD_voidDisplayChar+0x1c2>
    54a2:	14 c0       	rjmp	.+40     	; 0x54cc <LCD_voidDisplayChar+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54a4:	6f 81       	ldd	r22, Y+7	; 0x07
    54a6:	78 85       	ldd	r23, Y+8	; 0x08
    54a8:	89 85       	ldd	r24, Y+9	; 0x09
    54aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    54ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    54b0:	dc 01       	movw	r26, r24
    54b2:	cb 01       	movw	r24, r22
    54b4:	9e 83       	std	Y+6, r25	; 0x06
    54b6:	8d 83       	std	Y+5, r24	; 0x05
    54b8:	8d 81       	ldd	r24, Y+5	; 0x05
    54ba:	9e 81       	ldd	r25, Y+6	; 0x06
    54bc:	9a 83       	std	Y+2, r25	; 0x02
    54be:	89 83       	std	Y+1, r24	; 0x01
    54c0:	89 81       	ldd	r24, Y+1	; 0x01
    54c2:	9a 81       	ldd	r25, Y+2	; 0x02
    54c4:	01 97       	sbiw	r24, 0x01	; 1
    54c6:	f1 f7       	brne	.-4      	; 0x54c4 <LCD_voidDisplayChar+0x20a>
    54c8:	9a 83       	std	Y+2, r25	; 0x02
    54ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    54cc:	6f 96       	adiw	r28, 0x1f	; 31
    54ce:	0f b6       	in	r0, 0x3f	; 63
    54d0:	f8 94       	cli
    54d2:	de bf       	out	0x3e, r29	; 62
    54d4:	0f be       	out	0x3f, r0	; 63
    54d6:	cd bf       	out	0x3d, r28	; 61
    54d8:	cf 91       	pop	r28
    54da:	df 91       	pop	r29
    54dc:	08 95       	ret

000054de <LCD_voidCMD>:
void LCD_voidCMD(LCD_CMD_Type cmd)
{
    54de:	df 93       	push	r29
    54e0:	cf 93       	push	r28
    54e2:	cd b7       	in	r28, 0x3d	; 61
    54e4:	de b7       	in	r29, 0x3e	; 62
    54e6:	6f 97       	sbiw	r28, 0x1f	; 31
    54e8:	0f b6       	in	r0, 0x3f	; 63
    54ea:	f8 94       	cli
    54ec:	de bf       	out	0x3e, r29	; 62
    54ee:	0f be       	out	0x3f, r0	; 63
    54f0:	cd bf       	out	0x3d, r28	; 61
    54f2:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 loc_MSB = cmd & ~LCDMASK;
    54f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    54f6:	80 7f       	andi	r24, 0xF0	; 240
    54f8:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 loc_LSB = (cmd<<4);
    54fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    54fc:	82 95       	swap	r24
    54fe:	80 7f       	andi	r24, 0xF0	; 240
    5500:	8d 8f       	std	Y+29, r24	; 0x1d
	//RS -> 0
	DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN1,DIO_LOW);
    5502:	81 e0       	ldi	r24, 0x01	; 1
    5504:	61 e0       	ldi	r22, 0x01	; 1
    5506:	40 e0       	ldi	r20, 0x00	; 0
    5508:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>


	//write MSB data to LCD
	DIO_voidWRITEChannelGroup(DIO_PORTA,loc_MSB,LCDMASK);
    550c:	80 e0       	ldi	r24, 0x00	; 0
    550e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    5510:	4f e0       	ldi	r20, 0x0F	; 15
    5512:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <DIO_voidWRITEChannelGroup>
	//send Enable pulse
	Pulse();
    5516:	0e 94 82 28 	call	0x5104	; 0x5104 <Pulse>
    551a:	80 e0       	ldi	r24, 0x00	; 0
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	a0 e0       	ldi	r26, 0x00	; 0
    5520:	b0 e4       	ldi	r27, 0x40	; 64
    5522:	89 8f       	std	Y+25, r24	; 0x19
    5524:	9a 8f       	std	Y+26, r25	; 0x1a
    5526:	ab 8f       	std	Y+27, r26	; 0x1b
    5528:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    552a:	69 8d       	ldd	r22, Y+25	; 0x19
    552c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    552e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5530:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5532:	20 e0       	ldi	r18, 0x00	; 0
    5534:	30 e0       	ldi	r19, 0x00	; 0
    5536:	4a e7       	ldi	r20, 0x7A	; 122
    5538:	55 e4       	ldi	r21, 0x45	; 69
    553a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    553e:	dc 01       	movw	r26, r24
    5540:	cb 01       	movw	r24, r22
    5542:	8d 8b       	std	Y+21, r24	; 0x15
    5544:	9e 8b       	std	Y+22, r25	; 0x16
    5546:	af 8b       	std	Y+23, r26	; 0x17
    5548:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    554a:	6d 89       	ldd	r22, Y+21	; 0x15
    554c:	7e 89       	ldd	r23, Y+22	; 0x16
    554e:	8f 89       	ldd	r24, Y+23	; 0x17
    5550:	98 8d       	ldd	r25, Y+24	; 0x18
    5552:	20 e0       	ldi	r18, 0x00	; 0
    5554:	30 e0       	ldi	r19, 0x00	; 0
    5556:	40 e8       	ldi	r20, 0x80	; 128
    5558:	5f e3       	ldi	r21, 0x3F	; 63
    555a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    555e:	88 23       	and	r24, r24
    5560:	2c f4       	brge	.+10     	; 0x556c <LCD_voidCMD+0x8e>
		__ticks = 1;
    5562:	81 e0       	ldi	r24, 0x01	; 1
    5564:	90 e0       	ldi	r25, 0x00	; 0
    5566:	9c 8b       	std	Y+20, r25	; 0x14
    5568:	8b 8b       	std	Y+19, r24	; 0x13
    556a:	3f c0       	rjmp	.+126    	; 0x55ea <LCD_voidCMD+0x10c>
	else if (__tmp > 65535)
    556c:	6d 89       	ldd	r22, Y+21	; 0x15
    556e:	7e 89       	ldd	r23, Y+22	; 0x16
    5570:	8f 89       	ldd	r24, Y+23	; 0x17
    5572:	98 8d       	ldd	r25, Y+24	; 0x18
    5574:	20 e0       	ldi	r18, 0x00	; 0
    5576:	3f ef       	ldi	r19, 0xFF	; 255
    5578:	4f e7       	ldi	r20, 0x7F	; 127
    557a:	57 e4       	ldi	r21, 0x47	; 71
    557c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5580:	18 16       	cp	r1, r24
    5582:	4c f5       	brge	.+82     	; 0x55d6 <LCD_voidCMD+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5584:	69 8d       	ldd	r22, Y+25	; 0x19
    5586:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5588:	8b 8d       	ldd	r24, Y+27	; 0x1b
    558a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    558c:	20 e0       	ldi	r18, 0x00	; 0
    558e:	30 e0       	ldi	r19, 0x00	; 0
    5590:	40 e2       	ldi	r20, 0x20	; 32
    5592:	51 e4       	ldi	r21, 0x41	; 65
    5594:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5598:	dc 01       	movw	r26, r24
    559a:	cb 01       	movw	r24, r22
    559c:	bc 01       	movw	r22, r24
    559e:	cd 01       	movw	r24, r26
    55a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    55a4:	dc 01       	movw	r26, r24
    55a6:	cb 01       	movw	r24, r22
    55a8:	9c 8b       	std	Y+20, r25	; 0x14
    55aa:	8b 8b       	std	Y+19, r24	; 0x13
    55ac:	0f c0       	rjmp	.+30     	; 0x55cc <LCD_voidCMD+0xee>
    55ae:	80 e9       	ldi	r24, 0x90	; 144
    55b0:	91 e0       	ldi	r25, 0x01	; 1
    55b2:	9a 8b       	std	Y+18, r25	; 0x12
    55b4:	89 8b       	std	Y+17, r24	; 0x11
    55b6:	89 89       	ldd	r24, Y+17	; 0x11
    55b8:	9a 89       	ldd	r25, Y+18	; 0x12
    55ba:	01 97       	sbiw	r24, 0x01	; 1
    55bc:	f1 f7       	brne	.-4      	; 0x55ba <LCD_voidCMD+0xdc>
    55be:	9a 8b       	std	Y+18, r25	; 0x12
    55c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55c2:	8b 89       	ldd	r24, Y+19	; 0x13
    55c4:	9c 89       	ldd	r25, Y+20	; 0x14
    55c6:	01 97       	sbiw	r24, 0x01	; 1
    55c8:	9c 8b       	std	Y+20, r25	; 0x14
    55ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55cc:	8b 89       	ldd	r24, Y+19	; 0x13
    55ce:	9c 89       	ldd	r25, Y+20	; 0x14
    55d0:	00 97       	sbiw	r24, 0x00	; 0
    55d2:	69 f7       	brne	.-38     	; 0x55ae <LCD_voidCMD+0xd0>
    55d4:	14 c0       	rjmp	.+40     	; 0x55fe <LCD_voidCMD+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55d6:	6d 89       	ldd	r22, Y+21	; 0x15
    55d8:	7e 89       	ldd	r23, Y+22	; 0x16
    55da:	8f 89       	ldd	r24, Y+23	; 0x17
    55dc:	98 8d       	ldd	r25, Y+24	; 0x18
    55de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    55e2:	dc 01       	movw	r26, r24
    55e4:	cb 01       	movw	r24, r22
    55e6:	9c 8b       	std	Y+20, r25	; 0x14
    55e8:	8b 8b       	std	Y+19, r24	; 0x13
    55ea:	8b 89       	ldd	r24, Y+19	; 0x13
    55ec:	9c 89       	ldd	r25, Y+20	; 0x14
    55ee:	98 8b       	std	Y+16, r25	; 0x10
    55f0:	8f 87       	std	Y+15, r24	; 0x0f
    55f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    55f4:	98 89       	ldd	r25, Y+16	; 0x10
    55f6:	01 97       	sbiw	r24, 0x01	; 1
    55f8:	f1 f7       	brne	.-4      	; 0x55f6 <LCD_voidCMD+0x118>
    55fa:	98 8b       	std	Y+16, r25	; 0x10
    55fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	//write LSB data to LCD
	DIO_voidWRITEChannelGroup(DIO_PORTA,loc_LSB,LCDMASK);
    55fe:	80 e0       	ldi	r24, 0x00	; 0
    5600:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5602:	4f e0       	ldi	r20, 0x0F	; 15
    5604:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <DIO_voidWRITEChannelGroup>
	//send Enable pulse
	Pulse();
    5608:	0e 94 82 28 	call	0x5104	; 0x5104 <Pulse>
    560c:	80 e0       	ldi	r24, 0x00	; 0
    560e:	90 e0       	ldi	r25, 0x00	; 0
    5610:	a0 e0       	ldi	r26, 0x00	; 0
    5612:	b0 e4       	ldi	r27, 0x40	; 64
    5614:	8b 87       	std	Y+11, r24	; 0x0b
    5616:	9c 87       	std	Y+12, r25	; 0x0c
    5618:	ad 87       	std	Y+13, r26	; 0x0d
    561a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    561c:	6b 85       	ldd	r22, Y+11	; 0x0b
    561e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5620:	8d 85       	ldd	r24, Y+13	; 0x0d
    5622:	9e 85       	ldd	r25, Y+14	; 0x0e
    5624:	20 e0       	ldi	r18, 0x00	; 0
    5626:	30 e0       	ldi	r19, 0x00	; 0
    5628:	4a e7       	ldi	r20, 0x7A	; 122
    562a:	55 e4       	ldi	r21, 0x45	; 69
    562c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5630:	dc 01       	movw	r26, r24
    5632:	cb 01       	movw	r24, r22
    5634:	8f 83       	std	Y+7, r24	; 0x07
    5636:	98 87       	std	Y+8, r25	; 0x08
    5638:	a9 87       	std	Y+9, r26	; 0x09
    563a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    563c:	6f 81       	ldd	r22, Y+7	; 0x07
    563e:	78 85       	ldd	r23, Y+8	; 0x08
    5640:	89 85       	ldd	r24, Y+9	; 0x09
    5642:	9a 85       	ldd	r25, Y+10	; 0x0a
    5644:	20 e0       	ldi	r18, 0x00	; 0
    5646:	30 e0       	ldi	r19, 0x00	; 0
    5648:	40 e8       	ldi	r20, 0x80	; 128
    564a:	5f e3       	ldi	r21, 0x3F	; 63
    564c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5650:	88 23       	and	r24, r24
    5652:	2c f4       	brge	.+10     	; 0x565e <LCD_voidCMD+0x180>
		__ticks = 1;
    5654:	81 e0       	ldi	r24, 0x01	; 1
    5656:	90 e0       	ldi	r25, 0x00	; 0
    5658:	9e 83       	std	Y+6, r25	; 0x06
    565a:	8d 83       	std	Y+5, r24	; 0x05
    565c:	3f c0       	rjmp	.+126    	; 0x56dc <LCD_voidCMD+0x1fe>
	else if (__tmp > 65535)
    565e:	6f 81       	ldd	r22, Y+7	; 0x07
    5660:	78 85       	ldd	r23, Y+8	; 0x08
    5662:	89 85       	ldd	r24, Y+9	; 0x09
    5664:	9a 85       	ldd	r25, Y+10	; 0x0a
    5666:	20 e0       	ldi	r18, 0x00	; 0
    5668:	3f ef       	ldi	r19, 0xFF	; 255
    566a:	4f e7       	ldi	r20, 0x7F	; 127
    566c:	57 e4       	ldi	r21, 0x47	; 71
    566e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5672:	18 16       	cp	r1, r24
    5674:	4c f5       	brge	.+82     	; 0x56c8 <LCD_voidCMD+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5676:	6b 85       	ldd	r22, Y+11	; 0x0b
    5678:	7c 85       	ldd	r23, Y+12	; 0x0c
    567a:	8d 85       	ldd	r24, Y+13	; 0x0d
    567c:	9e 85       	ldd	r25, Y+14	; 0x0e
    567e:	20 e0       	ldi	r18, 0x00	; 0
    5680:	30 e0       	ldi	r19, 0x00	; 0
    5682:	40 e2       	ldi	r20, 0x20	; 32
    5684:	51 e4       	ldi	r21, 0x41	; 65
    5686:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    568a:	dc 01       	movw	r26, r24
    568c:	cb 01       	movw	r24, r22
    568e:	bc 01       	movw	r22, r24
    5690:	cd 01       	movw	r24, r26
    5692:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5696:	dc 01       	movw	r26, r24
    5698:	cb 01       	movw	r24, r22
    569a:	9e 83       	std	Y+6, r25	; 0x06
    569c:	8d 83       	std	Y+5, r24	; 0x05
    569e:	0f c0       	rjmp	.+30     	; 0x56be <LCD_voidCMD+0x1e0>
    56a0:	80 e9       	ldi	r24, 0x90	; 144
    56a2:	91 e0       	ldi	r25, 0x01	; 1
    56a4:	9c 83       	std	Y+4, r25	; 0x04
    56a6:	8b 83       	std	Y+3, r24	; 0x03
    56a8:	8b 81       	ldd	r24, Y+3	; 0x03
    56aa:	9c 81       	ldd	r25, Y+4	; 0x04
    56ac:	01 97       	sbiw	r24, 0x01	; 1
    56ae:	f1 f7       	brne	.-4      	; 0x56ac <LCD_voidCMD+0x1ce>
    56b0:	9c 83       	std	Y+4, r25	; 0x04
    56b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56b4:	8d 81       	ldd	r24, Y+5	; 0x05
    56b6:	9e 81       	ldd	r25, Y+6	; 0x06
    56b8:	01 97       	sbiw	r24, 0x01	; 1
    56ba:	9e 83       	std	Y+6, r25	; 0x06
    56bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56be:	8d 81       	ldd	r24, Y+5	; 0x05
    56c0:	9e 81       	ldd	r25, Y+6	; 0x06
    56c2:	00 97       	sbiw	r24, 0x00	; 0
    56c4:	69 f7       	brne	.-38     	; 0x56a0 <LCD_voidCMD+0x1c2>
    56c6:	14 c0       	rjmp	.+40     	; 0x56f0 <LCD_voidCMD+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56c8:	6f 81       	ldd	r22, Y+7	; 0x07
    56ca:	78 85       	ldd	r23, Y+8	; 0x08
    56cc:	89 85       	ldd	r24, Y+9	; 0x09
    56ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    56d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    56d4:	dc 01       	movw	r26, r24
    56d6:	cb 01       	movw	r24, r22
    56d8:	9e 83       	std	Y+6, r25	; 0x06
    56da:	8d 83       	std	Y+5, r24	; 0x05
    56dc:	8d 81       	ldd	r24, Y+5	; 0x05
    56de:	9e 81       	ldd	r25, Y+6	; 0x06
    56e0:	9a 83       	std	Y+2, r25	; 0x02
    56e2:	89 83       	std	Y+1, r24	; 0x01
    56e4:	89 81       	ldd	r24, Y+1	; 0x01
    56e6:	9a 81       	ldd	r25, Y+2	; 0x02
    56e8:	01 97       	sbiw	r24, 0x01	; 1
    56ea:	f1 f7       	brne	.-4      	; 0x56e8 <LCD_voidCMD+0x20a>
    56ec:	9a 83       	std	Y+2, r25	; 0x02
    56ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    56f0:	6f 96       	adiw	r28, 0x1f	; 31
    56f2:	0f b6       	in	r0, 0x3f	; 63
    56f4:	f8 94       	cli
    56f6:	de bf       	out	0x3e, r29	; 62
    56f8:	0f be       	out	0x3f, r0	; 63
    56fa:	cd bf       	out	0x3d, r28	; 61
    56fc:	cf 91       	pop	r28
    56fe:	df 91       	pop	r29
    5700:	08 95       	ret

00005702 <LCD_voidMatrix>:
void LCD_voidMatrix(u8 row, u8 col)
{
    5702:	df 93       	push	r29
    5704:	cf 93       	push	r28
    5706:	00 d0       	rcall	.+0      	; 0x5708 <LCD_voidMatrix+0x6>
    5708:	00 d0       	rcall	.+0      	; 0x570a <LCD_voidMatrix+0x8>
    570a:	cd b7       	in	r28, 0x3d	; 61
    570c:	de b7       	in	r29, 0x3e	; 62
    570e:	89 83       	std	Y+1, r24	; 0x01
    5710:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    5712:	89 81       	ldd	r24, Y+1	; 0x01
    5714:	28 2f       	mov	r18, r24
    5716:	30 e0       	ldi	r19, 0x00	; 0
    5718:	3c 83       	std	Y+4, r19	; 0x04
    571a:	2b 83       	std	Y+3, r18	; 0x03
    571c:	8b 81       	ldd	r24, Y+3	; 0x03
    571e:	9c 81       	ldd	r25, Y+4	; 0x04
    5720:	00 97       	sbiw	r24, 0x00	; 0
    5722:	31 f0       	breq	.+12     	; 0x5730 <LCD_voidMatrix+0x2e>
    5724:	2b 81       	ldd	r18, Y+3	; 0x03
    5726:	3c 81       	ldd	r19, Y+4	; 0x04
    5728:	21 30       	cpi	r18, 0x01	; 1
    572a:	31 05       	cpc	r19, r1
    572c:	31 f0       	breq	.+12     	; 0x573a <LCD_voidMatrix+0x38>
    572e:	09 c0       	rjmp	.+18     	; 0x5742 <LCD_voidMatrix+0x40>
	{
	case 0:
		LCD_voidCMD(0x80 + col);
    5730:	8a 81       	ldd	r24, Y+2	; 0x02
    5732:	80 58       	subi	r24, 0x80	; 128
    5734:	0e 94 6f 2a 	call	0x54de	; 0x54de <LCD_voidCMD>
    5738:	04 c0       	rjmp	.+8      	; 0x5742 <LCD_voidMatrix+0x40>
		break;
	case 1:
		LCD_voidCMD(0xC0 + col);
    573a:	8a 81       	ldd	r24, Y+2	; 0x02
    573c:	80 54       	subi	r24, 0x40	; 64
    573e:	0e 94 6f 2a 	call	0x54de	; 0x54de <LCD_voidCMD>
		break;
	}

}
    5742:	0f 90       	pop	r0
    5744:	0f 90       	pop	r0
    5746:	0f 90       	pop	r0
    5748:	0f 90       	pop	r0
    574a:	cf 91       	pop	r28
    574c:	df 91       	pop	r29
    574e:	08 95       	ret

00005750 <LCD_voidDisplayStr>:

void LCD_voidDisplayStr(u8 str[])
{
    5750:	df 93       	push	r29
    5752:	cf 93       	push	r28
    5754:	00 d0       	rcall	.+0      	; 0x5756 <LCD_voidDisplayStr+0x6>
    5756:	00 d0       	rcall	.+0      	; 0x5758 <LCD_voidDisplayStr+0x8>
    5758:	cd b7       	in	r28, 0x3d	; 61
    575a:	de b7       	in	r29, 0x3e	; 62
    575c:	9c 83       	std	Y+4, r25	; 0x04
    575e:	8b 83       	std	Y+3, r24	; 0x03
//	while (str[i] != '\0')
//	{
//		LCD_voidDisplayChar(str[i]);
//		i++;
//	}
	for (int i=0; i<32;i++)
    5760:	1a 82       	std	Y+2, r1	; 0x02
    5762:	19 82       	std	Y+1, r1	; 0x01
    5764:	22 c0       	rjmp	.+68     	; 0x57aa <LCD_voidDisplayStr+0x5a>
	{
		if (str[i] != '\0')
    5766:	29 81       	ldd	r18, Y+1	; 0x01
    5768:	3a 81       	ldd	r19, Y+2	; 0x02
    576a:	8b 81       	ldd	r24, Y+3	; 0x03
    576c:	9c 81       	ldd	r25, Y+4	; 0x04
    576e:	fc 01       	movw	r30, r24
    5770:	e2 0f       	add	r30, r18
    5772:	f3 1f       	adc	r31, r19
    5774:	80 81       	ld	r24, Z
    5776:	88 23       	and	r24, r24
    5778:	e9 f0       	breq	.+58     	; 0x57b4 <LCD_voidDisplayStr+0x64>
		{
			if (i==15)
    577a:	89 81       	ldd	r24, Y+1	; 0x01
    577c:	9a 81       	ldd	r25, Y+2	; 0x02
    577e:	8f 30       	cpi	r24, 0x0F	; 15
    5780:	91 05       	cpc	r25, r1
    5782:	21 f4       	brne	.+8      	; 0x578c <LCD_voidDisplayStr+0x3c>
			{
				LCD_voidMatrix(1,0);
    5784:	81 e0       	ldi	r24, 0x01	; 1
    5786:	60 e0       	ldi	r22, 0x00	; 0
    5788:	0e 94 81 2b 	call	0x5702	; 0x5702 <LCD_voidMatrix>
			}
			LCD_voidDisplayChar(str[i]);
    578c:	29 81       	ldd	r18, Y+1	; 0x01
    578e:	3a 81       	ldd	r19, Y+2	; 0x02
    5790:	8b 81       	ldd	r24, Y+3	; 0x03
    5792:	9c 81       	ldd	r25, Y+4	; 0x04
    5794:	fc 01       	movw	r30, r24
    5796:	e2 0f       	add	r30, r18
    5798:	f3 1f       	adc	r31, r19
    579a:	80 81       	ld	r24, Z
    579c:	0e 94 5d 29 	call	0x52ba	; 0x52ba <LCD_voidDisplayChar>
//	while (str[i] != '\0')
//	{
//		LCD_voidDisplayChar(str[i]);
//		i++;
//	}
	for (int i=0; i<32;i++)
    57a0:	89 81       	ldd	r24, Y+1	; 0x01
    57a2:	9a 81       	ldd	r25, Y+2	; 0x02
    57a4:	01 96       	adiw	r24, 0x01	; 1
    57a6:	9a 83       	std	Y+2, r25	; 0x02
    57a8:	89 83       	std	Y+1, r24	; 0x01
    57aa:	89 81       	ldd	r24, Y+1	; 0x01
    57ac:	9a 81       	ldd	r25, Y+2	; 0x02
    57ae:	80 32       	cpi	r24, 0x20	; 32
    57b0:	91 05       	cpc	r25, r1
    57b2:	cc f2       	brlt	.-78     	; 0x5766 <LCD_voidDisplayStr+0x16>
		else
		{
			break;
		}
	}
}
    57b4:	0f 90       	pop	r0
    57b6:	0f 90       	pop	r0
    57b8:	0f 90       	pop	r0
    57ba:	0f 90       	pop	r0
    57bc:	cf 91       	pop	r28
    57be:	df 91       	pop	r29
    57c0:	08 95       	ret

000057c2 <LCD_voidDIsplayInteger>:
void LCD_voidDIsplayInteger(u32 num)
{
    57c2:	df 93       	push	r29
    57c4:	cf 93       	push	r28
    57c6:	cd b7       	in	r28, 0x3d	; 61
    57c8:	de b7       	in	r29, 0x3e	; 62
    57ca:	29 97       	sbiw	r28, 0x09	; 9
    57cc:	0f b6       	in	r0, 0x3f	; 63
    57ce:	f8 94       	cli
    57d0:	de bf       	out	0x3e, r29	; 62
    57d2:	0f be       	out	0x3f, r0	; 63
    57d4:	cd bf       	out	0x3d, r28	; 61
    57d6:	6e 83       	std	Y+6, r22	; 0x06
    57d8:	7f 83       	std	Y+7, r23	; 0x07
    57da:	88 87       	std	Y+8, r24	; 0x08
    57dc:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer[5];
	sprintf(buffer,"%d",num);
    57de:	8d b7       	in	r24, 0x3d	; 61
    57e0:	9e b7       	in	r25, 0x3e	; 62
    57e2:	08 97       	sbiw	r24, 0x08	; 8
    57e4:	0f b6       	in	r0, 0x3f	; 63
    57e6:	f8 94       	cli
    57e8:	9e bf       	out	0x3e, r25	; 62
    57ea:	0f be       	out	0x3f, r0	; 63
    57ec:	8d bf       	out	0x3d, r24	; 61
    57ee:	ed b7       	in	r30, 0x3d	; 61
    57f0:	fe b7       	in	r31, 0x3e	; 62
    57f2:	31 96       	adiw	r30, 0x01	; 1
    57f4:	ce 01       	movw	r24, r28
    57f6:	01 96       	adiw	r24, 0x01	; 1
    57f8:	91 83       	std	Z+1, r25	; 0x01
    57fa:	80 83       	st	Z, r24
    57fc:	8c e7       	ldi	r24, 0x7C	; 124
    57fe:	90 e0       	ldi	r25, 0x00	; 0
    5800:	93 83       	std	Z+3, r25	; 0x03
    5802:	82 83       	std	Z+2, r24	; 0x02
    5804:	8e 81       	ldd	r24, Y+6	; 0x06
    5806:	9f 81       	ldd	r25, Y+7	; 0x07
    5808:	a8 85       	ldd	r26, Y+8	; 0x08
    580a:	b9 85       	ldd	r27, Y+9	; 0x09
    580c:	84 83       	std	Z+4, r24	; 0x04
    580e:	95 83       	std	Z+5, r25	; 0x05
    5810:	a6 83       	std	Z+6, r26	; 0x06
    5812:	b7 83       	std	Z+7, r27	; 0x07
    5814:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <sprintf>
    5818:	8d b7       	in	r24, 0x3d	; 61
    581a:	9e b7       	in	r25, 0x3e	; 62
    581c:	08 96       	adiw	r24, 0x08	; 8
    581e:	0f b6       	in	r0, 0x3f	; 63
    5820:	f8 94       	cli
    5822:	9e bf       	out	0x3e, r25	; 62
    5824:	0f be       	out	0x3f, r0	; 63
    5826:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDisplayStr(buffer);
    5828:	ce 01       	movw	r24, r28
    582a:	01 96       	adiw	r24, 0x01	; 1
    582c:	0e 94 a8 2b 	call	0x5750	; 0x5750 <LCD_voidDisplayStr>
}
    5830:	29 96       	adiw	r28, 0x09	; 9
    5832:	0f b6       	in	r0, 0x3f	; 63
    5834:	f8 94       	cli
    5836:	de bf       	out	0x3e, r29	; 62
    5838:	0f be       	out	0x3f, r0	; 63
    583a:	cd bf       	out	0x3d, r28	; 61
    583c:	cf 91       	pop	r28
    583e:	df 91       	pop	r29
    5840:	08 95       	ret

00005842 <LCD_voidCustomChar1>:
void LCD_voidCustomChar1(void)
{
    5842:	df 93       	push	r29
    5844:	cf 93       	push	r28
    5846:	cd b7       	in	r28, 0x3d	; 61
    5848:	de b7       	in	r29, 0x3e	; 62
    584a:	2e 97       	sbiw	r28, 0x0e	; 14
    584c:	0f b6       	in	r0, 0x3f	; 63
    584e:	f8 94       	cli
    5850:	de bf       	out	0x3e, r29	; 62
    5852:	0f be       	out	0x3f, r0	; 63
    5854:	cd bf       	out	0x3d, r28	; 61
	u8 cntr=0;
    5856:	19 82       	std	Y+1, r1	; 0x01
			0b10101,
			0b10001,
			0b01010,
			0b00100,
			0b00000
	};
    5858:	ce 01       	movw	r24, r28
    585a:	02 96       	adiw	r24, 0x02	; 2
    585c:	9b 87       	std	Y+11, r25	; 0x0b
    585e:	8a 87       	std	Y+10, r24	; 0x0a
    5860:	ed e9       	ldi	r30, 0x9D	; 157
    5862:	f1 e0       	ldi	r31, 0x01	; 1
    5864:	fd 87       	std	Y+13, r31	; 0x0d
    5866:	ec 87       	std	Y+12, r30	; 0x0c
    5868:	f8 e0       	ldi	r31, 0x08	; 8
    586a:	fe 87       	std	Y+14, r31	; 0x0e
    586c:	ec 85       	ldd	r30, Y+12	; 0x0c
    586e:	fd 85       	ldd	r31, Y+13	; 0x0d
    5870:	00 80       	ld	r0, Z
    5872:	8c 85       	ldd	r24, Y+12	; 0x0c
    5874:	9d 85       	ldd	r25, Y+13	; 0x0d
    5876:	01 96       	adiw	r24, 0x01	; 1
    5878:	9d 87       	std	Y+13, r25	; 0x0d
    587a:	8c 87       	std	Y+12, r24	; 0x0c
    587c:	ea 85       	ldd	r30, Y+10	; 0x0a
    587e:	fb 85       	ldd	r31, Y+11	; 0x0b
    5880:	00 82       	st	Z, r0
    5882:	8a 85       	ldd	r24, Y+10	; 0x0a
    5884:	9b 85       	ldd	r25, Y+11	; 0x0b
    5886:	01 96       	adiw	r24, 0x01	; 1
    5888:	9b 87       	std	Y+11, r25	; 0x0b
    588a:	8a 87       	std	Y+10, r24	; 0x0a
    588c:	9e 85       	ldd	r25, Y+14	; 0x0e
    588e:	91 50       	subi	r25, 0x01	; 1
    5890:	9e 87       	std	Y+14, r25	; 0x0e
    5892:	ee 85       	ldd	r30, Y+14	; 0x0e
    5894:	ee 23       	and	r30, r30
    5896:	51 f7       	brne	.-44     	; 0x586c <LCD_voidCustomChar1+0x2a>
	for (cntr=0;cntr<8;cntr++)
    5898:	19 82       	std	Y+1, r1	; 0x01
    589a:	12 c0       	rjmp	.+36     	; 0x58c0 <LCD_voidCustomChar1+0x7e>
	{
		LCD_voidCMD(0x40+cntr);
    589c:	89 81       	ldd	r24, Y+1	; 0x01
    589e:	80 5c       	subi	r24, 0xC0	; 192
    58a0:	0e 94 6f 2a 	call	0x54de	; 0x54de <LCD_voidCMD>
		LCD_voidDisplayChar(customChar[cntr]);
    58a4:	89 81       	ldd	r24, Y+1	; 0x01
    58a6:	28 2f       	mov	r18, r24
    58a8:	30 e0       	ldi	r19, 0x00	; 0
    58aa:	ce 01       	movw	r24, r28
    58ac:	02 96       	adiw	r24, 0x02	; 2
    58ae:	fc 01       	movw	r30, r24
    58b0:	e2 0f       	add	r30, r18
    58b2:	f3 1f       	adc	r31, r19
    58b4:	80 81       	ld	r24, Z
    58b6:	0e 94 5d 29 	call	0x52ba	; 0x52ba <LCD_voidDisplayChar>
			0b10001,
			0b01010,
			0b00100,
			0b00000
	};
	for (cntr=0;cntr<8;cntr++)
    58ba:	89 81       	ldd	r24, Y+1	; 0x01
    58bc:	8f 5f       	subi	r24, 0xFF	; 255
    58be:	89 83       	std	Y+1, r24	; 0x01
    58c0:	89 81       	ldd	r24, Y+1	; 0x01
    58c2:	88 30       	cpi	r24, 0x08	; 8
    58c4:	58 f3       	brcs	.-42     	; 0x589c <LCD_voidCustomChar1+0x5a>
	{
		LCD_voidCMD(0x40+cntr);
		LCD_voidDisplayChar(customChar[cntr]);
	}
	LCD_voidCMD(0x8E); //Equivalent to LCD_voidMatrix(0,0);
    58c6:	8e e8       	ldi	r24, 0x8E	; 142
    58c8:	0e 94 6f 2a 	call	0x54de	; 0x54de <LCD_voidCMD>
	LCD_voidDisplayChar(0); //Placement
    58cc:	80 e0       	ldi	r24, 0x00	; 0
    58ce:	0e 94 5d 29 	call	0x52ba	; 0x52ba <LCD_voidDisplayChar>
}
    58d2:	2e 96       	adiw	r28, 0x0e	; 14
    58d4:	0f b6       	in	r0, 0x3f	; 63
    58d6:	f8 94       	cli
    58d8:	de bf       	out	0x3e, r29	; 62
    58da:	0f be       	out	0x3f, r0	; 63
    58dc:	cd bf       	out	0x3d, r28	; 61
    58de:	cf 91       	pop	r28
    58e0:	df 91       	pop	r29
    58e2:	08 95       	ret

000058e4 <LCD_voidDisplayFloat>:
void LCD_voidDisplayFloat(f64 num)
{
    58e4:	df 93       	push	r29
    58e6:	cf 93       	push	r28
    58e8:	cd b7       	in	r28, 0x3d	; 61
    58ea:	de b7       	in	r29, 0x3e	; 62
    58ec:	2e 97       	sbiw	r28, 0x0e	; 14
    58ee:	0f b6       	in	r0, 0x3f	; 63
    58f0:	f8 94       	cli
    58f2:	de bf       	out	0x3e, r29	; 62
    58f4:	0f be       	out	0x3f, r0	; 63
    58f6:	cd bf       	out	0x3d, r28	; 61
    58f8:	6b 87       	std	Y+11, r22	; 0x0b
    58fa:	7c 87       	std	Y+12, r23	; 0x0c
    58fc:	8d 87       	std	Y+13, r24	; 0x0d
    58fe:	9e 87       	std	Y+14, r25	; 0x0e
	u8 buffer[10];
	sprintf(buffer,"%1.2f",num);
    5900:	8d b7       	in	r24, 0x3d	; 61
    5902:	9e b7       	in	r25, 0x3e	; 62
    5904:	08 97       	sbiw	r24, 0x08	; 8
    5906:	0f b6       	in	r0, 0x3f	; 63
    5908:	f8 94       	cli
    590a:	9e bf       	out	0x3e, r25	; 62
    590c:	0f be       	out	0x3f, r0	; 63
    590e:	8d bf       	out	0x3d, r24	; 61
    5910:	ed b7       	in	r30, 0x3d	; 61
    5912:	fe b7       	in	r31, 0x3e	; 62
    5914:	31 96       	adiw	r30, 0x01	; 1
    5916:	ce 01       	movw	r24, r28
    5918:	01 96       	adiw	r24, 0x01	; 1
    591a:	91 83       	std	Z+1, r25	; 0x01
    591c:	80 83       	st	Z, r24
    591e:	8f e7       	ldi	r24, 0x7F	; 127
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	93 83       	std	Z+3, r25	; 0x03
    5924:	82 83       	std	Z+2, r24	; 0x02
    5926:	8b 85       	ldd	r24, Y+11	; 0x0b
    5928:	9c 85       	ldd	r25, Y+12	; 0x0c
    592a:	ad 85       	ldd	r26, Y+13	; 0x0d
    592c:	be 85       	ldd	r27, Y+14	; 0x0e
    592e:	84 83       	std	Z+4, r24	; 0x04
    5930:	95 83       	std	Z+5, r25	; 0x05
    5932:	a6 83       	std	Z+6, r26	; 0x06
    5934:	b7 83       	std	Z+7, r27	; 0x07
    5936:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <sprintf>
    593a:	8d b7       	in	r24, 0x3d	; 61
    593c:	9e b7       	in	r25, 0x3e	; 62
    593e:	08 96       	adiw	r24, 0x08	; 8
    5940:	0f b6       	in	r0, 0x3f	; 63
    5942:	f8 94       	cli
    5944:	9e bf       	out	0x3e, r25	; 62
    5946:	0f be       	out	0x3f, r0	; 63
    5948:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDisplayStr(buffer);
    594a:	ce 01       	movw	r24, r28
    594c:	01 96       	adiw	r24, 0x01	; 1
    594e:	0e 94 a8 2b 	call	0x5750	; 0x5750 <LCD_voidDisplayStr>
}
    5952:	2e 96       	adiw	r28, 0x0e	; 14
    5954:	0f b6       	in	r0, 0x3f	; 63
    5956:	f8 94       	cli
    5958:	de bf       	out	0x3e, r29	; 62
    595a:	0f be       	out	0x3f, r0	; 63
    595c:	cd bf       	out	0x3d, r28	; 61
    595e:	cf 91       	pop	r28
    5960:	df 91       	pop	r29
    5962:	08 95       	ret

00005964 <KEYPAD_voidInit>:
		{'7','8','9','C'},
		{'*','0','#','D'}
};

void KEYPAD_voidInit(void)
{
    5964:	df 93       	push	r29
    5966:	cf 93       	push	r28
    5968:	cd b7       	in	r28, 0x3d	; 61
    596a:	de b7       	in	r29, 0x3e	; 62
	//Configure rows
	DIO_voidconfigureChannel(DIO_PORTC,DIO_PIN0,DIO_INPUT);
    596c:	82 e0       	ldi	r24, 0x02	; 2
    596e:	60 e0       	ldi	r22, 0x00	; 0
    5970:	40 e0       	ldi	r20, 0x00	; 0
    5972:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTC,DIO_PIN1,DIO_INPUT);
    5976:	82 e0       	ldi	r24, 0x02	; 2
    5978:	61 e0       	ldi	r22, 0x01	; 1
    597a:	40 e0       	ldi	r20, 0x00	; 0
    597c:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTC,DIO_PIN2,DIO_INPUT);
    5980:	82 e0       	ldi	r24, 0x02	; 2
    5982:	62 e0       	ldi	r22, 0x02	; 2
    5984:	40 e0       	ldi	r20, 0x00	; 0
    5986:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTC,DIO_PIN3,DIO_INPUT);
    598a:	82 e0       	ldi	r24, 0x02	; 2
    598c:	63 e0       	ldi	r22, 0x03	; 3
    598e:	40 e0       	ldi	r20, 0x00	; 0
    5990:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>

	//Configure columns
	DIO_voidconfigureChannel(DIO_PORTC,DIO_PIN4,DIO_OUTPUT);
    5994:	82 e0       	ldi	r24, 0x02	; 2
    5996:	64 e0       	ldi	r22, 0x04	; 4
    5998:	41 e0       	ldi	r20, 0x01	; 1
    599a:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTC,DIO_PIN5,DIO_OUTPUT);
    599e:	82 e0       	ldi	r24, 0x02	; 2
    59a0:	65 e0       	ldi	r22, 0x05	; 5
    59a2:	41 e0       	ldi	r20, 0x01	; 1
    59a4:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTC,DIO_PIN6,DIO_OUTPUT);
    59a8:	82 e0       	ldi	r24, 0x02	; 2
    59aa:	66 e0       	ldi	r22, 0x06	; 6
    59ac:	41 e0       	ldi	r20, 0x01	; 1
    59ae:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTC,DIO_PIN7,DIO_OUTPUT);
    59b2:	82 e0       	ldi	r24, 0x02	; 2
    59b4:	67 e0       	ldi	r22, 0x07	; 7
    59b6:	41 e0       	ldi	r20, 0x01	; 1
    59b8:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>

	//Write in each column zeros
	DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN4,DIO_LOW);
    59bc:	82 e0       	ldi	r24, 0x02	; 2
    59be:	64 e0       	ldi	r22, 0x04	; 4
    59c0:	40 e0       	ldi	r20, 0x00	; 0
    59c2:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN5,DIO_LOW);
    59c6:	82 e0       	ldi	r24, 0x02	; 2
    59c8:	65 e0       	ldi	r22, 0x05	; 5
    59ca:	40 e0       	ldi	r20, 0x00	; 0
    59cc:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN6,DIO_LOW);
    59d0:	82 e0       	ldi	r24, 0x02	; 2
    59d2:	66 e0       	ldi	r22, 0x06	; 6
    59d4:	40 e0       	ldi	r20, 0x00	; 0
    59d6:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN7,DIO_LOW);
    59da:	82 e0       	ldi	r24, 0x02	; 2
    59dc:	67 e0       	ldi	r22, 0x07	; 7
    59de:	40 e0       	ldi	r20, 0x00	; 0
    59e0:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>

	DIO_voidPULLUpEnable(DIO_PORTC,DIO_PIN0);
    59e4:	82 e0       	ldi	r24, 0x02	; 2
    59e6:	60 e0       	ldi	r22, 0x00	; 0
    59e8:	0e 94 34 38 	call	0x7068	; 0x7068 <DIO_voidPULLUpEnable>
	DIO_voidPULLUpEnable(DIO_PORTC,DIO_PIN1);
    59ec:	82 e0       	ldi	r24, 0x02	; 2
    59ee:	61 e0       	ldi	r22, 0x01	; 1
    59f0:	0e 94 34 38 	call	0x7068	; 0x7068 <DIO_voidPULLUpEnable>
	DIO_voidPULLUpEnable(DIO_PORTC,DIO_PIN2);
    59f4:	82 e0       	ldi	r24, 0x02	; 2
    59f6:	62 e0       	ldi	r22, 0x02	; 2
    59f8:	0e 94 34 38 	call	0x7068	; 0x7068 <DIO_voidPULLUpEnable>
	DIO_voidPULLUpEnable(DIO_PORTC,DIO_PIN3);
    59fc:	82 e0       	ldi	r24, 0x02	; 2
    59fe:	63 e0       	ldi	r22, 0x03	; 3
    5a00:	0e 94 34 38 	call	0x7068	; 0x7068 <DIO_voidPULLUpEnable>
}
    5a04:	cf 91       	pop	r28
    5a06:	df 91       	pop	r29
    5a08:	08 95       	ret

00005a0a <KEYPAD_RESET>:
void KEYPAD_RESET(void)
{
    5a0a:	df 93       	push	r29
    5a0c:	cf 93       	push	r28
    5a0e:	cd b7       	in	r28, 0x3d	; 61
    5a10:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN4,DIO_LOW);
    5a12:	82 e0       	ldi	r24, 0x02	; 2
    5a14:	64 e0       	ldi	r22, 0x04	; 4
    5a16:	40 e0       	ldi	r20, 0x00	; 0
    5a18:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN5,DIO_LOW);
    5a1c:	82 e0       	ldi	r24, 0x02	; 2
    5a1e:	65 e0       	ldi	r22, 0x05	; 5
    5a20:	40 e0       	ldi	r20, 0x00	; 0
    5a22:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN6,DIO_LOW);
    5a26:	82 e0       	ldi	r24, 0x02	; 2
    5a28:	66 e0       	ldi	r22, 0x06	; 6
    5a2a:	40 e0       	ldi	r20, 0x00	; 0
    5a2c:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN7,DIO_LOW);
    5a30:	82 e0       	ldi	r24, 0x02	; 2
    5a32:	67 e0       	ldi	r22, 0x07	; 7
    5a34:	40 e0       	ldi	r20, 0x00	; 0
    5a36:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
}
    5a3a:	cf 91       	pop	r28
    5a3c:	df 91       	pop	r29
    5a3e:	08 95       	ret

00005a40 <KEYPAD_PRESSED>:
static boolean KEYPAD_PRESSED(void)
{
    5a40:	df 93       	push	r29
    5a42:	cf 93       	push	r28
    5a44:	0f 92       	push	r0
    5a46:	cd b7       	in	r28, 0x3d	; 61
    5a48:	de b7       	in	r29, 0x3e	; 62
	if (
    5a4a:	82 e0       	ldi	r24, 0x02	; 2
    5a4c:	60 e0       	ldi	r22, 0x00	; 0
    5a4e:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <DIO_voidREADChannel>
    5a52:	88 23       	and	r24, r24
    5a54:	91 f0       	breq	.+36     	; 0x5a7a <KEYPAD_PRESSED+0x3a>
    5a56:	82 e0       	ldi	r24, 0x02	; 2
    5a58:	61 e0       	ldi	r22, 0x01	; 1
    5a5a:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <DIO_voidREADChannel>
    5a5e:	88 23       	and	r24, r24
    5a60:	61 f0       	breq	.+24     	; 0x5a7a <KEYPAD_PRESSED+0x3a>
    5a62:	82 e0       	ldi	r24, 0x02	; 2
    5a64:	62 e0       	ldi	r22, 0x02	; 2
    5a66:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <DIO_voidREADChannel>
    5a6a:	88 23       	and	r24, r24
    5a6c:	31 f0       	breq	.+12     	; 0x5a7a <KEYPAD_PRESSED+0x3a>
    5a6e:	82 e0       	ldi	r24, 0x02	; 2
    5a70:	63 e0       	ldi	r22, 0x03	; 3
    5a72:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <DIO_voidREADChannel>
    5a76:	88 23       	and	r24, r24
    5a78:	11 f4       	brne	.+4      	; 0x5a7e <KEYPAD_PRESSED+0x3e>
			DIO_voidREADChannel(DIO_PORTC,DIO_PIN1) == DIO_LOW ||
			DIO_voidREADChannel(DIO_PORTC,DIO_PIN2) == DIO_LOW ||
			DIO_voidREADChannel(DIO_PORTC,DIO_PIN3) == DIO_LOW
	)
	{
		return TRUE;
    5a7a:	19 82       	std	Y+1, r1	; 0x01
    5a7c:	02 c0       	rjmp	.+4      	; 0x5a82 <KEYPAD_PRESSED+0x42>
	}
	else
	{
		return FALSE;
    5a7e:	81 e0       	ldi	r24, 0x01	; 1
    5a80:	89 83       	std	Y+1, r24	; 0x01
    5a82:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    5a84:	0f 90       	pop	r0
    5a86:	cf 91       	pop	r28
    5a88:	df 91       	pop	r29
    5a8a:	08 95       	ret

00005a8c <KEYPAD_FindRow>:

static KP_ROW_T KEYPAD_FindRow(void)
{
    5a8c:	df 93       	push	r29
    5a8e:	cf 93       	push	r28
    5a90:	0f 92       	push	r0
    5a92:	cd b7       	in	r28, 0x3d	; 61
    5a94:	de b7       	in	r29, 0x3e	; 62
	KP_ROW_T loc_ButtonRow = KP_NOROW;
    5a96:	8f ef       	ldi	r24, 0xFF	; 255
    5a98:	89 83       	std	Y+1, r24	; 0x01
	if (DIO_voidREADChannel(DIO_PORTC,DIO_PIN0)==DIO_LOW)
    5a9a:	82 e0       	ldi	r24, 0x02	; 2
    5a9c:	60 e0       	ldi	r22, 0x00	; 0
    5a9e:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <DIO_voidREADChannel>
    5aa2:	88 23       	and	r24, r24
    5aa4:	11 f4       	brne	.+4      	; 0x5aaa <KEYPAD_FindRow+0x1e>
	{
		loc_ButtonRow = KP_ROW0;
    5aa6:	19 82       	std	Y+1, r1	; 0x01
    5aa8:	1d c0       	rjmp	.+58     	; 0x5ae4 <KEYPAD_FindRow+0x58>
	}
	else if  (DIO_voidREADChannel(DIO_PORTC,DIO_PIN1)==DIO_LOW)
    5aaa:	82 e0       	ldi	r24, 0x02	; 2
    5aac:	61 e0       	ldi	r22, 0x01	; 1
    5aae:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <DIO_voidREADChannel>
    5ab2:	88 23       	and	r24, r24
    5ab4:	19 f4       	brne	.+6      	; 0x5abc <KEYPAD_FindRow+0x30>
	{
		loc_ButtonRow = KP_ROW1;
    5ab6:	81 e0       	ldi	r24, 0x01	; 1
    5ab8:	89 83       	std	Y+1, r24	; 0x01
    5aba:	14 c0       	rjmp	.+40     	; 0x5ae4 <KEYPAD_FindRow+0x58>
	}
	else if  (DIO_voidREADChannel(DIO_PORTC,DIO_PIN2)==DIO_LOW)
    5abc:	82 e0       	ldi	r24, 0x02	; 2
    5abe:	62 e0       	ldi	r22, 0x02	; 2
    5ac0:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <DIO_voidREADChannel>
    5ac4:	88 23       	and	r24, r24
    5ac6:	19 f4       	brne	.+6      	; 0x5ace <KEYPAD_FindRow+0x42>
	{
		loc_ButtonRow = KP_ROW2;
    5ac8:	82 e0       	ldi	r24, 0x02	; 2
    5aca:	89 83       	std	Y+1, r24	; 0x01
    5acc:	0b c0       	rjmp	.+22     	; 0x5ae4 <KEYPAD_FindRow+0x58>
	}
	else if  (DIO_voidREADChannel(DIO_PORTC,DIO_PIN3)==DIO_LOW)
    5ace:	82 e0       	ldi	r24, 0x02	; 2
    5ad0:	63 e0       	ldi	r22, 0x03	; 3
    5ad2:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <DIO_voidREADChannel>
    5ad6:	88 23       	and	r24, r24
    5ad8:	19 f4       	brne	.+6      	; 0x5ae0 <KEYPAD_FindRow+0x54>
	{
		loc_ButtonRow = KP_ROW3;
    5ada:	83 e0       	ldi	r24, 0x03	; 3
    5adc:	89 83       	std	Y+1, r24	; 0x01
    5ade:	02 c0       	rjmp	.+4      	; 0x5ae4 <KEYPAD_FindRow+0x58>
	}
	else
	{
		loc_ButtonRow = -1;
    5ae0:	8f ef       	ldi	r24, 0xFF	; 255
    5ae2:	89 83       	std	Y+1, r24	; 0x01
	}

	return loc_ButtonRow;
    5ae4:	89 81       	ldd	r24, Y+1	; 0x01
}
    5ae6:	0f 90       	pop	r0
    5ae8:	cf 91       	pop	r28
    5aea:	df 91       	pop	r29
    5aec:	08 95       	ret

00005aee <KEYPAD_FindCol>:
static KP_COL_T KEYPAD_FindCol(KP_ROW_T CurrentRow)
{
    5aee:	df 93       	push	r29
    5af0:	cf 93       	push	r28
    5af2:	00 d0       	rcall	.+0      	; 0x5af4 <KEYPAD_FindCol+0x6>
    5af4:	cd b7       	in	r28, 0x3d	; 61
    5af6:	de b7       	in	r29, 0x3e	; 62
    5af8:	8a 83       	std	Y+2, r24	; 0x02
	KP_COL_T loc_ButtonCol = KP_NOCOL;
    5afa:	8f ef       	ldi	r24, 0xFF	; 255
    5afc:	89 83       	std	Y+1, r24	; 0x01
	// 0 1 1 1
	DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN4,DIO_LOW);
    5afe:	82 e0       	ldi	r24, 0x02	; 2
    5b00:	64 e0       	ldi	r22, 0x04	; 4
    5b02:	40 e0       	ldi	r20, 0x00	; 0
    5b04:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN5,DIO_HIGH);
    5b08:	82 e0       	ldi	r24, 0x02	; 2
    5b0a:	65 e0       	ldi	r22, 0x05	; 5
    5b0c:	41 e0       	ldi	r20, 0x01	; 1
    5b0e:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN6,DIO_HIGH);
    5b12:	82 e0       	ldi	r24, 0x02	; 2
    5b14:	66 e0       	ldi	r22, 0x06	; 6
    5b16:	41 e0       	ldi	r20, 0x01	; 1
    5b18:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    5b1c:	82 e0       	ldi	r24, 0x02	; 2
    5b1e:	67 e0       	ldi	r22, 0x07	; 7
    5b20:	41 e0       	ldi	r20, 0x01	; 1
    5b22:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>

	if (KEYPAD_FindRow()== CurrentRow)
    5b26:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <KEYPAD_FindRow>
    5b2a:	98 2f       	mov	r25, r24
    5b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b2e:	98 17       	cp	r25, r24
    5b30:	11 f4       	brne	.+4      	; 0x5b36 <KEYPAD_FindCol+0x48>
	{
		loc_ButtonCol = KP_COL0;
    5b32:	19 82       	std	Y+1, r1	; 0x01
    5b34:	59 c0       	rjmp	.+178    	; 0x5be8 <KEYPAD_FindCol+0xfa>
	}
	else
	{
		DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN4,DIO_HIGH);
    5b36:	82 e0       	ldi	r24, 0x02	; 2
    5b38:	64 e0       	ldi	r22, 0x04	; 4
    5b3a:	41 e0       	ldi	r20, 0x01	; 1
    5b3c:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
		DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN5,DIO_LOW);
    5b40:	82 e0       	ldi	r24, 0x02	; 2
    5b42:	65 e0       	ldi	r22, 0x05	; 5
    5b44:	40 e0       	ldi	r20, 0x00	; 0
    5b46:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
		DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN6,DIO_HIGH);
    5b4a:	82 e0       	ldi	r24, 0x02	; 2
    5b4c:	66 e0       	ldi	r22, 0x06	; 6
    5b4e:	41 e0       	ldi	r20, 0x01	; 1
    5b50:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
		DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    5b54:	82 e0       	ldi	r24, 0x02	; 2
    5b56:	67 e0       	ldi	r22, 0x07	; 7
    5b58:	41 e0       	ldi	r20, 0x01	; 1
    5b5a:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
		if (KEYPAD_FindRow()== CurrentRow)
    5b5e:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <KEYPAD_FindRow>
    5b62:	98 2f       	mov	r25, r24
    5b64:	8a 81       	ldd	r24, Y+2	; 0x02
    5b66:	98 17       	cp	r25, r24
    5b68:	19 f4       	brne	.+6      	; 0x5b70 <KEYPAD_FindCol+0x82>
		{
			loc_ButtonCol = KP_COL1;
    5b6a:	81 e0       	ldi	r24, 0x01	; 1
    5b6c:	89 83       	std	Y+1, r24	; 0x01
    5b6e:	05 c0       	rjmp	.+10     	; 0x5b7a <KEYPAD_FindCol+0x8c>
		}
		else
			DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN4,DIO_HIGH);
    5b70:	82 e0       	ldi	r24, 0x02	; 2
    5b72:	64 e0       	ldi	r22, 0x04	; 4
    5b74:	41 e0       	ldi	r20, 0x01	; 1
    5b76:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
		DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN5,DIO_HIGH);
    5b7a:	82 e0       	ldi	r24, 0x02	; 2
    5b7c:	65 e0       	ldi	r22, 0x05	; 5
    5b7e:	41 e0       	ldi	r20, 0x01	; 1
    5b80:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
		DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN6,DIO_LOW);
    5b84:	82 e0       	ldi	r24, 0x02	; 2
    5b86:	66 e0       	ldi	r22, 0x06	; 6
    5b88:	40 e0       	ldi	r20, 0x00	; 0
    5b8a:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
		DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    5b8e:	82 e0       	ldi	r24, 0x02	; 2
    5b90:	67 e0       	ldi	r22, 0x07	; 7
    5b92:	41 e0       	ldi	r20, 0x01	; 1
    5b94:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
		if (KEYPAD_FindRow()==CurrentRow)
    5b98:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <KEYPAD_FindRow>
    5b9c:	98 2f       	mov	r25, r24
    5b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    5ba0:	98 17       	cp	r25, r24
    5ba2:	19 f4       	brne	.+6      	; 0x5baa <KEYPAD_FindCol+0xbc>
		{
			loc_ButtonCol = KP_COL2;
    5ba4:	82 e0       	ldi	r24, 0x02	; 2
    5ba6:	89 83       	std	Y+1, r24	; 0x01
    5ba8:	1f c0       	rjmp	.+62     	; 0x5be8 <KEYPAD_FindCol+0xfa>
		}
		else
		{
			DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN4,DIO_HIGH);
    5baa:	82 e0       	ldi	r24, 0x02	; 2
    5bac:	64 e0       	ldi	r22, 0x04	; 4
    5bae:	41 e0       	ldi	r20, 0x01	; 1
    5bb0:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
			DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN5,DIO_HIGH);
    5bb4:	82 e0       	ldi	r24, 0x02	; 2
    5bb6:	65 e0       	ldi	r22, 0x05	; 5
    5bb8:	41 e0       	ldi	r20, 0x01	; 1
    5bba:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
			DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN6,DIO_HIGH);
    5bbe:	82 e0       	ldi	r24, 0x02	; 2
    5bc0:	66 e0       	ldi	r22, 0x06	; 6
    5bc2:	41 e0       	ldi	r20, 0x01	; 1
    5bc4:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
			DIO_voidWRITEChannel(DIO_PORTC,DIO_PIN7,DIO_LOW);
    5bc8:	82 e0       	ldi	r24, 0x02	; 2
    5bca:	67 e0       	ldi	r22, 0x07	; 7
    5bcc:	40 e0       	ldi	r20, 0x00	; 0
    5bce:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
			if (KEYPAD_FindRow()==CurrentRow)
    5bd2:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <KEYPAD_FindRow>
    5bd6:	98 2f       	mov	r25, r24
    5bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    5bda:	98 17       	cp	r25, r24
    5bdc:	19 f4       	brne	.+6      	; 0x5be4 <KEYPAD_FindCol+0xf6>
			{
				loc_ButtonCol = KP_COL3;
    5bde:	83 e0       	ldi	r24, 0x03	; 3
    5be0:	89 83       	std	Y+1, r24	; 0x01
    5be2:	02 c0       	rjmp	.+4      	; 0x5be8 <KEYPAD_FindCol+0xfa>
			}
			else
			{
				loc_ButtonCol = KP_NOCOL;
    5be4:	8f ef       	ldi	r24, 0xFF	; 255
    5be6:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	return loc_ButtonCol;
    5be8:	89 81       	ldd	r24, Y+1	; 0x01
}
    5bea:	0f 90       	pop	r0
    5bec:	0f 90       	pop	r0
    5bee:	cf 91       	pop	r28
    5bf0:	df 91       	pop	r29
    5bf2:	08 95       	ret

00005bf4 <KEYPAD_u8FindKey>:

u8 KEYPAD_u8FindKey(void)
{
    5bf4:	df 93       	push	r29
    5bf6:	cf 93       	push	r28
    5bf8:	00 d0       	rcall	.+0      	; 0x5bfa <KEYPAD_u8FindKey+0x6>
    5bfa:	0f 92       	push	r0
    5bfc:	cd b7       	in	r28, 0x3d	; 61
    5bfe:	de b7       	in	r29, 0x3e	; 62
	u8 loc_Key = 0;
    5c00:	1b 82       	std	Y+3, r1	; 0x03
	KP_ROW_T loc_Row = KP_NOROW;
    5c02:	8f ef       	ldi	r24, 0xFF	; 255
    5c04:	8a 83       	std	Y+2, r24	; 0x02
	KP_COL_T loc_Col = KP_NOCOL;
    5c06:	8f ef       	ldi	r24, 0xFF	; 255
    5c08:	89 83       	std	Y+1, r24	; 0x01

	KEYPAD_RESET();
    5c0a:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <KEYPAD_RESET>
	//Check if Keypad is pressed
	if (KEYPAD_PRESSED()==TRUE)
    5c0e:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <KEYPAD_PRESSED>
    5c12:	88 23       	and	r24, r24
    5c14:	f1 f4       	brne	.+60     	; 0x5c52 <KEYPAD_u8FindKey+0x5e>
	{
		//If yes find the pressed key's row
		loc_Row = KEYPAD_FindRow();
    5c16:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <KEYPAD_FindRow>
    5c1a:	8a 83       	std	Y+2, r24	; 0x02
		//Find the pressed key's column
		loc_Col = KEYPAD_FindCol(loc_Row);
    5c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c1e:	0e 94 77 2d 	call	0x5aee	; 0x5aee <KEYPAD_FindCol>
    5c22:	89 83       	std	Y+1, r24	; 0x01
		//loc_key=KEYPAD_Layout[Row][Column]
		loc_Key = KEYPAD_Layout[loc_Row][loc_Col];
    5c24:	8a 81       	ldd	r24, Y+2	; 0x02
    5c26:	48 2f       	mov	r20, r24
    5c28:	55 27       	eor	r21, r21
    5c2a:	47 fd       	sbrc	r20, 7
    5c2c:	50 95       	com	r21
    5c2e:	89 81       	ldd	r24, Y+1	; 0x01
    5c30:	28 2f       	mov	r18, r24
    5c32:	33 27       	eor	r19, r19
    5c34:	27 fd       	sbrc	r18, 7
    5c36:	30 95       	com	r19
    5c38:	ca 01       	movw	r24, r20
    5c3a:	88 0f       	add	r24, r24
    5c3c:	99 1f       	adc	r25, r25
    5c3e:	88 0f       	add	r24, r24
    5c40:	99 1f       	adc	r25, r25
    5c42:	82 0f       	add	r24, r18
    5c44:	93 1f       	adc	r25, r19
    5c46:	fc 01       	movw	r30, r24
    5c48:	e3 57       	subi	r30, 0x73	; 115
    5c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    5c4c:	80 81       	ld	r24, Z
    5c4e:	8b 83       	std	Y+3, r24	; 0x03
    5c50:	02 c0       	rjmp	.+4      	; 0x5c56 <KEYPAD_u8FindKey+0x62>
	}
	else
	{
		//Do Nothing
		loc_Key = 0xFF;
    5c52:	8f ef       	ldi	r24, 0xFF	; 255
    5c54:	8b 83       	std	Y+3, r24	; 0x03
	}
	return loc_Key;
    5c56:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5c58:	0f 90       	pop	r0
    5c5a:	0f 90       	pop	r0
    5c5c:	0f 90       	pop	r0
    5c5e:	cf 91       	pop	r28
    5c60:	df 91       	pop	r29
    5c62:	08 95       	ret

00005c64 <EEPROM24C16C_voidInit>:
 */
#include "EEPROM24C16C.h"
#include <util/delay.h>

void EEPROM24C16C_voidInit(void)
{
    5c64:	df 93       	push	r29
    5c66:	cf 93       	push	r28
    5c68:	cd b7       	in	r28, 0x3d	; 61
    5c6a:	de b7       	in	r29, 0x3e	; 62
	I2C_MasterInit();
    5c6c:	0e 94 67 33 	call	0x66ce	; 0x66ce <I2C_MasterInit>
}
    5c70:	cf 91       	pop	r28
    5c72:	df 91       	pop	r29
    5c74:	08 95       	ret

00005c76 <EEPROM24C16C_voidWriteByte>:
void EEPROM24C16C_voidWriteByte(u8 address, u8 data)
{
    5c76:	df 93       	push	r29
    5c78:	cf 93       	push	r28
    5c7a:	cd b7       	in	r28, 0x3d	; 61
    5c7c:	de b7       	in	r29, 0x3e	; 62
    5c7e:	64 97       	sbiw	r28, 0x14	; 20
    5c80:	0f b6       	in	r0, 0x3f	; 63
    5c82:	f8 94       	cli
    5c84:	de bf       	out	0x3e, r29	; 62
    5c86:	0f be       	out	0x3f, r0	; 63
    5c88:	cd bf       	out	0x3d, r28	; 61
    5c8a:	89 8b       	std	Y+17, r24	; 0x11
    5c8c:	6a 8b       	std	Y+18, r22	; 0x12
	u8 loc_pageNo = (address/256);
    5c8e:	89 89       	ldd	r24, Y+17	; 0x11
    5c90:	88 2f       	mov	r24, r24
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	9c 8b       	std	Y+20, r25	; 0x14
    5c96:	8b 8b       	std	Y+19, r24	; 0x13
    5c98:	2b 89       	ldd	r18, Y+19	; 0x13
    5c9a:	3c 89       	ldd	r19, Y+20	; 0x14
    5c9c:	33 23       	and	r19, r19
    5c9e:	34 f4       	brge	.+12     	; 0x5cac <EEPROM24C16C_voidWriteByte+0x36>
    5ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    5ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    5ca4:	81 50       	subi	r24, 0x01	; 1
    5ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ca8:	9c 8b       	std	Y+20, r25	; 0x14
    5caa:	8b 8b       	std	Y+19, r24	; 0x13
    5cac:	2b 89       	ldd	r18, Y+19	; 0x13
    5cae:	3c 89       	ldd	r19, Y+20	; 0x14
    5cb0:	83 2f       	mov	r24, r19
    5cb2:	99 27       	eor	r25, r25
    5cb4:	87 fd       	sbrc	r24, 7
    5cb6:	9a 95       	dec	r25
    5cb8:	88 8b       	std	Y+16, r24	; 0x10
	u8 loc_byteNo = (address%256);
    5cba:	89 89       	ldd	r24, Y+17	; 0x11
    5cbc:	8f 87       	std	Y+15, r24	; 0x0f

	I2C_StartCondition();
    5cbe:	0e 94 9e 33 	call	0x673c	; 0x673c <I2C_StartCondition>

	/*1010 0001 <<1  -> 0100 0010
	so to solve this make the mask 0101 0000 when shifted = 1010 0000*/


	I2C_Send_SlaveAddressWriteOperation(0x50|loc_pageNo);
    5cc2:	88 89       	ldd	r24, Y+16	; 0x10
    5cc4:	80 65       	ori	r24, 0x50	; 80
    5cc6:	0e 94 04 34 	call	0x6808	; 0x6808 <I2C_Send_SlaveAddressWriteOperation>
	I2C_WriteByte(loc_byteNo);
    5cca:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ccc:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <I2C_WriteByte>
	I2C_WriteByte(data);
    5cd0:	8a 89       	ldd	r24, Y+18	; 0x12
    5cd2:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <I2C_WriteByte>

	I2C_StopCondition();
    5cd6:	0e 94 d7 33 	call	0x67ae	; 0x67ae <I2C_StopCondition>
    5cda:	80 e0       	ldi	r24, 0x00	; 0
    5cdc:	90 e0       	ldi	r25, 0x00	; 0
    5cde:	a0 e2       	ldi	r26, 0x20	; 32
    5ce0:	b1 e4       	ldi	r27, 0x41	; 65
    5ce2:	8b 87       	std	Y+11, r24	; 0x0b
    5ce4:	9c 87       	std	Y+12, r25	; 0x0c
    5ce6:	ad 87       	std	Y+13, r26	; 0x0d
    5ce8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cf2:	20 e0       	ldi	r18, 0x00	; 0
    5cf4:	30 e0       	ldi	r19, 0x00	; 0
    5cf6:	4a e7       	ldi	r20, 0x7A	; 122
    5cf8:	55 e4       	ldi	r21, 0x45	; 69
    5cfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5cfe:	dc 01       	movw	r26, r24
    5d00:	cb 01       	movw	r24, r22
    5d02:	8f 83       	std	Y+7, r24	; 0x07
    5d04:	98 87       	std	Y+8, r25	; 0x08
    5d06:	a9 87       	std	Y+9, r26	; 0x09
    5d08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    5d0c:	78 85       	ldd	r23, Y+8	; 0x08
    5d0e:	89 85       	ldd	r24, Y+9	; 0x09
    5d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d12:	20 e0       	ldi	r18, 0x00	; 0
    5d14:	30 e0       	ldi	r19, 0x00	; 0
    5d16:	40 e8       	ldi	r20, 0x80	; 128
    5d18:	5f e3       	ldi	r21, 0x3F	; 63
    5d1a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5d1e:	88 23       	and	r24, r24
    5d20:	2c f4       	brge	.+10     	; 0x5d2c <EEPROM24C16C_voidWriteByte+0xb6>
		__ticks = 1;
    5d22:	81 e0       	ldi	r24, 0x01	; 1
    5d24:	90 e0       	ldi	r25, 0x00	; 0
    5d26:	9e 83       	std	Y+6, r25	; 0x06
    5d28:	8d 83       	std	Y+5, r24	; 0x05
    5d2a:	3f c0       	rjmp	.+126    	; 0x5daa <EEPROM24C16C_voidWriteByte+0x134>
	else if (__tmp > 65535)
    5d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    5d2e:	78 85       	ldd	r23, Y+8	; 0x08
    5d30:	89 85       	ldd	r24, Y+9	; 0x09
    5d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d34:	20 e0       	ldi	r18, 0x00	; 0
    5d36:	3f ef       	ldi	r19, 0xFF	; 255
    5d38:	4f e7       	ldi	r20, 0x7F	; 127
    5d3a:	57 e4       	ldi	r21, 0x47	; 71
    5d3c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5d40:	18 16       	cp	r1, r24
    5d42:	4c f5       	brge	.+82     	; 0x5d96 <EEPROM24C16C_voidWriteByte+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d4c:	20 e0       	ldi	r18, 0x00	; 0
    5d4e:	30 e0       	ldi	r19, 0x00	; 0
    5d50:	40 e2       	ldi	r20, 0x20	; 32
    5d52:	51 e4       	ldi	r21, 0x41	; 65
    5d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5d58:	dc 01       	movw	r26, r24
    5d5a:	cb 01       	movw	r24, r22
    5d5c:	bc 01       	movw	r22, r24
    5d5e:	cd 01       	movw	r24, r26
    5d60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5d64:	dc 01       	movw	r26, r24
    5d66:	cb 01       	movw	r24, r22
    5d68:	9e 83       	std	Y+6, r25	; 0x06
    5d6a:	8d 83       	std	Y+5, r24	; 0x05
    5d6c:	0f c0       	rjmp	.+30     	; 0x5d8c <EEPROM24C16C_voidWriteByte+0x116>
    5d6e:	80 e9       	ldi	r24, 0x90	; 144
    5d70:	91 e0       	ldi	r25, 0x01	; 1
    5d72:	9c 83       	std	Y+4, r25	; 0x04
    5d74:	8b 83       	std	Y+3, r24	; 0x03
    5d76:	8b 81       	ldd	r24, Y+3	; 0x03
    5d78:	9c 81       	ldd	r25, Y+4	; 0x04
    5d7a:	01 97       	sbiw	r24, 0x01	; 1
    5d7c:	f1 f7       	brne	.-4      	; 0x5d7a <EEPROM24C16C_voidWriteByte+0x104>
    5d7e:	9c 83       	std	Y+4, r25	; 0x04
    5d80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d82:	8d 81       	ldd	r24, Y+5	; 0x05
    5d84:	9e 81       	ldd	r25, Y+6	; 0x06
    5d86:	01 97       	sbiw	r24, 0x01	; 1
    5d88:	9e 83       	std	Y+6, r25	; 0x06
    5d8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    5d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    5d90:	00 97       	sbiw	r24, 0x00	; 0
    5d92:	69 f7       	brne	.-38     	; 0x5d6e <EEPROM24C16C_voidWriteByte+0xf8>
    5d94:	14 c0       	rjmp	.+40     	; 0x5dbe <EEPROM24C16C_voidWriteByte+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d96:	6f 81       	ldd	r22, Y+7	; 0x07
    5d98:	78 85       	ldd	r23, Y+8	; 0x08
    5d9a:	89 85       	ldd	r24, Y+9	; 0x09
    5d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5da2:	dc 01       	movw	r26, r24
    5da4:	cb 01       	movw	r24, r22
    5da6:	9e 83       	std	Y+6, r25	; 0x06
    5da8:	8d 83       	std	Y+5, r24	; 0x05
    5daa:	8d 81       	ldd	r24, Y+5	; 0x05
    5dac:	9e 81       	ldd	r25, Y+6	; 0x06
    5dae:	9a 83       	std	Y+2, r25	; 0x02
    5db0:	89 83       	std	Y+1, r24	; 0x01
    5db2:	89 81       	ldd	r24, Y+1	; 0x01
    5db4:	9a 81       	ldd	r25, Y+2	; 0x02
    5db6:	01 97       	sbiw	r24, 0x01	; 1
    5db8:	f1 f7       	brne	.-4      	; 0x5db6 <EEPROM24C16C_voidWriteByte+0x140>
    5dba:	9a 83       	std	Y+2, r25	; 0x02
    5dbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    5dbe:	64 96       	adiw	r28, 0x14	; 20
    5dc0:	0f b6       	in	r0, 0x3f	; 63
    5dc2:	f8 94       	cli
    5dc4:	de bf       	out	0x3e, r29	; 62
    5dc6:	0f be       	out	0x3f, r0	; 63
    5dc8:	cd bf       	out	0x3d, r28	; 61
    5dca:	cf 91       	pop	r28
    5dcc:	df 91       	pop	r29
    5dce:	08 95       	ret

00005dd0 <EEPROM24C16C_u8ReadByte>:
u8 EEPROM24C16C_u8ReadByte(u8 address)
{
    5dd0:	df 93       	push	r29
    5dd2:	cf 93       	push	r28
    5dd4:	00 d0       	rcall	.+0      	; 0x5dd6 <EEPROM24C16C_u8ReadByte+0x6>
    5dd6:	00 d0       	rcall	.+0      	; 0x5dd8 <EEPROM24C16C_u8ReadByte+0x8>
    5dd8:	00 d0       	rcall	.+0      	; 0x5dda <EEPROM24C16C_u8ReadByte+0xa>
    5dda:	cd b7       	in	r28, 0x3d	; 61
    5ddc:	de b7       	in	r29, 0x3e	; 62
    5dde:	8c 83       	std	Y+4, r24	; 0x04
	u8 loc_pageNo = (address/256);
    5de0:	8c 81       	ldd	r24, Y+4	; 0x04
    5de2:	88 2f       	mov	r24, r24
    5de4:	90 e0       	ldi	r25, 0x00	; 0
    5de6:	9e 83       	std	Y+6, r25	; 0x06
    5de8:	8d 83       	std	Y+5, r24	; 0x05
    5dea:	2d 81       	ldd	r18, Y+5	; 0x05
    5dec:	3e 81       	ldd	r19, Y+6	; 0x06
    5dee:	33 23       	and	r19, r19
    5df0:	34 f4       	brge	.+12     	; 0x5dfe <EEPROM24C16C_u8ReadByte+0x2e>
    5df2:	8d 81       	ldd	r24, Y+5	; 0x05
    5df4:	9e 81       	ldd	r25, Y+6	; 0x06
    5df6:	81 50       	subi	r24, 0x01	; 1
    5df8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dfa:	9e 83       	std	Y+6, r25	; 0x06
    5dfc:	8d 83       	std	Y+5, r24	; 0x05
    5dfe:	2d 81       	ldd	r18, Y+5	; 0x05
    5e00:	3e 81       	ldd	r19, Y+6	; 0x06
    5e02:	83 2f       	mov	r24, r19
    5e04:	99 27       	eor	r25, r25
    5e06:	87 fd       	sbrc	r24, 7
    5e08:	9a 95       	dec	r25
    5e0a:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_byteNo = (address%256);
    5e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    5e0e:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_dataRead = 0;
    5e10:	19 82       	std	Y+1, r1	; 0x01

	I2C_StartCondition();
    5e12:	0e 94 9e 33 	call	0x673c	; 0x673c <I2C_StartCondition>
	I2C_Send_SlaveAddressWriteOperation(0x50|loc_pageNo);
    5e16:	8b 81       	ldd	r24, Y+3	; 0x03
    5e18:	80 65       	ori	r24, 0x50	; 80
    5e1a:	0e 94 04 34 	call	0x6808	; 0x6808 <I2C_Send_SlaveAddressWriteOperation>
	I2C_WriteByte(loc_byteNo);
    5e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e20:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <I2C_WriteByte>

	I2C_RepeatedStartCondition();
    5e24:	0e 94 b9 33 	call	0x6772	; 0x6772 <I2C_RepeatedStartCondition>
	I2C_Send_SlaveAddressReadOperation(0x50|loc_pageNo);
    5e28:	8b 81       	ldd	r24, Y+3	; 0x03
    5e2a:	80 65       	ori	r24, 0x50	; 80
    5e2c:	0e 94 21 34 	call	0x6842	; 0x6842 <I2C_Send_SlaveAddressReadOperation>
	loc_dataRead=I2C_ReadByte();
    5e30:	0e 94 42 34 	call	0x6884	; 0x6884 <I2C_ReadByte>
    5e34:	89 83       	std	Y+1, r24	; 0x01

	I2C_StopCondition();
    5e36:	0e 94 d7 33 	call	0x67ae	; 0x67ae <I2C_StopCondition>

	return loc_dataRead;
    5e3a:	89 81       	ldd	r24, Y+1	; 0x01
};
    5e3c:	26 96       	adiw	r28, 0x06	; 6
    5e3e:	0f b6       	in	r0, 0x3f	; 63
    5e40:	f8 94       	cli
    5e42:	de bf       	out	0x3e, r29	; 62
    5e44:	0f be       	out	0x3f, r0	; 63
    5e46:	cd bf       	out	0x3d, r28	; 61
    5e48:	cf 91       	pop	r28
    5e4a:	df 91       	pop	r29
    5e4c:	08 95       	ret

00005e4e <EEPROM_voidInit>:
 */
#include "../../EEPROM [MCAL]/Includes/EEPROM.h"

#include "I2C.h"
void EEPROM_voidInit(void)
{
    5e4e:	df 93       	push	r29
    5e50:	cf 93       	push	r28
    5e52:	cd b7       	in	r28, 0x3d	; 61
    5e54:	de b7       	in	r29, 0x3e	; 62
	I2C_MasterInit();
    5e56:	0e 94 67 33 	call	0x66ce	; 0x66ce <I2C_MasterInit>
	I2C_StartCondition();
    5e5a:	0e 94 9e 33 	call	0x673c	; 0x673c <I2C_StartCondition>
	//I2C_SlaveInit();
	EEPROM_EEARH_REG = EEPROM_EEARH_REG & EEARH_MASK;
    5e5e:	af e3       	ldi	r26, 0x3F	; 63
    5e60:	b0 e0       	ldi	r27, 0x00	; 0
    5e62:	ef e3       	ldi	r30, 0x3F	; 63
    5e64:	f0 e0       	ldi	r31, 0x00	; 0
    5e66:	80 81       	ld	r24, Z
    5e68:	83 70       	andi	r24, 0x03	; 3
    5e6a:	8c 93       	st	X, r24

}
    5e6c:	cf 91       	pop	r28
    5e6e:	df 91       	pop	r29
    5e70:	08 95       	ret

00005e72 <EEPROM_voidWriteByte>:
void EEPROM_voidWriteByte(u8 page,u8 address, u8 data)
{
    5e72:	df 93       	push	r29
    5e74:	cf 93       	push	r28
    5e76:	00 d0       	rcall	.+0      	; 0x5e78 <EEPROM_voidWriteByte+0x6>
    5e78:	0f 92       	push	r0
    5e7a:	cd b7       	in	r28, 0x3d	; 61
    5e7c:	de b7       	in	r29, 0x3e	; 62
    5e7e:	89 83       	std	Y+1, r24	; 0x01
    5e80:	6a 83       	std	Y+2, r22	; 0x02
    5e82:	4b 83       	std	Y+3, r20	; 0x03

}
    5e84:	0f 90       	pop	r0
    5e86:	0f 90       	pop	r0
    5e88:	0f 90       	pop	r0
    5e8a:	cf 91       	pop	r28
    5e8c:	df 91       	pop	r29
    5e8e:	08 95       	ret

00005e90 <EEPROM_u8ReadByte>:
u8 EEPROM_u8ReadByte(u8 page, u8 address)
{
    5e90:	df 93       	push	r29
    5e92:	cf 93       	push	r28
    5e94:	00 d0       	rcall	.+0      	; 0x5e96 <EEPROM_u8ReadByte+0x6>
    5e96:	0f 92       	push	r0
    5e98:	cd b7       	in	r28, 0x3d	; 61
    5e9a:	de b7       	in	r29, 0x3e	; 62
    5e9c:	89 83       	std	Y+1, r24	; 0x01
    5e9e:	6a 83       	std	Y+2, r22	; 0x02

}
    5ea0:	0f 90       	pop	r0
    5ea2:	0f 90       	pop	r0
    5ea4:	0f 90       	pop	r0
    5ea6:	cf 91       	pop	r28
    5ea8:	df 91       	pop	r29
    5eaa:	08 95       	ret

00005eac <DC_Motor_voidInit>:
#include "Bit_Math.h"
#include "Std_Types.h"
#include <util/delay.h>

void DC_Motor_voidInit(void)
{
    5eac:	df 93       	push	r29
    5eae:	cf 93       	push	r28
    5eb0:	cd b7       	in	r28, 0x3d	; 61
    5eb2:	de b7       	in	r29, 0x3e	; 62
	// Configure Motor control pins as outputs

	//Motor A
	DIO_voidconfigureChannel(DIO_PORTD,DIO_PIN4,DIO_OUTPUT);
    5eb4:	83 e0       	ldi	r24, 0x03	; 3
    5eb6:	64 e0       	ldi	r22, 0x04	; 4
    5eb8:	41 e0       	ldi	r20, 0x01	; 1
    5eba:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTC,DIO_PIN3,DIO_OUTPUT);
    5ebe:	82 e0       	ldi	r24, 0x02	; 2
    5ec0:	63 e0       	ldi	r22, 0x03	; 3
    5ec2:	41 e0       	ldi	r20, 0x01	; 1
    5ec4:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTC,DIO_PIN4,DIO_OUTPUT);
    5ec8:	82 e0       	ldi	r24, 0x02	; 2
    5eca:	64 e0       	ldi	r22, 0x04	; 4
    5ecc:	41 e0       	ldi	r20, 0x01	; 1
    5ece:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>

	//Motor B
	DIO_voidconfigureChannel(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
    5ed2:	83 e0       	ldi	r24, 0x03	; 3
    5ed4:	65 e0       	ldi	r22, 0x05	; 5
    5ed6:	41 e0       	ldi	r20, 0x01	; 1
    5ed8:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTC,DIO_PIN5,DIO_OUTPUT);
    5edc:	82 e0       	ldi	r24, 0x02	; 2
    5ede:	65 e0       	ldi	r22, 0x05	; 5
    5ee0:	41 e0       	ldi	r20, 0x01	; 1
    5ee2:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTC,DIO_PIN6,DIO_OUTPUT);
    5ee6:	82 e0       	ldi	r24, 0x02	; 2
    5ee8:	66 e0       	ldi	r22, 0x06	; 6
    5eea:	41 e0       	ldi	r20, 0x01	; 1
    5eec:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>

	// Make sure Motor is stop EN = 0
	//Enable 1
	DIO_voidWRITEChannel(DIO_PORTD,DIO_PIN4,DIO_LOW);
    5ef0:	83 e0       	ldi	r24, 0x03	; 3
    5ef2:	64 e0       	ldi	r22, 0x04	; 4
    5ef4:	40 e0       	ldi	r20, 0x00	; 0
    5ef6:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
	//Enable 2
	DIO_voidWRITEChannel(DIO_PORTD,DIO_PIN5,DIO_LOW);
    5efa:	83 e0       	ldi	r24, 0x03	; 3
    5efc:	65 e0       	ldi	r22, 0x05	; 5
    5efe:	40 e0       	ldi	r20, 0x00	; 0
    5f00:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
}
    5f04:	cf 91       	pop	r28
    5f06:	df 91       	pop	r29
    5f08:	08 95       	ret

00005f0a <DC_Motor_voidStart>:

void DC_Motor_voidStart(DC_MOTOR_T DCtype,DC_DIR_T DCdir)
{
    5f0a:	df 93       	push	r29
    5f0c:	cf 93       	push	r28
    5f0e:	00 d0       	rcall	.+0      	; 0x5f10 <DC_Motor_voidStart+0x6>
    5f10:	cd b7       	in	r28, 0x3d	; 61
    5f12:	de b7       	in	r29, 0x3e	; 62
    5f14:	89 83       	std	Y+1, r24	; 0x01
    5f16:	6a 83       	std	Y+2, r22	; 0x02
	if (DCtype == DC_MOTOR_A)
    5f18:	89 81       	ldd	r24, Y+1	; 0x01
    5f1a:	88 23       	and	r24, r24
    5f1c:	41 f5       	brne	.+80     	; 0x5f6e <DC_Motor_voidStart+0x64>
	{
		if (DCdir == DIR_CW)
    5f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    5f20:	88 23       	and	r24, r24
    5f22:	79 f4       	brne	.+30     	; 0x5f42 <DC_Motor_voidStart+0x38>
		{
			SET_BIT(DIO_PORTC_REG,DIO_PIN3);
    5f24:	a5 e3       	ldi	r26, 0x35	; 53
    5f26:	b0 e0       	ldi	r27, 0x00	; 0
    5f28:	e5 e3       	ldi	r30, 0x35	; 53
    5f2a:	f0 e0       	ldi	r31, 0x00	; 0
    5f2c:	80 81       	ld	r24, Z
    5f2e:	88 60       	ori	r24, 0x08	; 8
    5f30:	8c 93       	st	X, r24
			CLEAR_BIT(DIO_PORTC_REG,DIO_PIN4);
    5f32:	a5 e3       	ldi	r26, 0x35	; 53
    5f34:	b0 e0       	ldi	r27, 0x00	; 0
    5f36:	e5 e3       	ldi	r30, 0x35	; 53
    5f38:	f0 e0       	ldi	r31, 0x00	; 0
    5f3a:	80 81       	ld	r24, Z
    5f3c:	8f 7e       	andi	r24, 0xEF	; 239
    5f3e:	8c 93       	st	X, r24
    5f40:	0e c0       	rjmp	.+28     	; 0x5f5e <DC_Motor_voidStart+0x54>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,DIO_PIN3);
    5f42:	a5 e3       	ldi	r26, 0x35	; 53
    5f44:	b0 e0       	ldi	r27, 0x00	; 0
    5f46:	e5 e3       	ldi	r30, 0x35	; 53
    5f48:	f0 e0       	ldi	r31, 0x00	; 0
    5f4a:	80 81       	ld	r24, Z
    5f4c:	87 7f       	andi	r24, 0xF7	; 247
    5f4e:	8c 93       	st	X, r24
			SET_BIT(DIO_PORTC_REG,DIO_PIN4);
    5f50:	a5 e3       	ldi	r26, 0x35	; 53
    5f52:	b0 e0       	ldi	r27, 0x00	; 0
    5f54:	e5 e3       	ldi	r30, 0x35	; 53
    5f56:	f0 e0       	ldi	r31, 0x00	; 0
    5f58:	80 81       	ld	r24, Z
    5f5a:	80 61       	ori	r24, 0x10	; 16
    5f5c:	8c 93       	st	X, r24
		}
		SET_BIT(DIO_PORTD_REG,DIO_PIN4);
    5f5e:	a2 e3       	ldi	r26, 0x32	; 50
    5f60:	b0 e0       	ldi	r27, 0x00	; 0
    5f62:	e2 e3       	ldi	r30, 0x32	; 50
    5f64:	f0 e0       	ldi	r31, 0x00	; 0
    5f66:	80 81       	ld	r24, Z
    5f68:	80 61       	ori	r24, 0x10	; 16
    5f6a:	8c 93       	st	X, r24
    5f6c:	2a c0       	rjmp	.+84     	; 0x5fc2 <DC_Motor_voidStart+0xb8>
	}
	else if (DCtype == DC_MOTOR_B)
    5f6e:	89 81       	ldd	r24, Y+1	; 0x01
    5f70:	81 30       	cpi	r24, 0x01	; 1
    5f72:	39 f5       	brne	.+78     	; 0x5fc2 <DC_Motor_voidStart+0xb8>
	{
		if (DCdir == DIR_CW)
    5f74:	8a 81       	ldd	r24, Y+2	; 0x02
    5f76:	88 23       	and	r24, r24
    5f78:	79 f4       	brne	.+30     	; 0x5f98 <DC_Motor_voidStart+0x8e>
		{
			SET_BIT(DIO_PORTC_REG,DIO_PIN5);
    5f7a:	a5 e3       	ldi	r26, 0x35	; 53
    5f7c:	b0 e0       	ldi	r27, 0x00	; 0
    5f7e:	e5 e3       	ldi	r30, 0x35	; 53
    5f80:	f0 e0       	ldi	r31, 0x00	; 0
    5f82:	80 81       	ld	r24, Z
    5f84:	80 62       	ori	r24, 0x20	; 32
    5f86:	8c 93       	st	X, r24
			CLEAR_BIT(DIO_PORTC_REG,DIO_PIN6);
    5f88:	a5 e3       	ldi	r26, 0x35	; 53
    5f8a:	b0 e0       	ldi	r27, 0x00	; 0
    5f8c:	e5 e3       	ldi	r30, 0x35	; 53
    5f8e:	f0 e0       	ldi	r31, 0x00	; 0
    5f90:	80 81       	ld	r24, Z
    5f92:	8f 7b       	andi	r24, 0xBF	; 191
    5f94:	8c 93       	st	X, r24
    5f96:	0e c0       	rjmp	.+28     	; 0x5fb4 <DC_Motor_voidStart+0xaa>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,DIO_PIN5);
    5f98:	a5 e3       	ldi	r26, 0x35	; 53
    5f9a:	b0 e0       	ldi	r27, 0x00	; 0
    5f9c:	e5 e3       	ldi	r30, 0x35	; 53
    5f9e:	f0 e0       	ldi	r31, 0x00	; 0
    5fa0:	80 81       	ld	r24, Z
    5fa2:	8f 7d       	andi	r24, 0xDF	; 223
    5fa4:	8c 93       	st	X, r24
			SET_BIT(DIO_PORTC_REG,DIO_PIN6);
    5fa6:	a5 e3       	ldi	r26, 0x35	; 53
    5fa8:	b0 e0       	ldi	r27, 0x00	; 0
    5faa:	e5 e3       	ldi	r30, 0x35	; 53
    5fac:	f0 e0       	ldi	r31, 0x00	; 0
    5fae:	80 81       	ld	r24, Z
    5fb0:	80 64       	ori	r24, 0x40	; 64
    5fb2:	8c 93       	st	X, r24
		}
		SET_BIT(DIO_PORTD_REG,DIO_PIN5);
    5fb4:	a2 e3       	ldi	r26, 0x32	; 50
    5fb6:	b0 e0       	ldi	r27, 0x00	; 0
    5fb8:	e2 e3       	ldi	r30, 0x32	; 50
    5fba:	f0 e0       	ldi	r31, 0x00	; 0
    5fbc:	80 81       	ld	r24, Z
    5fbe:	80 62       	ori	r24, 0x20	; 32
    5fc0:	8c 93       	st	X, r24
	}
}
    5fc2:	0f 90       	pop	r0
    5fc4:	0f 90       	pop	r0
    5fc6:	cf 91       	pop	r28
    5fc8:	df 91       	pop	r29
    5fca:	08 95       	ret

00005fcc <DC_Motor_voidStop>:
void DC_Motor_voidStop(DC_MOTOR_T DCtype)
{
    5fcc:	df 93       	push	r29
    5fce:	cf 93       	push	r28
    5fd0:	cd b7       	in	r28, 0x3d	; 61
    5fd2:	de b7       	in	r29, 0x3e	; 62
    5fd4:	6d 97       	sbiw	r28, 0x1d	; 29
    5fd6:	0f b6       	in	r0, 0x3f	; 63
    5fd8:	f8 94       	cli
    5fda:	de bf       	out	0x3e, r29	; 62
    5fdc:	0f be       	out	0x3f, r0	; 63
    5fde:	cd bf       	out	0x3d, r28	; 61
    5fe0:	8d 8f       	std	Y+29, r24	; 0x1d
	if (DCtype == DC_MOTOR_A)
    5fe2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5fe4:	88 23       	and	r24, r24
    5fe6:	09 f0       	breq	.+2      	; 0x5fea <DC_Motor_voidStop+0x1e>
    5fe8:	7a c0       	rjmp	.+244    	; 0x60de <DC_Motor_voidStop+0x112>
	{
		//CLEAR EN1 PIN
		CLEAR_BIT(DIO_PORTD_REG,DIO_PIN4);
    5fea:	a2 e3       	ldi	r26, 0x32	; 50
    5fec:	b0 e0       	ldi	r27, 0x00	; 0
    5fee:	e2 e3       	ldi	r30, 0x32	; 50
    5ff0:	f0 e0       	ldi	r31, 0x00	; 0
    5ff2:	80 81       	ld	r24, Z
    5ff4:	8f 7e       	andi	r24, 0xEF	; 239
    5ff6:	8c 93       	st	X, r24
    5ff8:	80 e0       	ldi	r24, 0x00	; 0
    5ffa:	90 e8       	ldi	r25, 0x80	; 128
    5ffc:	ab e3       	ldi	r26, 0x3B	; 59
    5ffe:	b5 e4       	ldi	r27, 0x45	; 69
    6000:	89 8f       	std	Y+25, r24	; 0x19
    6002:	9a 8f       	std	Y+26, r25	; 0x1a
    6004:	ab 8f       	std	Y+27, r26	; 0x1b
    6006:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6008:	69 8d       	ldd	r22, Y+25	; 0x19
    600a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    600c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    600e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6010:	20 e0       	ldi	r18, 0x00	; 0
    6012:	30 e0       	ldi	r19, 0x00	; 0
    6014:	4a e7       	ldi	r20, 0x7A	; 122
    6016:	55 e4       	ldi	r21, 0x45	; 69
    6018:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    601c:	dc 01       	movw	r26, r24
    601e:	cb 01       	movw	r24, r22
    6020:	8d 8b       	std	Y+21, r24	; 0x15
    6022:	9e 8b       	std	Y+22, r25	; 0x16
    6024:	af 8b       	std	Y+23, r26	; 0x17
    6026:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6028:	6d 89       	ldd	r22, Y+21	; 0x15
    602a:	7e 89       	ldd	r23, Y+22	; 0x16
    602c:	8f 89       	ldd	r24, Y+23	; 0x17
    602e:	98 8d       	ldd	r25, Y+24	; 0x18
    6030:	20 e0       	ldi	r18, 0x00	; 0
    6032:	30 e0       	ldi	r19, 0x00	; 0
    6034:	40 e8       	ldi	r20, 0x80	; 128
    6036:	5f e3       	ldi	r21, 0x3F	; 63
    6038:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    603c:	88 23       	and	r24, r24
    603e:	2c f4       	brge	.+10     	; 0x604a <DC_Motor_voidStop+0x7e>
		__ticks = 1;
    6040:	81 e0       	ldi	r24, 0x01	; 1
    6042:	90 e0       	ldi	r25, 0x00	; 0
    6044:	9c 8b       	std	Y+20, r25	; 0x14
    6046:	8b 8b       	std	Y+19, r24	; 0x13
    6048:	3f c0       	rjmp	.+126    	; 0x60c8 <DC_Motor_voidStop+0xfc>
	else if (__tmp > 65535)
    604a:	6d 89       	ldd	r22, Y+21	; 0x15
    604c:	7e 89       	ldd	r23, Y+22	; 0x16
    604e:	8f 89       	ldd	r24, Y+23	; 0x17
    6050:	98 8d       	ldd	r25, Y+24	; 0x18
    6052:	20 e0       	ldi	r18, 0x00	; 0
    6054:	3f ef       	ldi	r19, 0xFF	; 255
    6056:	4f e7       	ldi	r20, 0x7F	; 127
    6058:	57 e4       	ldi	r21, 0x47	; 71
    605a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    605e:	18 16       	cp	r1, r24
    6060:	4c f5       	brge	.+82     	; 0x60b4 <DC_Motor_voidStop+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6062:	69 8d       	ldd	r22, Y+25	; 0x19
    6064:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6066:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6068:	9c 8d       	ldd	r25, Y+28	; 0x1c
    606a:	20 e0       	ldi	r18, 0x00	; 0
    606c:	30 e0       	ldi	r19, 0x00	; 0
    606e:	40 e2       	ldi	r20, 0x20	; 32
    6070:	51 e4       	ldi	r21, 0x41	; 65
    6072:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6076:	dc 01       	movw	r26, r24
    6078:	cb 01       	movw	r24, r22
    607a:	bc 01       	movw	r22, r24
    607c:	cd 01       	movw	r24, r26
    607e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6082:	dc 01       	movw	r26, r24
    6084:	cb 01       	movw	r24, r22
    6086:	9c 8b       	std	Y+20, r25	; 0x14
    6088:	8b 8b       	std	Y+19, r24	; 0x13
    608a:	0f c0       	rjmp	.+30     	; 0x60aa <DC_Motor_voidStop+0xde>
    608c:	80 e9       	ldi	r24, 0x90	; 144
    608e:	91 e0       	ldi	r25, 0x01	; 1
    6090:	9a 8b       	std	Y+18, r25	; 0x12
    6092:	89 8b       	std	Y+17, r24	; 0x11
    6094:	89 89       	ldd	r24, Y+17	; 0x11
    6096:	9a 89       	ldd	r25, Y+18	; 0x12
    6098:	01 97       	sbiw	r24, 0x01	; 1
    609a:	f1 f7       	brne	.-4      	; 0x6098 <DC_Motor_voidStop+0xcc>
    609c:	9a 8b       	std	Y+18, r25	; 0x12
    609e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60a0:	8b 89       	ldd	r24, Y+19	; 0x13
    60a2:	9c 89       	ldd	r25, Y+20	; 0x14
    60a4:	01 97       	sbiw	r24, 0x01	; 1
    60a6:	9c 8b       	std	Y+20, r25	; 0x14
    60a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60aa:	8b 89       	ldd	r24, Y+19	; 0x13
    60ac:	9c 89       	ldd	r25, Y+20	; 0x14
    60ae:	00 97       	sbiw	r24, 0x00	; 0
    60b0:	69 f7       	brne	.-38     	; 0x608c <DC_Motor_voidStop+0xc0>
    60b2:	92 c0       	rjmp	.+292    	; 0x61d8 <DC_Motor_voidStop+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60b4:	6d 89       	ldd	r22, Y+21	; 0x15
    60b6:	7e 89       	ldd	r23, Y+22	; 0x16
    60b8:	8f 89       	ldd	r24, Y+23	; 0x17
    60ba:	98 8d       	ldd	r25, Y+24	; 0x18
    60bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    60c0:	dc 01       	movw	r26, r24
    60c2:	cb 01       	movw	r24, r22
    60c4:	9c 8b       	std	Y+20, r25	; 0x14
    60c6:	8b 8b       	std	Y+19, r24	; 0x13
    60c8:	8b 89       	ldd	r24, Y+19	; 0x13
    60ca:	9c 89       	ldd	r25, Y+20	; 0x14
    60cc:	98 8b       	std	Y+16, r25	; 0x10
    60ce:	8f 87       	std	Y+15, r24	; 0x0f
    60d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    60d2:	98 89       	ldd	r25, Y+16	; 0x10
    60d4:	01 97       	sbiw	r24, 0x01	; 1
    60d6:	f1 f7       	brne	.-4      	; 0x60d4 <DC_Motor_voidStop+0x108>
    60d8:	98 8b       	std	Y+16, r25	; 0x10
    60da:	8f 87       	std	Y+15, r24	; 0x0f
    60dc:	7d c0       	rjmp	.+250    	; 0x61d8 <DC_Motor_voidStop+0x20c>
		//wait till motor stop
		//_delay_ms(3000);
		_delay_ms(3000);
	}
	else if (DCtype == DC_MOTOR_B)
    60de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    60e0:	81 30       	cpi	r24, 0x01	; 1
    60e2:	09 f0       	breq	.+2      	; 0x60e6 <DC_Motor_voidStop+0x11a>
    60e4:	79 c0       	rjmp	.+242    	; 0x61d8 <DC_Motor_voidStop+0x20c>
	{
		//CLEAR EN1 PIN
		CLEAR_BIT(DIO_PORTD_REG,DIO_PIN5);
    60e6:	a2 e3       	ldi	r26, 0x32	; 50
    60e8:	b0 e0       	ldi	r27, 0x00	; 0
    60ea:	e2 e3       	ldi	r30, 0x32	; 50
    60ec:	f0 e0       	ldi	r31, 0x00	; 0
    60ee:	80 81       	ld	r24, Z
    60f0:	8f 7d       	andi	r24, 0xDF	; 223
    60f2:	8c 93       	st	X, r24
    60f4:	80 e0       	ldi	r24, 0x00	; 0
    60f6:	90 e8       	ldi	r25, 0x80	; 128
    60f8:	ab e3       	ldi	r26, 0x3B	; 59
    60fa:	b5 e4       	ldi	r27, 0x45	; 69
    60fc:	8b 87       	std	Y+11, r24	; 0x0b
    60fe:	9c 87       	std	Y+12, r25	; 0x0c
    6100:	ad 87       	std	Y+13, r26	; 0x0d
    6102:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6104:	6b 85       	ldd	r22, Y+11	; 0x0b
    6106:	7c 85       	ldd	r23, Y+12	; 0x0c
    6108:	8d 85       	ldd	r24, Y+13	; 0x0d
    610a:	9e 85       	ldd	r25, Y+14	; 0x0e
    610c:	20 e0       	ldi	r18, 0x00	; 0
    610e:	30 e0       	ldi	r19, 0x00	; 0
    6110:	4a e7       	ldi	r20, 0x7A	; 122
    6112:	55 e4       	ldi	r21, 0x45	; 69
    6114:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6118:	dc 01       	movw	r26, r24
    611a:	cb 01       	movw	r24, r22
    611c:	8f 83       	std	Y+7, r24	; 0x07
    611e:	98 87       	std	Y+8, r25	; 0x08
    6120:	a9 87       	std	Y+9, r26	; 0x09
    6122:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6124:	6f 81       	ldd	r22, Y+7	; 0x07
    6126:	78 85       	ldd	r23, Y+8	; 0x08
    6128:	89 85       	ldd	r24, Y+9	; 0x09
    612a:	9a 85       	ldd	r25, Y+10	; 0x0a
    612c:	20 e0       	ldi	r18, 0x00	; 0
    612e:	30 e0       	ldi	r19, 0x00	; 0
    6130:	40 e8       	ldi	r20, 0x80	; 128
    6132:	5f e3       	ldi	r21, 0x3F	; 63
    6134:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6138:	88 23       	and	r24, r24
    613a:	2c f4       	brge	.+10     	; 0x6146 <DC_Motor_voidStop+0x17a>
		__ticks = 1;
    613c:	81 e0       	ldi	r24, 0x01	; 1
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	9e 83       	std	Y+6, r25	; 0x06
    6142:	8d 83       	std	Y+5, r24	; 0x05
    6144:	3f c0       	rjmp	.+126    	; 0x61c4 <DC_Motor_voidStop+0x1f8>
	else if (__tmp > 65535)
    6146:	6f 81       	ldd	r22, Y+7	; 0x07
    6148:	78 85       	ldd	r23, Y+8	; 0x08
    614a:	89 85       	ldd	r24, Y+9	; 0x09
    614c:	9a 85       	ldd	r25, Y+10	; 0x0a
    614e:	20 e0       	ldi	r18, 0x00	; 0
    6150:	3f ef       	ldi	r19, 0xFF	; 255
    6152:	4f e7       	ldi	r20, 0x7F	; 127
    6154:	57 e4       	ldi	r21, 0x47	; 71
    6156:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    615a:	18 16       	cp	r1, r24
    615c:	4c f5       	brge	.+82     	; 0x61b0 <DC_Motor_voidStop+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    615e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6160:	7c 85       	ldd	r23, Y+12	; 0x0c
    6162:	8d 85       	ldd	r24, Y+13	; 0x0d
    6164:	9e 85       	ldd	r25, Y+14	; 0x0e
    6166:	20 e0       	ldi	r18, 0x00	; 0
    6168:	30 e0       	ldi	r19, 0x00	; 0
    616a:	40 e2       	ldi	r20, 0x20	; 32
    616c:	51 e4       	ldi	r21, 0x41	; 65
    616e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6172:	dc 01       	movw	r26, r24
    6174:	cb 01       	movw	r24, r22
    6176:	bc 01       	movw	r22, r24
    6178:	cd 01       	movw	r24, r26
    617a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    617e:	dc 01       	movw	r26, r24
    6180:	cb 01       	movw	r24, r22
    6182:	9e 83       	std	Y+6, r25	; 0x06
    6184:	8d 83       	std	Y+5, r24	; 0x05
    6186:	0f c0       	rjmp	.+30     	; 0x61a6 <DC_Motor_voidStop+0x1da>
    6188:	80 e9       	ldi	r24, 0x90	; 144
    618a:	91 e0       	ldi	r25, 0x01	; 1
    618c:	9c 83       	std	Y+4, r25	; 0x04
    618e:	8b 83       	std	Y+3, r24	; 0x03
    6190:	8b 81       	ldd	r24, Y+3	; 0x03
    6192:	9c 81       	ldd	r25, Y+4	; 0x04
    6194:	01 97       	sbiw	r24, 0x01	; 1
    6196:	f1 f7       	brne	.-4      	; 0x6194 <DC_Motor_voidStop+0x1c8>
    6198:	9c 83       	std	Y+4, r25	; 0x04
    619a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    619c:	8d 81       	ldd	r24, Y+5	; 0x05
    619e:	9e 81       	ldd	r25, Y+6	; 0x06
    61a0:	01 97       	sbiw	r24, 0x01	; 1
    61a2:	9e 83       	std	Y+6, r25	; 0x06
    61a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61a6:	8d 81       	ldd	r24, Y+5	; 0x05
    61a8:	9e 81       	ldd	r25, Y+6	; 0x06
    61aa:	00 97       	sbiw	r24, 0x00	; 0
    61ac:	69 f7       	brne	.-38     	; 0x6188 <DC_Motor_voidStop+0x1bc>
    61ae:	14 c0       	rjmp	.+40     	; 0x61d8 <DC_Motor_voidStop+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61b0:	6f 81       	ldd	r22, Y+7	; 0x07
    61b2:	78 85       	ldd	r23, Y+8	; 0x08
    61b4:	89 85       	ldd	r24, Y+9	; 0x09
    61b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    61b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    61bc:	dc 01       	movw	r26, r24
    61be:	cb 01       	movw	r24, r22
    61c0:	9e 83       	std	Y+6, r25	; 0x06
    61c2:	8d 83       	std	Y+5, r24	; 0x05
    61c4:	8d 81       	ldd	r24, Y+5	; 0x05
    61c6:	9e 81       	ldd	r25, Y+6	; 0x06
    61c8:	9a 83       	std	Y+2, r25	; 0x02
    61ca:	89 83       	std	Y+1, r24	; 0x01
    61cc:	89 81       	ldd	r24, Y+1	; 0x01
    61ce:	9a 81       	ldd	r25, Y+2	; 0x02
    61d0:	01 97       	sbiw	r24, 0x01	; 1
    61d2:	f1 f7       	brne	.-4      	; 0x61d0 <DC_Motor_voidStop+0x204>
    61d4:	9a 83       	std	Y+2, r25	; 0x02
    61d6:	89 83       	std	Y+1, r24	; 0x01
		//wait till motor stop
		//_delay_ms(3000);
		_delay_ms(3000);
	}

}
    61d8:	6d 96       	adiw	r28, 0x1d	; 29
    61da:	0f b6       	in	r0, 0x3f	; 63
    61dc:	f8 94       	cli
    61de:	de bf       	out	0x3e, r29	; 62
    61e0:	0f be       	out	0x3f, r0	; 63
    61e2:	cd bf       	out	0x3d, r28	; 61
    61e4:	cf 91       	pop	r28
    61e6:	df 91       	pop	r29
    61e8:	08 95       	ret

000061ea <Buzzer_voidInit>:
 */
#include "Buzzer.h"
#include "DIO.h"

void Buzzer_voidInit(void)
{
    61ea:	df 93       	push	r29
    61ec:	cf 93       	push	r28
    61ee:	cd b7       	in	r28, 0x3d	; 61
    61f0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidconfigureChannel(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
    61f2:	80 e0       	ldi	r24, 0x00	; 0
    61f4:	63 e0       	ldi	r22, 0x03	; 3
    61f6:	41 e0       	ldi	r20, 0x01	; 1
    61f8:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
}
    61fc:	cf 91       	pop	r28
    61fe:	df 91       	pop	r29
    6200:	08 95       	ret

00006202 <Buzzer_voidOn>:
void Buzzer_voidOn(void)
{
    6202:	df 93       	push	r29
    6204:	cf 93       	push	r28
    6206:	cd b7       	in	r28, 0x3d	; 61
    6208:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWRITEChannel(DIO_PORTA,DIO_PIN3,DIO_HIGH);
    620a:	80 e0       	ldi	r24, 0x00	; 0
    620c:	63 e0       	ldi	r22, 0x03	; 3
    620e:	41 e0       	ldi	r20, 0x01	; 1
    6210:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
}
    6214:	cf 91       	pop	r28
    6216:	df 91       	pop	r29
    6218:	08 95       	ret

0000621a <Buzzer_voidOff>:
void Buzzer_voidOff(void)
{
    621a:	df 93       	push	r29
    621c:	cf 93       	push	r28
    621e:	cd b7       	in	r28, 0x3d	; 61
    6220:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWRITEChannel(DIO_PORTA,DIO_PIN3,DIO_LOW);
    6222:	80 e0       	ldi	r24, 0x00	; 0
    6224:	63 e0       	ldi	r22, 0x03	; 3
    6226:	40 e0       	ldi	r20, 0x00	; 0
    6228:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <DIO_voidWRITEChannel>
}
    622c:	cf 91       	pop	r28
    622e:	df 91       	pop	r29
    6230:	08 95       	ret

00006232 <BUTTONS_voidInit>:
 *      Author: yabul
 */
#include "Button.h"
#include "Button_Types.h"
#include "DIO.h"
void BUTTONS_voidInit(void){
    6232:	df 93       	push	r29
    6234:	cf 93       	push	r28
    6236:	cd b7       	in	r28, 0x3d	; 61
    6238:	de b7       	in	r29, 0x3e	; 62
	DIO_voidconfigureChannel(DIO_PORTB, DIO_PIN0,DIO_INPUT);
    623a:	81 e0       	ldi	r24, 0x01	; 1
    623c:	60 e0       	ldi	r22, 0x00	; 0
    623e:	40 e0       	ldi	r20, 0x00	; 0
    6240:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTD, DIO_PIN6,DIO_INPUT);
    6244:	83 e0       	ldi	r24, 0x03	; 3
    6246:	66 e0       	ldi	r22, 0x06	; 6
    6248:	40 e0       	ldi	r20, 0x00	; 0
    624a:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTD, DIO_PIN2,DIO_INPUT);
    624e:	83 e0       	ldi	r24, 0x03	; 3
    6250:	62 e0       	ldi	r22, 0x02	; 2
    6252:	40 e0       	ldi	r20, 0x00	; 0
    6254:	0e 94 99 35 	call	0x6b32	; 0x6b32 <DIO_voidconfigureChannel>
}
    6258:	cf 91       	pop	r28
    625a:	df 91       	pop	r29
    625c:	08 95       	ret

0000625e <BUTTONS_udtButtonStatus>:
button_butStatus_t BUTTONS_udtButtonStatus(button_buttonId_t id)
{
    625e:	df 93       	push	r29
    6260:	cf 93       	push	r28
    6262:	00 d0       	rcall	.+0      	; 0x6264 <BUTTONS_udtButtonStatus+0x6>
    6264:	00 d0       	rcall	.+0      	; 0x6266 <BUTTONS_udtButtonStatus+0x8>
    6266:	cd b7       	in	r28, 0x3d	; 61
    6268:	de b7       	in	r29, 0x3e	; 62
    626a:	8a 83       	std	Y+2, r24	; 0x02
	button_butStatus_t localstatus;
	switch (id)
    626c:	8a 81       	ldd	r24, Y+2	; 0x02
    626e:	28 2f       	mov	r18, r24
    6270:	30 e0       	ldi	r19, 0x00	; 0
    6272:	3c 83       	std	Y+4, r19	; 0x04
    6274:	2b 83       	std	Y+3, r18	; 0x03
    6276:	8b 81       	ldd	r24, Y+3	; 0x03
    6278:	9c 81       	ldd	r25, Y+4	; 0x04
    627a:	81 30       	cpi	r24, 0x01	; 1
    627c:	91 05       	cpc	r25, r1
    627e:	a1 f0       	breq	.+40     	; 0x62a8 <BUTTONS_udtButtonStatus+0x4a>
    6280:	2b 81       	ldd	r18, Y+3	; 0x03
    6282:	3c 81       	ldd	r19, Y+4	; 0x04
    6284:	22 30       	cpi	r18, 0x02	; 2
    6286:	31 05       	cpc	r19, r1
    6288:	d1 f0       	breq	.+52     	; 0x62be <BUTTONS_udtButtonStatus+0x60>
    628a:	8b 81       	ldd	r24, Y+3	; 0x03
    628c:	9c 81       	ldd	r25, Y+4	; 0x04
    628e:	00 97       	sbiw	r24, 0x00	; 0
    6290:	01 f5       	brne	.+64     	; 0x62d2 <BUTTONS_udtButtonStatus+0x74>
	{
	case Button0:
		if (DIO_voidREADChannel(DIO_PORTB,DIO_PIN0))
    6292:	81 e0       	ldi	r24, 0x01	; 1
    6294:	60 e0       	ldi	r22, 0x00	; 0
    6296:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <DIO_voidREADChannel>
    629a:	88 23       	and	r24, r24
    629c:	19 f0       	breq	.+6      	; 0x62a4 <BUTTONS_udtButtonStatus+0x46>
		{
			localstatus = PRESSED;
    629e:	81 e0       	ldi	r24, 0x01	; 1
    62a0:	89 83       	std	Y+1, r24	; 0x01
    62a2:	17 c0       	rjmp	.+46     	; 0x62d2 <BUTTONS_udtButtonStatus+0x74>
		}
		else
		{
			localstatus = RELEASED;
    62a4:	19 82       	std	Y+1, r1	; 0x01
    62a6:	15 c0       	rjmp	.+42     	; 0x62d2 <BUTTONS_udtButtonStatus+0x74>
		}
		break;

	case Button1:
		if (DIO_voidREADChannel(DIO_PORTD, DIO_PIN6))
    62a8:	83 e0       	ldi	r24, 0x03	; 3
    62aa:	66 e0       	ldi	r22, 0x06	; 6
    62ac:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <DIO_voidREADChannel>
    62b0:	88 23       	and	r24, r24
    62b2:	19 f0       	breq	.+6      	; 0x62ba <BUTTONS_udtButtonStatus+0x5c>
		{
			localstatus = PRESSED;
    62b4:	81 e0       	ldi	r24, 0x01	; 1
    62b6:	89 83       	std	Y+1, r24	; 0x01
    62b8:	0c c0       	rjmp	.+24     	; 0x62d2 <BUTTONS_udtButtonStatus+0x74>
		}
		else
		{
			localstatus = RELEASED;
    62ba:	19 82       	std	Y+1, r1	; 0x01
    62bc:	0a c0       	rjmp	.+20     	; 0x62d2 <BUTTONS_udtButtonStatus+0x74>
		}
		break;

	case Button2:
		if (DIO_voidREADChannel(DIO_PORTD, DIO_PIN2))
    62be:	83 e0       	ldi	r24, 0x03	; 3
    62c0:	62 e0       	ldi	r22, 0x02	; 2
    62c2:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <DIO_voidREADChannel>
    62c6:	88 23       	and	r24, r24
    62c8:	19 f0       	breq	.+6      	; 0x62d0 <BUTTONS_udtButtonStatus+0x72>
		{
			localstatus = PRESSED;
    62ca:	81 e0       	ldi	r24, 0x01	; 1
    62cc:	89 83       	std	Y+1, r24	; 0x01
    62ce:	01 c0       	rjmp	.+2      	; 0x62d2 <BUTTONS_udtButtonStatus+0x74>
		}
		else
		{
			localstatus = RELEASED;
    62d0:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return localstatus;
    62d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    62d4:	0f 90       	pop	r0
    62d6:	0f 90       	pop	r0
    62d8:	0f 90       	pop	r0
    62da:	0f 90       	pop	r0
    62dc:	cf 91       	pop	r28
    62de:	df 91       	pop	r29
    62e0:	08 95       	ret

000062e2 <UART_voidInit>:
#include "UART.h"
#include "UART_Reg.h"
#define FCPU 	(16000000)

void UART_voidInit(u32 baudrate,UART_PARITY_T parity,UART_MODE_T sync,UART_STOP_T StopValue)
{
    62e2:	0f 93       	push	r16
    62e4:	1f 93       	push	r17
    62e6:	df 93       	push	r29
    62e8:	cf 93       	push	r28
    62ea:	cd b7       	in	r28, 0x3d	; 61
    62ec:	de b7       	in	r29, 0x3e	; 62
    62ee:	27 97       	sbiw	r28, 0x07	; 7
    62f0:	0f b6       	in	r0, 0x3f	; 63
    62f2:	f8 94       	cli
    62f4:	de bf       	out	0x3e, r29	; 62
    62f6:	0f be       	out	0x3f, r0	; 63
    62f8:	cd bf       	out	0x3d, r28	; 61
    62fa:	69 83       	std	Y+1, r22	; 0x01
    62fc:	7a 83       	std	Y+2, r23	; 0x02
    62fe:	8b 83       	std	Y+3, r24	; 0x03
    6300:	9c 83       	std	Y+4, r25	; 0x04
    6302:	4d 83       	std	Y+5, r20	; 0x05
    6304:	2e 83       	std	Y+6, r18	; 0x06
    6306:	0f 83       	std	Y+7, r16	; 0x07
	//set baud rate
	UART_UBRRL_Reg = ((FCPU/(baudrate*16))-1); 	//put baudrate in the Low
    6308:	09 e2       	ldi	r16, 0x29	; 41
    630a:	10 e0       	ldi	r17, 0x00	; 0
    630c:	89 81       	ldd	r24, Y+1	; 0x01
    630e:	9a 81       	ldd	r25, Y+2	; 0x02
    6310:	ab 81       	ldd	r26, Y+3	; 0x03
    6312:	bc 81       	ldd	r27, Y+4	; 0x04
    6314:	88 0f       	add	r24, r24
    6316:	99 1f       	adc	r25, r25
    6318:	aa 1f       	adc	r26, r26
    631a:	bb 1f       	adc	r27, r27
    631c:	88 0f       	add	r24, r24
    631e:	99 1f       	adc	r25, r25
    6320:	aa 1f       	adc	r26, r26
    6322:	bb 1f       	adc	r27, r27
    6324:	88 0f       	add	r24, r24
    6326:	99 1f       	adc	r25, r25
    6328:	aa 1f       	adc	r26, r26
    632a:	bb 1f       	adc	r27, r27
    632c:	88 0f       	add	r24, r24
    632e:	99 1f       	adc	r25, r25
    6330:	aa 1f       	adc	r26, r26
    6332:	bb 1f       	adc	r27, r27
    6334:	9c 01       	movw	r18, r24
    6336:	ad 01       	movw	r20, r26
    6338:	80 e0       	ldi	r24, 0x00	; 0
    633a:	94 e2       	ldi	r25, 0x24	; 36
    633c:	a4 ef       	ldi	r26, 0xF4	; 244
    633e:	b0 e0       	ldi	r27, 0x00	; 0
    6340:	bc 01       	movw	r22, r24
    6342:	cd 01       	movw	r24, r26
    6344:	0e 94 23 3a 	call	0x7446	; 0x7446 <__udivmodsi4>
    6348:	da 01       	movw	r26, r20
    634a:	c9 01       	movw	r24, r18
    634c:	81 50       	subi	r24, 0x01	; 1
    634e:	f8 01       	movw	r30, r16
    6350:	80 83       	st	Z, r24
	UART_UBRRH_Reg = (((FCPU/(baudrate*16))-1)>>8);	//shift 8 and put the remaining in the High
    6352:	00 e4       	ldi	r16, 0x40	; 64
    6354:	10 e0       	ldi	r17, 0x00	; 0
    6356:	89 81       	ldd	r24, Y+1	; 0x01
    6358:	9a 81       	ldd	r25, Y+2	; 0x02
    635a:	ab 81       	ldd	r26, Y+3	; 0x03
    635c:	bc 81       	ldd	r27, Y+4	; 0x04
    635e:	88 0f       	add	r24, r24
    6360:	99 1f       	adc	r25, r25
    6362:	aa 1f       	adc	r26, r26
    6364:	bb 1f       	adc	r27, r27
    6366:	88 0f       	add	r24, r24
    6368:	99 1f       	adc	r25, r25
    636a:	aa 1f       	adc	r26, r26
    636c:	bb 1f       	adc	r27, r27
    636e:	88 0f       	add	r24, r24
    6370:	99 1f       	adc	r25, r25
    6372:	aa 1f       	adc	r26, r26
    6374:	bb 1f       	adc	r27, r27
    6376:	88 0f       	add	r24, r24
    6378:	99 1f       	adc	r25, r25
    637a:	aa 1f       	adc	r26, r26
    637c:	bb 1f       	adc	r27, r27
    637e:	9c 01       	movw	r18, r24
    6380:	ad 01       	movw	r20, r26
    6382:	80 e0       	ldi	r24, 0x00	; 0
    6384:	94 e2       	ldi	r25, 0x24	; 36
    6386:	a4 ef       	ldi	r26, 0xF4	; 244
    6388:	b0 e0       	ldi	r27, 0x00	; 0
    638a:	bc 01       	movw	r22, r24
    638c:	cd 01       	movw	r24, r26
    638e:	0e 94 23 3a 	call	0x7446	; 0x7446 <__udivmodsi4>
    6392:	da 01       	movw	r26, r20
    6394:	c9 01       	movw	r24, r18
    6396:	01 97       	sbiw	r24, 0x01	; 1
    6398:	a1 09       	sbc	r26, r1
    639a:	b1 09       	sbc	r27, r1
    639c:	89 2f       	mov	r24, r25
    639e:	9a 2f       	mov	r25, r26
    63a0:	ab 2f       	mov	r26, r27
    63a2:	bb 27       	eor	r27, r27
    63a4:	f8 01       	movw	r30, r16
    63a6:	80 83       	st	Z, r24

	//enable receiver and trasmitter
	SET_BIT(UART_UCSRB_Reg,UART_TXEN_BIT);		//enable transmitter
    63a8:	aa e2       	ldi	r26, 0x2A	; 42
    63aa:	b0 e0       	ldi	r27, 0x00	; 0
    63ac:	ea e2       	ldi	r30, 0x2A	; 42
    63ae:	f0 e0       	ldi	r31, 0x00	; 0
    63b0:	80 81       	ld	r24, Z
    63b2:	88 60       	ori	r24, 0x08	; 8
    63b4:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB_Reg,UART_RXEN_BIT);		//enable receiver
    63b6:	aa e2       	ldi	r26, 0x2A	; 42
    63b8:	b0 e0       	ldi	r27, 0x00	; 0
    63ba:	ea e2       	ldi	r30, 0x2A	; 42
    63bc:	f0 e0       	ldi	r31, 0x00	; 0
    63be:	80 81       	ld	r24, Z
    63c0:	80 61       	ori	r24, 0x10	; 16
    63c2:	8c 93       	st	X, r24

	//set frame format: 8data,1stop bit,even parity

	//parity check
	//UCSRC_Reg=SET_BIT(UCSRC_Reg,7)|CLEAR_BIT(UCSRC_Reg,4)|SET_BIT(UCSRC_Reg,5);
	UART_UCSRC_Reg=SET_BIT(UART_UCSRC_Reg,UART_URSEL_BIT)|(parity<<UART_UPM0_BIT);
    63c4:	40 e4       	ldi	r20, 0x40	; 64
    63c6:	50 e0       	ldi	r21, 0x00	; 0
    63c8:	a0 e4       	ldi	r26, 0x40	; 64
    63ca:	b0 e0       	ldi	r27, 0x00	; 0
    63cc:	e0 e4       	ldi	r30, 0x40	; 64
    63ce:	f0 e0       	ldi	r31, 0x00	; 0
    63d0:	80 81       	ld	r24, Z
    63d2:	80 68       	ori	r24, 0x80	; 128
    63d4:	8c 93       	st	X, r24
    63d6:	8c 91       	ld	r24, X
    63d8:	28 2f       	mov	r18, r24
    63da:	8d 81       	ldd	r24, Y+5	; 0x05
    63dc:	88 2f       	mov	r24, r24
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	82 95       	swap	r24
    63e2:	92 95       	swap	r25
    63e4:	90 7f       	andi	r25, 0xF0	; 240
    63e6:	98 27       	eor	r25, r24
    63e8:	80 7f       	andi	r24, 0xF0	; 240
    63ea:	98 27       	eor	r25, r24
    63ec:	82 2b       	or	r24, r18
    63ee:	fa 01       	movw	r30, r20
    63f0:	80 83       	st	Z, r24

	//Asynchronous or Synchronous
	//UCSRC_Reg=SET_BIT(UCSRC_Reg,7)|CLEAR_BIT(UCSRC_Reg,6);
	UART_UCSRC_Reg|=SET_BIT(UART_UCSRC_Reg,UART_URSEL_BIT)|(sync<<UART_UMSEL_BIT);
    63f2:	40 e4       	ldi	r20, 0x40	; 64
    63f4:	50 e0       	ldi	r21, 0x00	; 0
    63f6:	e0 e4       	ldi	r30, 0x40	; 64
    63f8:	f0 e0       	ldi	r31, 0x00	; 0
    63fa:	80 81       	ld	r24, Z
    63fc:	38 2f       	mov	r19, r24
    63fe:	a0 e4       	ldi	r26, 0x40	; 64
    6400:	b0 e0       	ldi	r27, 0x00	; 0
    6402:	e0 e4       	ldi	r30, 0x40	; 64
    6404:	f0 e0       	ldi	r31, 0x00	; 0
    6406:	80 81       	ld	r24, Z
    6408:	80 68       	ori	r24, 0x80	; 128
    640a:	8c 93       	st	X, r24
    640c:	8c 91       	ld	r24, X
    640e:	28 2f       	mov	r18, r24
    6410:	8e 81       	ldd	r24, Y+6	; 0x06
    6412:	88 2f       	mov	r24, r24
    6414:	90 e0       	ldi	r25, 0x00	; 0
    6416:	00 24       	eor	r0, r0
    6418:	96 95       	lsr	r25
    641a:	87 95       	ror	r24
    641c:	07 94       	ror	r0
    641e:	96 95       	lsr	r25
    6420:	87 95       	ror	r24
    6422:	07 94       	ror	r0
    6424:	98 2f       	mov	r25, r24
    6426:	80 2d       	mov	r24, r0
    6428:	82 2b       	or	r24, r18
    642a:	83 2b       	or	r24, r19
    642c:	fa 01       	movw	r30, r20
    642e:	80 83       	st	Z, r24

	//1 stop bit
	//UCSRC_Reg=SET_BIT(UCSRC_Reg,7)|SET_BIT(UCSRC_Reg,3);
	UART_UCSRC_Reg|=SET_BIT(UART_UCSRC_Reg,UART_URSEL_BIT)|(StopValue<<UART_USBS_BIT);
    6430:	40 e4       	ldi	r20, 0x40	; 64
    6432:	50 e0       	ldi	r21, 0x00	; 0
    6434:	e0 e4       	ldi	r30, 0x40	; 64
    6436:	f0 e0       	ldi	r31, 0x00	; 0
    6438:	80 81       	ld	r24, Z
    643a:	38 2f       	mov	r19, r24
    643c:	a0 e4       	ldi	r26, 0x40	; 64
    643e:	b0 e0       	ldi	r27, 0x00	; 0
    6440:	e0 e4       	ldi	r30, 0x40	; 64
    6442:	f0 e0       	ldi	r31, 0x00	; 0
    6444:	80 81       	ld	r24, Z
    6446:	80 68       	ori	r24, 0x80	; 128
    6448:	8c 93       	st	X, r24
    644a:	8c 91       	ld	r24, X
    644c:	28 2f       	mov	r18, r24
    644e:	8f 81       	ldd	r24, Y+7	; 0x07
    6450:	88 2f       	mov	r24, r24
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	88 0f       	add	r24, r24
    6456:	99 1f       	adc	r25, r25
    6458:	88 0f       	add	r24, r24
    645a:	99 1f       	adc	r25, r25
    645c:	88 0f       	add	r24, r24
    645e:	99 1f       	adc	r25, r25
    6460:	82 2b       	or	r24, r18
    6462:	83 2b       	or	r24, r19
    6464:	fa 01       	movw	r30, r20
    6466:	80 83       	st	Z, r24

	//Data length
	UART_UCSRC_Reg|=SET_BIT(UART_UCSRC_Reg,UART_URSEL_BIT)|SET_BIT(UART_UCSRC_Reg,UART_UCSZ0_BIT)|SET_BIT(UART_UCSRC_Reg,UART_UCSZ1_BIT)|CLEAR_BIT(UART_UCSRB_Reg,UART_UCSZ2_BIT); //8bit data length
    6468:	20 e4       	ldi	r18, 0x40	; 64
    646a:	30 e0       	ldi	r19, 0x00	; 0
    646c:	e0 e4       	ldi	r30, 0x40	; 64
    646e:	f0 e0       	ldi	r31, 0x00	; 0
    6470:	40 81       	ld	r20, Z
    6472:	a0 e4       	ldi	r26, 0x40	; 64
    6474:	b0 e0       	ldi	r27, 0x00	; 0
    6476:	e0 e4       	ldi	r30, 0x40	; 64
    6478:	f0 e0       	ldi	r31, 0x00	; 0
    647a:	80 81       	ld	r24, Z
    647c:	80 68       	ori	r24, 0x80	; 128
    647e:	8c 93       	st	X, r24
    6480:	9c 91       	ld	r25, X
    6482:	a0 e4       	ldi	r26, 0x40	; 64
    6484:	b0 e0       	ldi	r27, 0x00	; 0
    6486:	e0 e4       	ldi	r30, 0x40	; 64
    6488:	f0 e0       	ldi	r31, 0x00	; 0
    648a:	80 81       	ld	r24, Z
    648c:	82 60       	ori	r24, 0x02	; 2
    648e:	8c 93       	st	X, r24
    6490:	8c 91       	ld	r24, X
    6492:	98 2b       	or	r25, r24
    6494:	a0 e4       	ldi	r26, 0x40	; 64
    6496:	b0 e0       	ldi	r27, 0x00	; 0
    6498:	e0 e4       	ldi	r30, 0x40	; 64
    649a:	f0 e0       	ldi	r31, 0x00	; 0
    649c:	80 81       	ld	r24, Z
    649e:	84 60       	ori	r24, 0x04	; 4
    64a0:	8c 93       	st	X, r24
    64a2:	8c 91       	ld	r24, X
    64a4:	98 2b       	or	r25, r24
    64a6:	aa e2       	ldi	r26, 0x2A	; 42
    64a8:	b0 e0       	ldi	r27, 0x00	; 0
    64aa:	ea e2       	ldi	r30, 0x2A	; 42
    64ac:	f0 e0       	ldi	r31, 0x00	; 0
    64ae:	80 81       	ld	r24, Z
    64b0:	8b 7f       	andi	r24, 0xFB	; 251
    64b2:	8c 93       	st	X, r24
    64b4:	8c 91       	ld	r24, X
    64b6:	89 2b       	or	r24, r25
    64b8:	84 2b       	or	r24, r20
    64ba:	f9 01       	movw	r30, r18
    64bc:	80 83       	st	Z, r24


}
    64be:	27 96       	adiw	r28, 0x07	; 7
    64c0:	0f b6       	in	r0, 0x3f	; 63
    64c2:	f8 94       	cli
    64c4:	de bf       	out	0x3e, r29	; 62
    64c6:	0f be       	out	0x3f, r0	; 63
    64c8:	cd bf       	out	0x3d, r28	; 61
    64ca:	cf 91       	pop	r28
    64cc:	df 91       	pop	r29
    64ce:	1f 91       	pop	r17
    64d0:	0f 91       	pop	r16
    64d2:	08 95       	ret

000064d4 <UART_Init>:


void UART_Init(u32 baudRate)
{
    64d4:	df 93       	push	r29
    64d6:	cf 93       	push	r28
    64d8:	cd b7       	in	r28, 0x3d	; 61
    64da:	de b7       	in	r29, 0x3e	; 62
    64dc:	28 97       	sbiw	r28, 0x08	; 8
    64de:	0f b6       	in	r0, 0x3f	; 63
    64e0:	f8 94       	cli
    64e2:	de bf       	out	0x3e, r29	; 62
    64e4:	0f be       	out	0x3f, r0	; 63
    64e6:	cd bf       	out	0x3d, r28	; 61
    64e8:	6d 83       	std	Y+5, r22	; 0x05
    64ea:	7e 83       	std	Y+6, r23	; 0x06
    64ec:	8f 83       	std	Y+7, r24	; 0x07
    64ee:	98 87       	std	Y+8, r25	; 0x08
	/*	Calculate UBRR Value	*/
	u32 loc_UBBR_val = ((FCPU/(16*baudRate))-1);
    64f0:	8d 81       	ldd	r24, Y+5	; 0x05
    64f2:	9e 81       	ldd	r25, Y+6	; 0x06
    64f4:	af 81       	ldd	r26, Y+7	; 0x07
    64f6:	b8 85       	ldd	r27, Y+8	; 0x08
    64f8:	88 0f       	add	r24, r24
    64fa:	99 1f       	adc	r25, r25
    64fc:	aa 1f       	adc	r26, r26
    64fe:	bb 1f       	adc	r27, r27
    6500:	88 0f       	add	r24, r24
    6502:	99 1f       	adc	r25, r25
    6504:	aa 1f       	adc	r26, r26
    6506:	bb 1f       	adc	r27, r27
    6508:	88 0f       	add	r24, r24
    650a:	99 1f       	adc	r25, r25
    650c:	aa 1f       	adc	r26, r26
    650e:	bb 1f       	adc	r27, r27
    6510:	88 0f       	add	r24, r24
    6512:	99 1f       	adc	r25, r25
    6514:	aa 1f       	adc	r26, r26
    6516:	bb 1f       	adc	r27, r27
    6518:	9c 01       	movw	r18, r24
    651a:	ad 01       	movw	r20, r26
    651c:	80 e0       	ldi	r24, 0x00	; 0
    651e:	94 e2       	ldi	r25, 0x24	; 36
    6520:	a4 ef       	ldi	r26, 0xF4	; 244
    6522:	b0 e0       	ldi	r27, 0x00	; 0
    6524:	bc 01       	movw	r22, r24
    6526:	cd 01       	movw	r24, r26
    6528:	0e 94 23 3a 	call	0x7446	; 0x7446 <__udivmodsi4>
    652c:	da 01       	movw	r26, r20
    652e:	c9 01       	movw	r24, r18
    6530:	01 97       	sbiw	r24, 0x01	; 1
    6532:	a1 09       	sbc	r26, r1
    6534:	b1 09       	sbc	r27, r1
    6536:	89 83       	std	Y+1, r24	; 0x01
    6538:	9a 83       	std	Y+2, r25	; 0x02
    653a:	ab 83       	std	Y+3, r26	; 0x03
    653c:	bc 83       	std	Y+4, r27	; 0x04
	/* Set baud rate */
	UART_UBRRH_Reg = loc_UBBR_val>>8;
    653e:	e0 e4       	ldi	r30, 0x40	; 64
    6540:	f0 e0       	ldi	r31, 0x00	; 0
    6542:	89 81       	ldd	r24, Y+1	; 0x01
    6544:	9a 81       	ldd	r25, Y+2	; 0x02
    6546:	ab 81       	ldd	r26, Y+3	; 0x03
    6548:	bc 81       	ldd	r27, Y+4	; 0x04
    654a:	89 2f       	mov	r24, r25
    654c:	9a 2f       	mov	r25, r26
    654e:	ab 2f       	mov	r26, r27
    6550:	bb 27       	eor	r27, r27
    6552:	80 83       	st	Z, r24
	UART_UBRRL_Reg = loc_UBBR_val;
    6554:	e9 e2       	ldi	r30, 0x29	; 41
    6556:	f0 e0       	ldi	r31, 0x00	; 0
    6558:	89 81       	ldd	r24, Y+1	; 0x01
    655a:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UART_UCSRB_Reg = (1<<UART_RXEN_BIT)|(1<<UART_TXEN_BIT);
    655c:	ea e2       	ldi	r30, 0x2A	; 42
    655e:	f0 e0       	ldi	r31, 0x00	; 0
    6560:	88 e1       	ldi	r24, 0x18	; 24
    6562:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UART_UCSRC_Reg = (1<<UART_URSEL_BIT)|(1<<UART_USBS_BIT)|(3<<UART_UCSZ0_BIT);
    6564:	e0 e4       	ldi	r30, 0x40	; 64
    6566:	f0 e0       	ldi	r31, 0x00	; 0
    6568:	8e e8       	ldi	r24, 0x8E	; 142
    656a:	80 83       	st	Z, r24
}
    656c:	28 96       	adiw	r28, 0x08	; 8
    656e:	0f b6       	in	r0, 0x3f	; 63
    6570:	f8 94       	cli
    6572:	de bf       	out	0x3e, r29	; 62
    6574:	0f be       	out	0x3f, r0	; 63
    6576:	cd bf       	out	0x3d, r28	; 61
    6578:	cf 91       	pop	r28
    657a:	df 91       	pop	r29
    657c:	08 95       	ret

0000657e <UART_voidSendByte>:


void UART_voidSendByte(u8 DataByte)
{
    657e:	df 93       	push	r29
    6580:	cf 93       	push	r28
    6582:	0f 92       	push	r0
    6584:	cd b7       	in	r28, 0x3d	; 61
    6586:	de b7       	in	r29, 0x3e	; 62
    6588:	89 83       	std	Y+1, r24	; 0x01
	//wait for empty transmit buffer
	while(CHECK_BIT(UART_UCSRA_Reg,UART_UDRE_BIT)==0)
    658a:	eb e2       	ldi	r30, 0x2B	; 43
    658c:	f0 e0       	ldi	r31, 0x00	; 0
    658e:	80 81       	ld	r24, Z
    6590:	82 95       	swap	r24
    6592:	86 95       	lsr	r24
    6594:	87 70       	andi	r24, 0x07	; 7
    6596:	88 2f       	mov	r24, r24
    6598:	90 e0       	ldi	r25, 0x00	; 0
    659a:	81 70       	andi	r24, 0x01	; 1
    659c:	90 70       	andi	r25, 0x00	; 0
    659e:	00 97       	sbiw	r24, 0x00	; 0
    65a0:	a1 f3       	breq	.-24     	; 0x658a <UART_voidSendByte+0xc>
		;
	//put data into buffer, sends the data
	UART_UDR_Reg= DataByte;
    65a2:	ec e2       	ldi	r30, 0x2C	; 44
    65a4:	f0 e0       	ldi	r31, 0x00	; 0
    65a6:	89 81       	ldd	r24, Y+1	; 0x01
    65a8:	80 83       	st	Z, r24
}
    65aa:	0f 90       	pop	r0
    65ac:	cf 91       	pop	r28
    65ae:	df 91       	pop	r29
    65b0:	08 95       	ret

000065b2 <UART_u8ReceiveByte>:
u8 UART_u8ReceiveByte(void)
{
    65b2:	df 93       	push	r29
    65b4:	cf 93       	push	r28
    65b6:	cd b7       	in	r28, 0x3d	; 61
    65b8:	de b7       	in	r29, 0x3e	; 62
	//wait for data to be received
	while(CHECK_BIT(UART_UCSRA_Reg,UART_RXC_BIT)==0)
    65ba:	eb e2       	ldi	r30, 0x2B	; 43
    65bc:	f0 e0       	ldi	r31, 0x00	; 0
    65be:	80 81       	ld	r24, Z
    65c0:	88 23       	and	r24, r24
    65c2:	dc f7       	brge	.-10     	; 0x65ba <UART_u8ReceiveByte+0x8>
		;
	//get and return received data from buffer
	return(UART_UDR_Reg);
    65c4:	ec e2       	ldi	r30, 0x2C	; 44
    65c6:	f0 e0       	ldi	r31, 0x00	; 0
    65c8:	80 81       	ld	r24, Z
}
    65ca:	cf 91       	pop	r28
    65cc:	df 91       	pop	r29
    65ce:	08 95       	ret

000065d0 <UART_voidTransmitString>:

void UART_voidTransmitString(u8 *str)
{
    65d0:	df 93       	push	r29
    65d2:	cf 93       	push	r28
    65d4:	00 d0       	rcall	.+0      	; 0x65d6 <UART_voidTransmitString+0x6>
    65d6:	cd b7       	in	r28, 0x3d	; 61
    65d8:	de b7       	in	r29, 0x3e	; 62
    65da:	9a 83       	std	Y+2, r25	; 0x02
    65dc:	89 83       	std	Y+1, r24	; 0x01
    65de:	0a c0       	rjmp	.+20     	; 0x65f4 <UART_voidTransmitString+0x24>
	//wait for empty transmit buffer
	while(*str != '\0')
	{
		//send charachter by charachter
		UART_voidSendByte(*str);
    65e0:	e9 81       	ldd	r30, Y+1	; 0x01
    65e2:	fa 81       	ldd	r31, Y+2	; 0x02
    65e4:	80 81       	ld	r24, Z
    65e6:	0e 94 bf 32 	call	0x657e	; 0x657e <UART_voidSendByte>
		str++;
    65ea:	89 81       	ldd	r24, Y+1	; 0x01
    65ec:	9a 81       	ldd	r25, Y+2	; 0x02
    65ee:	01 96       	adiw	r24, 0x01	; 1
    65f0:	9a 83       	std	Y+2, r25	; 0x02
    65f2:	89 83       	std	Y+1, r24	; 0x01
}

void UART_voidTransmitString(u8 *str)
{
	//wait for empty transmit buffer
	while(*str != '\0')
    65f4:	e9 81       	ldd	r30, Y+1	; 0x01
    65f6:	fa 81       	ldd	r31, Y+2	; 0x02
    65f8:	80 81       	ld	r24, Z
    65fa:	88 23       	and	r24, r24
    65fc:	89 f7       	brne	.-30     	; 0x65e0 <UART_voidTransmitString+0x10>
	{
		//send charachter by charachter
		UART_voidSendByte(*str);
		str++;
	}
}
    65fe:	0f 90       	pop	r0
    6600:	0f 90       	pop	r0
    6602:	cf 91       	pop	r28
    6604:	df 91       	pop	r29
    6606:	08 95       	ret

00006608 <Timer0_voidInit>:
#include "Bit_Math.h"
#include "Std_Types.h"
#include "GINT.h"

void Timer0_voidInit(void)
{
    6608:	df 93       	push	r29
    660a:	cf 93       	push	r28
    660c:	cd b7       	in	r28, 0x3d	; 61
    660e:	de b7       	in	r29, 0x3e	; 62

	#endif

#elif (Operation_Mode==CTC_Mode)

	SET_BIT(TIMER_TCCR0_REG,3);
    6610:	a3 e5       	ldi	r26, 0x53	; 83
    6612:	b0 e0       	ldi	r27, 0x00	; 0
    6614:	e3 e5       	ldi	r30, 0x53	; 83
    6616:	f0 e0       	ldi	r31, 0x00	; 0
    6618:	80 81       	ld	r24, Z
    661a:	88 60       	ori	r24, 0x08	; 8
    661c:	8c 93       	st	X, r24
	CLEAR_BIT(TIMER_TCCR0_REG,6);
    661e:	a3 e5       	ldi	r26, 0x53	; 83
    6620:	b0 e0       	ldi	r27, 0x00	; 0
    6622:	e3 e5       	ldi	r30, 0x53	; 83
    6624:	f0 e0       	ldi	r31, 0x00	; 0
    6626:	80 81       	ld	r24, Z
    6628:	8f 7b       	andi	r24, 0xBF	; 191
    662a:	8c 93       	st	X, r24
#else
#error "You shall define Timer Operation Mode in Timer0_ConfigurationMode.h"

#endif

}
    662c:	cf 91       	pop	r28
    662e:	df 91       	pop	r29
    6630:	08 95       	ret

00006632 <Timer0_voidTimerStart>:
#endif

#if (Operation_Mode==Normal_Mode)||(Operation_Mode==CTC_Mode)

void Timer0_voidTimerStart(Timer0_PRESCALER_T prescaler)
{
    6632:	df 93       	push	r29
    6634:	cf 93       	push	r28
    6636:	0f 92       	push	r0
    6638:	cd b7       	in	r28, 0x3d	; 61
    663a:	de b7       	in	r29, 0x3e	; 62
    663c:	89 83       	std	Y+1, r24	; 0x01
	TIMER_TCCR0_REG = (TIMER_TCCR0_REG & TIMER_PRESCALAR_MASK) |prescaler;
    663e:	a3 e5       	ldi	r26, 0x53	; 83
    6640:	b0 e0       	ldi	r27, 0x00	; 0
    6642:	e3 e5       	ldi	r30, 0x53	; 83
    6644:	f0 e0       	ldi	r31, 0x00	; 0
    6646:	80 81       	ld	r24, Z
    6648:	98 2f       	mov	r25, r24
    664a:	98 7f       	andi	r25, 0xF8	; 248
    664c:	89 81       	ldd	r24, Y+1	; 0x01
    664e:	89 2b       	or	r24, r25
    6650:	8c 93       	st	X, r24
}
    6652:	0f 90       	pop	r0
    6654:	cf 91       	pop	r28
    6656:	df 91       	pop	r29
    6658:	08 95       	ret

0000665a <Timer0_voidTimerStop>:
void Timer0_voidTimerStop(void)
{
    665a:	df 93       	push	r29
    665c:	cf 93       	push	r28
    665e:	cd b7       	in	r28, 0x3d	; 61
    6660:	de b7       	in	r29, 0x3e	; 62
	TIMER_TCCR0_REG = (TIMER_TCCR0_REG & TIMER_PRESCALAR_MASK);
    6662:	a3 e5       	ldi	r26, 0x53	; 83
    6664:	b0 e0       	ldi	r27, 0x00	; 0
    6666:	e3 e5       	ldi	r30, 0x53	; 83
    6668:	f0 e0       	ldi	r31, 0x00	; 0
    666a:	80 81       	ld	r24, Z
    666c:	88 7f       	andi	r24, 0xF8	; 248
    666e:	8c 93       	st	X, r24
}
    6670:	cf 91       	pop	r28
    6672:	df 91       	pop	r29
    6674:	08 95       	ret

00006676 <Timer0_voidEnableCTCInterrupt>:
#endif

#if (Operation_Mode==CTC_Mode)

void Timer0_voidEnableCTCInterrupt(void)
{
    6676:	df 93       	push	r29
    6678:	cf 93       	push	r28
    667a:	cd b7       	in	r28, 0x3d	; 61
    667c:	de b7       	in	r29, 0x3e	; 62
	//enable all interrupts
	GINT_voidEnableAllInterrupts();
    667e:	0e 94 67 34 	call	0x68ce	; 0x68ce <GINT_voidEnableAllInterrupts>

	//enable the compare match interrupt
	SET_BIT(TIMER_TIMSK_REG,1);
    6682:	a9 e5       	ldi	r26, 0x59	; 89
    6684:	b0 e0       	ldi	r27, 0x00	; 0
    6686:	e9 e5       	ldi	r30, 0x59	; 89
    6688:	f0 e0       	ldi	r31, 0x00	; 0
    668a:	80 81       	ld	r24, Z
    668c:	82 60       	ori	r24, 0x02	; 2
    668e:	8c 93       	st	X, r24
}
    6690:	cf 91       	pop	r28
    6692:	df 91       	pop	r29
    6694:	08 95       	ret

00006696 <Timer0_voidDisableCTCInterrupt>:
void Timer0_voidDisableCTCInterrupt(void)
{
    6696:	df 93       	push	r29
    6698:	cf 93       	push	r28
    669a:	cd b7       	in	r28, 0x3d	; 61
    669c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMER_TIMSK_REG,1);
    669e:	a9 e5       	ldi	r26, 0x59	; 89
    66a0:	b0 e0       	ldi	r27, 0x00	; 0
    66a2:	e9 e5       	ldi	r30, 0x59	; 89
    66a4:	f0 e0       	ldi	r31, 0x00	; 0
    66a6:	80 81       	ld	r24, Z
    66a8:	8d 7f       	andi	r24, 0xFD	; 253
    66aa:	8c 93       	st	X, r24
}
    66ac:	cf 91       	pop	r28
    66ae:	df 91       	pop	r29
    66b0:	08 95       	ret

000066b2 <Timer0_voidSetOCR>:
void Timer0_voidSetOCR(u8 OCR_Value)
{
    66b2:	df 93       	push	r29
    66b4:	cf 93       	push	r28
    66b6:	0f 92       	push	r0
    66b8:	cd b7       	in	r28, 0x3d	; 61
    66ba:	de b7       	in	r29, 0x3e	; 62
    66bc:	89 83       	std	Y+1, r24	; 0x01
	TIMER_OCR0_REG=OCR_Value;
    66be:	ec e5       	ldi	r30, 0x5C	; 92
    66c0:	f0 e0       	ldi	r31, 0x00	; 0
    66c2:	89 81       	ldd	r24, Y+1	; 0x01
    66c4:	80 83       	st	Z, r24
}
    66c6:	0f 90       	pop	r0
    66c8:	cf 91       	pop	r28
    66ca:	df 91       	pop	r29
    66cc:	08 95       	ret

000066ce <I2C_MasterInit>:
 */

#include "I2C.h"

void I2C_MasterInit(void)
{
    66ce:	df 93       	push	r29
    66d0:	cf 93       	push	r28
    66d2:	cd b7       	in	r28, 0x3d	; 61
    66d4:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400 KHZ */
	I2C_TWBR_REG=0x0C;
    66d6:	e0 e2       	ldi	r30, 0x20	; 32
    66d8:	f0 e0       	ldi	r31, 0x00	; 0
    66da:	8c e0       	ldi	r24, 0x0C	; 12
    66dc:	80 83       	st	Z, r24
    /* enable I2C Module	*/
	/* enable ACK check	*/
	I2C_TWCR_REG |=I2C_ENABLE|I2C_ENABLE_ACK;
    66de:	a6 e5       	ldi	r26, 0x56	; 86
    66e0:	b0 e0       	ldi	r27, 0x00	; 0
    66e2:	e6 e5       	ldi	r30, 0x56	; 86
    66e4:	f0 e0       	ldi	r31, 0x00	; 0
    66e6:	80 81       	ld	r24, Z
    66e8:	84 64       	ori	r24, 0x44	; 68
    66ea:	8c 93       	st	X, r24
}
    66ec:	cf 91       	pop	r28
    66ee:	df 91       	pop	r29
    66f0:	08 95       	ret

000066f2 <I2C_SlaveInit>:

void I2C_SlaveInit(u8 addr)
{
    66f2:	df 93       	push	r29
    66f4:	cf 93       	push	r28
    66f6:	0f 92       	push	r0
    66f8:	cd b7       	in	r28, 0x3d	; 61
    66fa:	de b7       	in	r29, 0x3e	; 62
    66fc:	89 83       	std	Y+1, r24	; 0x01
	/*	enable general call response in slave mode	*/
	SET_BIT(I2C_TWAR_REG,I2C_SLAVE_RESPONSE_BIT_NO);
    66fe:	a2 e2       	ldi	r26, 0x22	; 34
    6700:	b0 e0       	ldi	r27, 0x00	; 0
    6702:	e2 e2       	ldi	r30, 0x22	; 34
    6704:	f0 e0       	ldi	r31, 0x00	; 0
    6706:	80 81       	ld	r24, Z
    6708:	81 60       	ori	r24, 0x01	; 1
    670a:	8c 93       	st	X, r24
    /* I2C Bus Slave Address	*/
	I2C_TWAR_REG |= (addr<<1);
    670c:	a2 e2       	ldi	r26, 0x22	; 34
    670e:	b0 e0       	ldi	r27, 0x00	; 0
    6710:	e2 e2       	ldi	r30, 0x22	; 34
    6712:	f0 e0       	ldi	r31, 0x00	; 0
    6714:	80 81       	ld	r24, Z
    6716:	28 2f       	mov	r18, r24
    6718:	89 81       	ldd	r24, Y+1	; 0x01
    671a:	88 2f       	mov	r24, r24
    671c:	90 e0       	ldi	r25, 0x00	; 0
    671e:	88 0f       	add	r24, r24
    6720:	99 1f       	adc	r25, r25
    6722:	82 2b       	or	r24, r18
    6724:	8c 93       	st	X, r24
    /* enable I2C Module	*/
	/*	enable ACK check	*/
	I2C_TWCR_REG |=I2C_ENABLE|I2C_ENABLE_ACK;
    6726:	a6 e5       	ldi	r26, 0x56	; 86
    6728:	b0 e0       	ldi	r27, 0x00	; 0
    672a:	e6 e5       	ldi	r30, 0x56	; 86
    672c:	f0 e0       	ldi	r31, 0x00	; 0
    672e:	80 81       	ld	r24, Z
    6730:	84 64       	ori	r24, 0x44	; 68
    6732:	8c 93       	st	X, r24
}
    6734:	0f 90       	pop	r0
    6736:	cf 91       	pop	r28
    6738:	df 91       	pop	r29
    673a:	08 95       	ret

0000673c <I2C_StartCondition>:

boolean I2C_StartCondition(void)
{
    673c:	df 93       	push	r29
    673e:	cf 93       	push	r28
    6740:	0f 92       	push	r0
    6742:	cd b7       	in	r28, 0x3d	; 61
    6744:	de b7       	in	r29, 0x3e	; 62
	/*	send start condition	*/
	I2C_TWCR_REG = I2C_ENABLE|I2C_INTERRUPT_FLAG|I2C_START_COND;
    6746:	e6 e5       	ldi	r30, 0x56	; 86
    6748:	f0 e0       	ldi	r31, 0x00	; 0
    674a:	84 ea       	ldi	r24, 0xA4	; 164
    674c:	80 83       	st	Z, r24
    /*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    674e:	e6 e5       	ldi	r30, 0x56	; 86
    6750:	f0 e0       	ldi	r31, 0x00	; 0
    6752:	80 81       	ld	r24, Z
    6754:	88 23       	and	r24, r24
    6756:	dc f7       	brge	.-10     	; 0x674e <I2C_StartCondition+0x12>
    {
    	/*Do Nothing */
    	   ;
    }

    if (I2C_ReadStatus() != I2C_START_ACK)
    6758:	0e 94 58 34 	call	0x68b0	; 0x68b0 <I2C_ReadStatus>
    675c:	88 30       	cpi	r24, 0x08	; 8
    675e:	19 f0       	breq	.+6      	; 0x6766 <I2C_StartCondition+0x2a>
    {
    	return FALSE;
    6760:	81 e0       	ldi	r24, 0x01	; 1
    6762:	89 83       	std	Y+1, r24	; 0x01
    6764:	01 c0       	rjmp	.+2      	; 0x6768 <I2C_StartCondition+0x2c>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    6766:	19 82       	std	Y+1, r1	; 0x01
    6768:	89 81       	ldd	r24, Y+1	; 0x01
}
    676a:	0f 90       	pop	r0
    676c:	cf 91       	pop	r28
    676e:	df 91       	pop	r29
    6770:	08 95       	ret

00006772 <I2C_RepeatedStartCondition>:

boolean I2C_RepeatedStartCondition(void)
{
    6772:	df 93       	push	r29
    6774:	cf 93       	push	r28
    6776:	0f 92       	push	r0
    6778:	cd b7       	in	r28, 0x3d	; 61
    677a:	de b7       	in	r29, 0x3e	; 62
	/*	send start condition	*/
	I2C_TWCR_REG |= I2C_ENABLE|I2C_INTERRUPT_FLAG|I2C_START_COND;
    677c:	a6 e5       	ldi	r26, 0x56	; 86
    677e:	b0 e0       	ldi	r27, 0x00	; 0
    6780:	e6 e5       	ldi	r30, 0x56	; 86
    6782:	f0 e0       	ldi	r31, 0x00	; 0
    6784:	80 81       	ld	r24, Z
    6786:	84 6a       	ori	r24, 0xA4	; 164
    6788:	8c 93       	st	X, r24
    /*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    678a:	e6 e5       	ldi	r30, 0x56	; 86
    678c:	f0 e0       	ldi	r31, 0x00	; 0
    678e:	80 81       	ld	r24, Z
    6790:	88 23       	and	r24, r24
    6792:	dc f7       	brge	.-10     	; 0x678a <I2C_RepeatedStartCondition+0x18>
    {
    	/*Do Nothing */
    	   ;
    }
    if (I2C_ReadStatus() != I2C_REP_START_ACK)
    6794:	0e 94 58 34 	call	0x68b0	; 0x68b0 <I2C_ReadStatus>
    6798:	80 31       	cpi	r24, 0x10	; 16
    679a:	19 f0       	breq	.+6      	; 0x67a2 <I2C_RepeatedStartCondition+0x30>
    {
    	return FALSE;
    679c:	81 e0       	ldi	r24, 0x01	; 1
    679e:	89 83       	std	Y+1, r24	; 0x01
    67a0:	01 c0       	rjmp	.+2      	; 0x67a4 <I2C_RepeatedStartCondition+0x32>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    67a2:	19 82       	std	Y+1, r1	; 0x01
    67a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    67a6:	0f 90       	pop	r0
    67a8:	cf 91       	pop	r28
    67aa:	df 91       	pop	r29
    67ac:	08 95       	ret

000067ae <I2C_StopCondition>:

void I2C_StopCondition(void)
{
    67ae:	df 93       	push	r29
    67b0:	cf 93       	push	r28
    67b2:	cd b7       	in	r28, 0x3d	; 61
    67b4:	de b7       	in	r29, 0x3e	; 62
	/*	send stop condition	*/
	I2C_TWCR_REG |= I2C_ENABLE|I2C_INTERRUPT_FLAG|I2C_STOP_COND;
    67b6:	a6 e5       	ldi	r26, 0x56	; 86
    67b8:	b0 e0       	ldi	r27, 0x00	; 0
    67ba:	e6 e5       	ldi	r30, 0x56	; 86
    67bc:	f0 e0       	ldi	r31, 0x00	; 0
    67be:	80 81       	ld	r24, Z
    67c0:	84 69       	ori	r24, 0x94	; 148
    67c2:	8c 93       	st	X, r24
	/*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    67c4:	e6 e5       	ldi	r30, 0x56	; 86
    67c6:	f0 e0       	ldi	r31, 0x00	; 0
    67c8:	80 81       	ld	r24, Z
    67ca:	88 23       	and	r24, r24
    67cc:	dc f7       	brge	.-10     	; 0x67c4 <I2C_StopCondition+0x16>
    {
    	/*Do Nothing */
    	   ;
    }
}
    67ce:	cf 91       	pop	r28
    67d0:	df 91       	pop	r29
    67d2:	08 95       	ret

000067d4 <I2C_WriteByte>:

void I2C_WriteByte(u8 data)
{
    67d4:	df 93       	push	r29
    67d6:	cf 93       	push	r28
    67d8:	0f 92       	push	r0
    67da:	cd b7       	in	r28, 0x3d	; 61
    67dc:	de b7       	in	r29, 0x3e	; 62
    67de:	89 83       	std	Y+1, r24	; 0x01
    /*	Put data On I2C data Register	*/
	I2C_TWDR_REG = data;
    67e0:	e3 e2       	ldi	r30, 0x23	; 35
    67e2:	f0 e0       	ldi	r31, 0x00	; 0
    67e4:	89 81       	ldd	r24, Y+1	; 0x01
    67e6:	80 83       	st	Z, r24

    /*clear flag	*/
	I2C_TWCR_REG |= I2C_ENABLE|I2C_INTERRUPT_FLAG;
    67e8:	a6 e5       	ldi	r26, 0x56	; 86
    67ea:	b0 e0       	ldi	r27, 0x00	; 0
    67ec:	e6 e5       	ldi	r30, 0x56	; 86
    67ee:	f0 e0       	ldi	r31, 0x00	; 0
    67f0:	80 81       	ld	r24, Z
    67f2:	84 68       	ori	r24, 0x84	; 132
    67f4:	8c 93       	st	X, r24


	/*	Wait until data sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    67f6:	e6 e5       	ldi	r30, 0x56	; 86
    67f8:	f0 e0       	ldi	r31, 0x00	; 0
    67fa:	80 81       	ld	r24, Z
    67fc:	88 23       	and	r24, r24
    67fe:	dc f7       	brge	.-10     	; 0x67f6 <I2C_WriteByte+0x22>
    {
    	/*Do Nothing */
    	   ;
    }
}
    6800:	0f 90       	pop	r0
    6802:	cf 91       	pop	r28
    6804:	df 91       	pop	r29
    6806:	08 95       	ret

00006808 <I2C_Send_SlaveAddressWriteOperation>:

boolean I2C_Send_SlaveAddressWriteOperation(u8 addr)
{
    6808:	df 93       	push	r29
    680a:	cf 93       	push	r28
    680c:	00 d0       	rcall	.+0      	; 0x680e <I2C_Send_SlaveAddressWriteOperation+0x6>
    680e:	0f 92       	push	r0
    6810:	cd b7       	in	r28, 0x3d	; 61
    6812:	de b7       	in	r29, 0x3e	; 62
    6814:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_addrWrite=0;
    6816:	19 82       	std	Y+1, r1	; 0x01
	loc_addrWrite=(addr<<1);
    6818:	8a 81       	ldd	r24, Y+2	; 0x02
    681a:	88 0f       	add	r24, r24
    681c:	89 83       	std	Y+1, r24	; 0x01
	I2C_WriteByte(loc_addrWrite);
    681e:	89 81       	ldd	r24, Y+1	; 0x01
    6820:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <I2C_WriteByte>
    if (I2C_ReadStatus() != I2C_SLA_W_ACK)
    6824:	0e 94 58 34 	call	0x68b0	; 0x68b0 <I2C_ReadStatus>
    6828:	88 31       	cpi	r24, 0x18	; 24
    682a:	19 f0       	breq	.+6      	; 0x6832 <I2C_Send_SlaveAddressWriteOperation+0x2a>
    {
    	return FALSE;
    682c:	81 e0       	ldi	r24, 0x01	; 1
    682e:	8b 83       	std	Y+3, r24	; 0x03
    6830:	01 c0       	rjmp	.+2      	; 0x6834 <I2C_Send_SlaveAddressWriteOperation+0x2c>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    6832:	1b 82       	std	Y+3, r1	; 0x03
    6834:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6836:	0f 90       	pop	r0
    6838:	0f 90       	pop	r0
    683a:	0f 90       	pop	r0
    683c:	cf 91       	pop	r28
    683e:	df 91       	pop	r29
    6840:	08 95       	ret

00006842 <I2C_Send_SlaveAddressReadOperation>:

boolean I2C_Send_SlaveAddressReadOperation(u8 addr)
{
    6842:	df 93       	push	r29
    6844:	cf 93       	push	r28
    6846:	00 d0       	rcall	.+0      	; 0x6848 <I2C_Send_SlaveAddressReadOperation+0x6>
    6848:	0f 92       	push	r0
    684a:	cd b7       	in	r28, 0x3d	; 61
    684c:	de b7       	in	r29, 0x3e	; 62
    684e:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_addrWrite=0;
    6850:	19 82       	std	Y+1, r1	; 0x01
	loc_addrWrite=(addr<<1)|(0x01);
    6852:	8a 81       	ldd	r24, Y+2	; 0x02
    6854:	88 2f       	mov	r24, r24
    6856:	90 e0       	ldi	r25, 0x00	; 0
    6858:	88 0f       	add	r24, r24
    685a:	99 1f       	adc	r25, r25
    685c:	81 60       	ori	r24, 0x01	; 1
    685e:	89 83       	std	Y+1, r24	; 0x01
	I2C_WriteByte(loc_addrWrite);
    6860:	89 81       	ldd	r24, Y+1	; 0x01
    6862:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <I2C_WriteByte>
    if (I2C_ReadStatus() != I2C_SLA_R_ACK)
    6866:	0e 94 58 34 	call	0x68b0	; 0x68b0 <I2C_ReadStatus>
    686a:	80 34       	cpi	r24, 0x40	; 64
    686c:	19 f0       	breq	.+6      	; 0x6874 <I2C_Send_SlaveAddressReadOperation+0x32>
    {
    	return FALSE;
    686e:	81 e0       	ldi	r24, 0x01	; 1
    6870:	8b 83       	std	Y+3, r24	; 0x03
    6872:	01 c0       	rjmp	.+2      	; 0x6876 <I2C_Send_SlaveAddressReadOperation+0x34>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    6874:	1b 82       	std	Y+3, r1	; 0x03
    6876:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6878:	0f 90       	pop	r0
    687a:	0f 90       	pop	r0
    687c:	0f 90       	pop	r0
    687e:	cf 91       	pop	r28
    6880:	df 91       	pop	r29
    6882:	08 95       	ret

00006884 <I2C_ReadByte>:

u8 I2C_ReadByte(void)
{
    6884:	df 93       	push	r29
    6886:	cf 93       	push	r28
    6888:	cd b7       	in	r28, 0x3d	; 61
    688a:	de b7       	in	r29, 0x3e	; 62
	I2C_TWCR_REG |=  I2C_ENABLE|I2C_INTERRUPT_FLAG;
    688c:	a6 e5       	ldi	r26, 0x56	; 86
    688e:	b0 e0       	ldi	r27, 0x00	; 0
    6890:	e6 e5       	ldi	r30, 0x56	; 86
    6892:	f0 e0       	ldi	r31, 0x00	; 0
    6894:	80 81       	ld	r24, Z
    6896:	84 68       	ori	r24, 0x84	; 132
    6898:	8c 93       	st	X, r24
	/*	Wait until data sent successfully	*/
    while (!(CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    689a:	e6 e5       	ldi	r30, 0x56	; 86
    689c:	f0 e0       	ldi	r31, 0x00	; 0
    689e:	80 81       	ld	r24, Z
    68a0:	88 23       	and	r24, r24
    68a2:	dc f7       	brge	.-10     	; 0x689a <I2C_ReadByte+0x16>
    {
    	/*Do Nothing */
    	   ;
    }
    return I2C_TWDR_REG;
    68a4:	e3 e2       	ldi	r30, 0x23	; 35
    68a6:	f0 e0       	ldi	r31, 0x00	; 0
    68a8:	80 81       	ld	r24, Z
}
    68aa:	cf 91       	pop	r28
    68ac:	df 91       	pop	r29
    68ae:	08 95       	ret

000068b0 <I2C_ReadStatus>:

u8 I2C_ReadStatus(void)
{
    68b0:	df 93       	push	r29
    68b2:	cf 93       	push	r28
    68b4:	0f 92       	push	r0
    68b6:	cd b7       	in	r28, 0x3d	; 61
    68b8:	de b7       	in	r29, 0x3e	; 62
    u8 status;
    status = I2C_TWSR_REG & 0xF8;// 1111 1000
    68ba:	e1 e2       	ldi	r30, 0x21	; 33
    68bc:	f0 e0       	ldi	r31, 0x00	; 0
    68be:	80 81       	ld	r24, Z
    68c0:	88 7f       	andi	r24, 0xF8	; 248
    68c2:	89 83       	std	Y+1, r24	; 0x01
    return status;
    68c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    68c6:	0f 90       	pop	r0
    68c8:	cf 91       	pop	r28
    68ca:	df 91       	pop	r29
    68cc:	08 95       	ret

000068ce <GINT_voidEnableAllInterrupts>:
#include "GINT.h"
#include "Bit_Math.h"
#include "GINT_Reg.h"

void GINT_voidEnableAllInterrupts(void)
{
    68ce:	df 93       	push	r29
    68d0:	cf 93       	push	r28
    68d2:	cd b7       	in	r28, 0x3d	; 61
    68d4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_REG,7);
    68d6:	af e5       	ldi	r26, 0x5F	; 95
    68d8:	b0 e0       	ldi	r27, 0x00	; 0
    68da:	ef e5       	ldi	r30, 0x5F	; 95
    68dc:	f0 e0       	ldi	r31, 0x00	; 0
    68de:	80 81       	ld	r24, Z
    68e0:	80 68       	ori	r24, 0x80	; 128
    68e2:	8c 93       	st	X, r24
}
    68e4:	cf 91       	pop	r28
    68e6:	df 91       	pop	r29
    68e8:	08 95       	ret

000068ea <GINT_voidDisableAllInterrupts>:
void GINT_voidDisableAllInterrupts(void)
{
    68ea:	df 93       	push	r29
    68ec:	cf 93       	push	r28
    68ee:	cd b7       	in	r28, 0x3d	; 61
    68f0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_REG,7);
    68f2:	af e5       	ldi	r26, 0x5F	; 95
    68f4:	b0 e0       	ldi	r27, 0x00	; 0
    68f6:	ef e5       	ldi	r30, 0x5F	; 95
    68f8:	f0 e0       	ldi	r31, 0x00	; 0
    68fa:	80 81       	ld	r24, Z
    68fc:	8f 77       	andi	r24, 0x7F	; 127
    68fe:	8c 93       	st	X, r24
}
    6900:	cf 91       	pop	r28
    6902:	df 91       	pop	r29
    6904:	08 95       	ret

00006906 <EXTINT_voidConfigureEXTINT>:
#include "Std_Types.h"
#include "EXTINT_Reg.h"
#include "EXTINT.h"

void EXTINT_voidConfigureEXTINT(EXTINT_ID_T INTid,EXTINT_SenseCtrl_T SenseCtrl)
{
    6906:	df 93       	push	r29
    6908:	cf 93       	push	r28
    690a:	00 d0       	rcall	.+0      	; 0x690c <EXTINT_voidConfigureEXTINT+0x6>
    690c:	00 d0       	rcall	.+0      	; 0x690e <EXTINT_voidConfigureEXTINT+0x8>
    690e:	cd b7       	in	r28, 0x3d	; 61
    6910:	de b7       	in	r29, 0x3e	; 62
    6912:	89 83       	std	Y+1, r24	; 0x01
    6914:	6a 83       	std	Y+2, r22	; 0x02
	switch(INTid)
    6916:	89 81       	ldd	r24, Y+1	; 0x01
    6918:	28 2f       	mov	r18, r24
    691a:	30 e0       	ldi	r19, 0x00	; 0
    691c:	3c 83       	std	Y+4, r19	; 0x04
    691e:	2b 83       	std	Y+3, r18	; 0x03
    6920:	8b 81       	ldd	r24, Y+3	; 0x03
    6922:	9c 81       	ldd	r25, Y+4	; 0x04
    6924:	81 30       	cpi	r24, 0x01	; 1
    6926:	91 05       	cpc	r25, r1
    6928:	09 f4       	brne	.+2      	; 0x692c <EXTINT_voidConfigureEXTINT+0x26>
    692a:	5a c0       	rjmp	.+180    	; 0x69e0 <EXTINT_voidConfigureEXTINT+0xda>
    692c:	2b 81       	ldd	r18, Y+3	; 0x03
    692e:	3c 81       	ldd	r19, Y+4	; 0x04
    6930:	22 30       	cpi	r18, 0x02	; 2
    6932:	31 05       	cpc	r19, r1
    6934:	09 f4       	brne	.+2      	; 0x6938 <EXTINT_voidConfigureEXTINT+0x32>
    6936:	a3 c0       	rjmp	.+326    	; 0x6a7e <EXTINT_voidConfigureEXTINT+0x178>
    6938:	8b 81       	ldd	r24, Y+3	; 0x03
    693a:	9c 81       	ldd	r25, Y+4	; 0x04
    693c:	00 97       	sbiw	r24, 0x00	; 0
    693e:	09 f0       	breq	.+2      	; 0x6942 <EXTINT_voidConfigureEXTINT+0x3c>
    6940:	ba c0       	rjmp	.+372    	; 0x6ab6 <EXTINT_voidConfigureEXTINT+0x1b0>
	{


	case EXT_INT0:
		//Configure sense control
		if (SenseCtrl == EXT_RiseEdge)
    6942:	8a 81       	ldd	r24, Y+2	; 0x02
    6944:	81 30       	cpi	r24, 0x01	; 1
    6946:	79 f4       	brne	.+30     	; 0x6966 <EXTINT_voidConfigureEXTINT+0x60>
		{
			SET_BIT(MCUCR_REG,0);
    6948:	a5 e5       	ldi	r26, 0x55	; 85
    694a:	b0 e0       	ldi	r27, 0x00	; 0
    694c:	e5 e5       	ldi	r30, 0x55	; 85
    694e:	f0 e0       	ldi	r31, 0x00	; 0
    6950:	80 81       	ld	r24, Z
    6952:	81 60       	ori	r24, 0x01	; 1
    6954:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,1);
    6956:	a5 e5       	ldi	r26, 0x55	; 85
    6958:	b0 e0       	ldi	r27, 0x00	; 0
    695a:	e5 e5       	ldi	r30, 0x55	; 85
    695c:	f0 e0       	ldi	r31, 0x00	; 0
    695e:	80 81       	ld	r24, Z
    6960:	82 60       	ori	r24, 0x02	; 2
    6962:	8c 93       	st	X, r24
    6964:	35 c0       	rjmp	.+106    	; 0x69d0 <EXTINT_voidConfigureEXTINT+0xca>

		}
		else if (SenseCtrl == EXT_FallEdge)
    6966:	8a 81       	ldd	r24, Y+2	; 0x02
    6968:	88 23       	and	r24, r24
    696a:	79 f4       	brne	.+30     	; 0x698a <EXTINT_voidConfigureEXTINT+0x84>
		{
			CLEAR_BIT(MCUCR_REG,0);
    696c:	a5 e5       	ldi	r26, 0x55	; 85
    696e:	b0 e0       	ldi	r27, 0x00	; 0
    6970:	e5 e5       	ldi	r30, 0x55	; 85
    6972:	f0 e0       	ldi	r31, 0x00	; 0
    6974:	80 81       	ld	r24, Z
    6976:	8e 7f       	andi	r24, 0xFE	; 254
    6978:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,1);
    697a:	a5 e5       	ldi	r26, 0x55	; 85
    697c:	b0 e0       	ldi	r27, 0x00	; 0
    697e:	e5 e5       	ldi	r30, 0x55	; 85
    6980:	f0 e0       	ldi	r31, 0x00	; 0
    6982:	80 81       	ld	r24, Z
    6984:	82 60       	ori	r24, 0x02	; 2
    6986:	8c 93       	st	X, r24
    6988:	23 c0       	rjmp	.+70     	; 0x69d0 <EXTINT_voidConfigureEXTINT+0xca>
		}
		else if (SenseCtrl == EXT_BothEdge)
    698a:	8a 81       	ldd	r24, Y+2	; 0x02
    698c:	82 30       	cpi	r24, 0x02	; 2
    698e:	79 f4       	brne	.+30     	; 0x69ae <EXTINT_voidConfigureEXTINT+0xa8>
		{
			SET_BIT(MCUCR_REG,0);
    6990:	a5 e5       	ldi	r26, 0x55	; 85
    6992:	b0 e0       	ldi	r27, 0x00	; 0
    6994:	e5 e5       	ldi	r30, 0x55	; 85
    6996:	f0 e0       	ldi	r31, 0x00	; 0
    6998:	80 81       	ld	r24, Z
    699a:	81 60       	ori	r24, 0x01	; 1
    699c:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR_REG,1);
    699e:	a5 e5       	ldi	r26, 0x55	; 85
    69a0:	b0 e0       	ldi	r27, 0x00	; 0
    69a2:	e5 e5       	ldi	r30, 0x55	; 85
    69a4:	f0 e0       	ldi	r31, 0x00	; 0
    69a6:	80 81       	ld	r24, Z
    69a8:	8d 7f       	andi	r24, 0xFD	; 253
    69aa:	8c 93       	st	X, r24
    69ac:	11 c0       	rjmp	.+34     	; 0x69d0 <EXTINT_voidConfigureEXTINT+0xca>
		}
		else if (SenseCtrl == EXT_LowLevel)
    69ae:	8a 81       	ldd	r24, Y+2	; 0x02
    69b0:	83 30       	cpi	r24, 0x03	; 3
    69b2:	71 f4       	brne	.+28     	; 0x69d0 <EXTINT_voidConfigureEXTINT+0xca>
		{
			CLEAR_BIT(MCUCR_REG,0);
    69b4:	a5 e5       	ldi	r26, 0x55	; 85
    69b6:	b0 e0       	ldi	r27, 0x00	; 0
    69b8:	e5 e5       	ldi	r30, 0x55	; 85
    69ba:	f0 e0       	ldi	r31, 0x00	; 0
    69bc:	80 81       	ld	r24, Z
    69be:	8e 7f       	andi	r24, 0xFE	; 254
    69c0:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR_REG,1);
    69c2:	a5 e5       	ldi	r26, 0x55	; 85
    69c4:	b0 e0       	ldi	r27, 0x00	; 0
    69c6:	e5 e5       	ldi	r30, 0x55	; 85
    69c8:	f0 e0       	ldi	r31, 0x00	; 0
    69ca:	80 81       	ld	r24, Z
    69cc:	8d 7f       	andi	r24, 0xFD	; 253
    69ce:	8c 93       	st	X, r24
		else
		{
			// DO NOTHING
		}
		//Enable INT0 Interrupt
		SET_BIT(GICR_REG,INT0_EN_BIT); //Magic Number
    69d0:	ab e5       	ldi	r26, 0x5B	; 91
    69d2:	b0 e0       	ldi	r27, 0x00	; 0
    69d4:	eb e5       	ldi	r30, 0x5B	; 91
    69d6:	f0 e0       	ldi	r31, 0x00	; 0
    69d8:	80 81       	ld	r24, Z
    69da:	80 64       	ori	r24, 0x40	; 64
    69dc:	8c 93       	st	X, r24
    69de:	6b c0       	rjmp	.+214    	; 0x6ab6 <EXTINT_voidConfigureEXTINT+0x1b0>
		break;

	case EXT_INT1:
		//Configure sense control
		if (SenseCtrl == EXT_RiseEdge)
    69e0:	8a 81       	ldd	r24, Y+2	; 0x02
    69e2:	81 30       	cpi	r24, 0x01	; 1
    69e4:	79 f4       	brne	.+30     	; 0x6a04 <EXTINT_voidConfigureEXTINT+0xfe>
		{
			SET_BIT(MCUCR_REG,2);
    69e6:	a5 e5       	ldi	r26, 0x55	; 85
    69e8:	b0 e0       	ldi	r27, 0x00	; 0
    69ea:	e5 e5       	ldi	r30, 0x55	; 85
    69ec:	f0 e0       	ldi	r31, 0x00	; 0
    69ee:	80 81       	ld	r24, Z
    69f0:	84 60       	ori	r24, 0x04	; 4
    69f2:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,3);
    69f4:	a5 e5       	ldi	r26, 0x55	; 85
    69f6:	b0 e0       	ldi	r27, 0x00	; 0
    69f8:	e5 e5       	ldi	r30, 0x55	; 85
    69fa:	f0 e0       	ldi	r31, 0x00	; 0
    69fc:	80 81       	ld	r24, Z
    69fe:	88 60       	ori	r24, 0x08	; 8
    6a00:	8c 93       	st	X, r24
    6a02:	35 c0       	rjmp	.+106    	; 0x6a6e <EXTINT_voidConfigureEXTINT+0x168>

		}
		else if (SenseCtrl == EXT_FallEdge)
    6a04:	8a 81       	ldd	r24, Y+2	; 0x02
    6a06:	88 23       	and	r24, r24
    6a08:	79 f4       	brne	.+30     	; 0x6a28 <EXTINT_voidConfigureEXTINT+0x122>
		{
			CLEAR_BIT(MCUCR_REG,2);
    6a0a:	a5 e5       	ldi	r26, 0x55	; 85
    6a0c:	b0 e0       	ldi	r27, 0x00	; 0
    6a0e:	e5 e5       	ldi	r30, 0x55	; 85
    6a10:	f0 e0       	ldi	r31, 0x00	; 0
    6a12:	80 81       	ld	r24, Z
    6a14:	8b 7f       	andi	r24, 0xFB	; 251
    6a16:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,3);
    6a18:	a5 e5       	ldi	r26, 0x55	; 85
    6a1a:	b0 e0       	ldi	r27, 0x00	; 0
    6a1c:	e5 e5       	ldi	r30, 0x55	; 85
    6a1e:	f0 e0       	ldi	r31, 0x00	; 0
    6a20:	80 81       	ld	r24, Z
    6a22:	88 60       	ori	r24, 0x08	; 8
    6a24:	8c 93       	st	X, r24
    6a26:	23 c0       	rjmp	.+70     	; 0x6a6e <EXTINT_voidConfigureEXTINT+0x168>
		}
		else if (SenseCtrl == EXT_BothEdge)
    6a28:	8a 81       	ldd	r24, Y+2	; 0x02
    6a2a:	82 30       	cpi	r24, 0x02	; 2
    6a2c:	79 f4       	brne	.+30     	; 0x6a4c <EXTINT_voidConfigureEXTINT+0x146>
		{
			SET_BIT(MCUCR_REG,2);
    6a2e:	a5 e5       	ldi	r26, 0x55	; 85
    6a30:	b0 e0       	ldi	r27, 0x00	; 0
    6a32:	e5 e5       	ldi	r30, 0x55	; 85
    6a34:	f0 e0       	ldi	r31, 0x00	; 0
    6a36:	80 81       	ld	r24, Z
    6a38:	84 60       	ori	r24, 0x04	; 4
    6a3a:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR_REG,3);
    6a3c:	a5 e5       	ldi	r26, 0x55	; 85
    6a3e:	b0 e0       	ldi	r27, 0x00	; 0
    6a40:	e5 e5       	ldi	r30, 0x55	; 85
    6a42:	f0 e0       	ldi	r31, 0x00	; 0
    6a44:	80 81       	ld	r24, Z
    6a46:	87 7f       	andi	r24, 0xF7	; 247
    6a48:	8c 93       	st	X, r24
    6a4a:	11 c0       	rjmp	.+34     	; 0x6a6e <EXTINT_voidConfigureEXTINT+0x168>
		}
		else if (SenseCtrl == EXT_LowLevel)
    6a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a4e:	83 30       	cpi	r24, 0x03	; 3
    6a50:	71 f4       	brne	.+28     	; 0x6a6e <EXTINT_voidConfigureEXTINT+0x168>
		{
			CLEAR_BIT(MCUCR_REG,2);
    6a52:	a5 e5       	ldi	r26, 0x55	; 85
    6a54:	b0 e0       	ldi	r27, 0x00	; 0
    6a56:	e5 e5       	ldi	r30, 0x55	; 85
    6a58:	f0 e0       	ldi	r31, 0x00	; 0
    6a5a:	80 81       	ld	r24, Z
    6a5c:	8b 7f       	andi	r24, 0xFB	; 251
    6a5e:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR_REG,3);
    6a60:	a5 e5       	ldi	r26, 0x55	; 85
    6a62:	b0 e0       	ldi	r27, 0x00	; 0
    6a64:	e5 e5       	ldi	r30, 0x55	; 85
    6a66:	f0 e0       	ldi	r31, 0x00	; 0
    6a68:	80 81       	ld	r24, Z
    6a6a:	87 7f       	andi	r24, 0xF7	; 247
    6a6c:	8c 93       	st	X, r24
		}
		else
		{
			// DO NOTHING
		}
		SET_BIT(GICR_REG,INT1_EN_BIT); //Magic Number
    6a6e:	ab e5       	ldi	r26, 0x5B	; 91
    6a70:	b0 e0       	ldi	r27, 0x00	; 0
    6a72:	eb e5       	ldi	r30, 0x5B	; 91
    6a74:	f0 e0       	ldi	r31, 0x00	; 0
    6a76:	80 81       	ld	r24, Z
    6a78:	80 68       	ori	r24, 0x80	; 128
    6a7a:	8c 93       	st	X, r24
    6a7c:	1c c0       	rjmp	.+56     	; 0x6ab6 <EXTINT_voidConfigureEXTINT+0x1b0>
		break;

	case EXT_INT2:
		if (SenseCtrl == EXT_FallEdge)
    6a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    6a80:	88 23       	and	r24, r24
    6a82:	41 f4       	brne	.+16     	; 0x6a94 <EXTINT_voidConfigureEXTINT+0x18e>
		{
			CLEAR_BIT(MCUCSR_REG,6);
    6a84:	a4 e5       	ldi	r26, 0x54	; 84
    6a86:	b0 e0       	ldi	r27, 0x00	; 0
    6a88:	e4 e5       	ldi	r30, 0x54	; 84
    6a8a:	f0 e0       	ldi	r31, 0x00	; 0
    6a8c:	80 81       	ld	r24, Z
    6a8e:	8f 7b       	andi	r24, 0xBF	; 191
    6a90:	8c 93       	st	X, r24
    6a92:	0a c0       	rjmp	.+20     	; 0x6aa8 <EXTINT_voidConfigureEXTINT+0x1a2>

		}
		else if (SenseCtrl == EXT_RiseEdge)
    6a94:	8a 81       	ldd	r24, Y+2	; 0x02
    6a96:	81 30       	cpi	r24, 0x01	; 1
    6a98:	39 f4       	brne	.+14     	; 0x6aa8 <EXTINT_voidConfigureEXTINT+0x1a2>
		{
			SET_BIT(MCUCSR_REG,6);
    6a9a:	a4 e5       	ldi	r26, 0x54	; 84
    6a9c:	b0 e0       	ldi	r27, 0x00	; 0
    6a9e:	e4 e5       	ldi	r30, 0x54	; 84
    6aa0:	f0 e0       	ldi	r31, 0x00	; 0
    6aa2:	80 81       	ld	r24, Z
    6aa4:	80 64       	ori	r24, 0x40	; 64
    6aa6:	8c 93       	st	X, r24
		}
		else
		{
			// DO NOTHING
		}
		SET_BIT(GICR_REG,INT2_EN_BIT); //Magic Number
    6aa8:	ab e5       	ldi	r26, 0x5B	; 91
    6aaa:	b0 e0       	ldi	r27, 0x00	; 0
    6aac:	eb e5       	ldi	r30, 0x5B	; 91
    6aae:	f0 e0       	ldi	r31, 0x00	; 0
    6ab0:	80 81       	ld	r24, Z
    6ab2:	80 62       	ori	r24, 0x20	; 32
    6ab4:	8c 93       	st	X, r24
		break;


	}

}
    6ab6:	0f 90       	pop	r0
    6ab8:	0f 90       	pop	r0
    6aba:	0f 90       	pop	r0
    6abc:	0f 90       	pop	r0
    6abe:	cf 91       	pop	r28
    6ac0:	df 91       	pop	r29
    6ac2:	08 95       	ret

00006ac4 <EXTINT_voidDisableEXTINT>:
void EXTINT_voidDisableEXTINT(EXTINT_ID_T INTid)
{
    6ac4:	df 93       	push	r29
    6ac6:	cf 93       	push	r28
    6ac8:	00 d0       	rcall	.+0      	; 0x6aca <EXTINT_voidDisableEXTINT+0x6>
    6aca:	0f 92       	push	r0
    6acc:	cd b7       	in	r28, 0x3d	; 61
    6ace:	de b7       	in	r29, 0x3e	; 62
    6ad0:	89 83       	std	Y+1, r24	; 0x01
	switch (INTid)
    6ad2:	89 81       	ldd	r24, Y+1	; 0x01
    6ad4:	28 2f       	mov	r18, r24
    6ad6:	30 e0       	ldi	r19, 0x00	; 0
    6ad8:	3b 83       	std	Y+3, r19	; 0x03
    6ada:	2a 83       	std	Y+2, r18	; 0x02
    6adc:	8a 81       	ldd	r24, Y+2	; 0x02
    6ade:	9b 81       	ldd	r25, Y+3	; 0x03
    6ae0:	81 30       	cpi	r24, 0x01	; 1
    6ae2:	91 05       	cpc	r25, r1
    6ae4:	89 f0       	breq	.+34     	; 0x6b08 <EXTINT_voidDisableEXTINT+0x44>
    6ae6:	2a 81       	ldd	r18, Y+2	; 0x02
    6ae8:	3b 81       	ldd	r19, Y+3	; 0x03
    6aea:	22 30       	cpi	r18, 0x02	; 2
    6aec:	31 05       	cpc	r19, r1
    6aee:	a1 f0       	breq	.+40     	; 0x6b18 <EXTINT_voidDisableEXTINT+0x54>
    6af0:	8a 81       	ldd	r24, Y+2	; 0x02
    6af2:	9b 81       	ldd	r25, Y+3	; 0x03
    6af4:	00 97       	sbiw	r24, 0x00	; 0
    6af6:	b9 f4       	brne	.+46     	; 0x6b26 <EXTINT_voidDisableEXTINT+0x62>
	{
	case EXT_INT0:
		CLEAR_BIT(GICR_REG,INT0_EN_BIT);
    6af8:	ab e5       	ldi	r26, 0x5B	; 91
    6afa:	b0 e0       	ldi	r27, 0x00	; 0
    6afc:	eb e5       	ldi	r30, 0x5B	; 91
    6afe:	f0 e0       	ldi	r31, 0x00	; 0
    6b00:	80 81       	ld	r24, Z
    6b02:	8f 7b       	andi	r24, 0xBF	; 191
    6b04:	8c 93       	st	X, r24
    6b06:	0f c0       	rjmp	.+30     	; 0x6b26 <EXTINT_voidDisableEXTINT+0x62>
		break;
	case EXT_INT1:
		CLEAR_BIT(GICR_REG,INT1_EN_BIT);
    6b08:	ab e5       	ldi	r26, 0x5B	; 91
    6b0a:	b0 e0       	ldi	r27, 0x00	; 0
    6b0c:	eb e5       	ldi	r30, 0x5B	; 91
    6b0e:	f0 e0       	ldi	r31, 0x00	; 0
    6b10:	80 81       	ld	r24, Z
    6b12:	8f 77       	andi	r24, 0x7F	; 127
    6b14:	8c 93       	st	X, r24
    6b16:	07 c0       	rjmp	.+14     	; 0x6b26 <EXTINT_voidDisableEXTINT+0x62>
		break;
	case EXT_INT2:
		CLEAR_BIT(GICR_REG,INT2_EN_BIT);
    6b18:	ab e5       	ldi	r26, 0x5B	; 91
    6b1a:	b0 e0       	ldi	r27, 0x00	; 0
    6b1c:	eb e5       	ldi	r30, 0x5B	; 91
    6b1e:	f0 e0       	ldi	r31, 0x00	; 0
    6b20:	80 81       	ld	r24, Z
    6b22:	8f 7d       	andi	r24, 0xDF	; 223
    6b24:	8c 93       	st	X, r24
		break;
	}
}
    6b26:	0f 90       	pop	r0
    6b28:	0f 90       	pop	r0
    6b2a:	0f 90       	pop	r0
    6b2c:	cf 91       	pop	r28
    6b2e:	df 91       	pop	r29
    6b30:	08 95       	ret

00006b32 <DIO_voidconfigureChannel>:
#include "SSD.h"
#include "LCD.h"
#include "ADC.h"

void DIO_voidconfigureChannel(DIO_PORT_T port,DIO_PIN_T pin,DIO_DIR_T dir)
{
    6b32:	df 93       	push	r29
    6b34:	cf 93       	push	r28
    6b36:	00 d0       	rcall	.+0      	; 0x6b38 <DIO_voidconfigureChannel+0x6>
    6b38:	00 d0       	rcall	.+0      	; 0x6b3a <DIO_voidconfigureChannel+0x8>
    6b3a:	0f 92       	push	r0
    6b3c:	cd b7       	in	r28, 0x3d	; 61
    6b3e:	de b7       	in	r29, 0x3e	; 62
    6b40:	89 83       	std	Y+1, r24	; 0x01
    6b42:	6a 83       	std	Y+2, r22	; 0x02
    6b44:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    6b46:	89 81       	ldd	r24, Y+1	; 0x01
    6b48:	28 2f       	mov	r18, r24
    6b4a:	30 e0       	ldi	r19, 0x00	; 0
    6b4c:	3d 83       	std	Y+5, r19	; 0x05
    6b4e:	2c 83       	std	Y+4, r18	; 0x04
    6b50:	8c 81       	ldd	r24, Y+4	; 0x04
    6b52:	9d 81       	ldd	r25, Y+5	; 0x05
    6b54:	81 30       	cpi	r24, 0x01	; 1
    6b56:	91 05       	cpc	r25, r1
    6b58:	09 f4       	brne	.+2      	; 0x6b5c <DIO_voidconfigureChannel+0x2a>
    6b5a:	43 c0       	rjmp	.+134    	; 0x6be2 <DIO_voidconfigureChannel+0xb0>
    6b5c:	2c 81       	ldd	r18, Y+4	; 0x04
    6b5e:	3d 81       	ldd	r19, Y+5	; 0x05
    6b60:	22 30       	cpi	r18, 0x02	; 2
    6b62:	31 05       	cpc	r19, r1
    6b64:	2c f4       	brge	.+10     	; 0x6b70 <DIO_voidconfigureChannel+0x3e>
    6b66:	8c 81       	ldd	r24, Y+4	; 0x04
    6b68:	9d 81       	ldd	r25, Y+5	; 0x05
    6b6a:	00 97       	sbiw	r24, 0x00	; 0
    6b6c:	71 f0       	breq	.+28     	; 0x6b8a <DIO_voidconfigureChannel+0x58>
    6b6e:	bc c0       	rjmp	.+376    	; 0x6ce8 <DIO_voidconfigureChannel+0x1b6>
    6b70:	2c 81       	ldd	r18, Y+4	; 0x04
    6b72:	3d 81       	ldd	r19, Y+5	; 0x05
    6b74:	22 30       	cpi	r18, 0x02	; 2
    6b76:	31 05       	cpc	r19, r1
    6b78:	09 f4       	brne	.+2      	; 0x6b7c <DIO_voidconfigureChannel+0x4a>
    6b7a:	5f c0       	rjmp	.+190    	; 0x6c3a <DIO_voidconfigureChannel+0x108>
    6b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    6b7e:	9d 81       	ldd	r25, Y+5	; 0x05
    6b80:	83 30       	cpi	r24, 0x03	; 3
    6b82:	91 05       	cpc	r25, r1
    6b84:	09 f4       	brne	.+2      	; 0x6b88 <DIO_voidconfigureChannel+0x56>
    6b86:	85 c0       	rjmp	.+266    	; 0x6c92 <DIO_voidconfigureChannel+0x160>
    6b88:	af c0       	rjmp	.+350    	; 0x6ce8 <DIO_voidconfigureChannel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    6b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    6b8c:	88 23       	and	r24, r24
    6b8e:	a9 f4       	brne	.+42     	; 0x6bba <DIO_voidconfigureChannel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    6b90:	aa e3       	ldi	r26, 0x3A	; 58
    6b92:	b0 e0       	ldi	r27, 0x00	; 0
    6b94:	ea e3       	ldi	r30, 0x3A	; 58
    6b96:	f0 e0       	ldi	r31, 0x00	; 0
    6b98:	80 81       	ld	r24, Z
    6b9a:	48 2f       	mov	r20, r24
    6b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    6b9e:	28 2f       	mov	r18, r24
    6ba0:	30 e0       	ldi	r19, 0x00	; 0
    6ba2:	81 e0       	ldi	r24, 0x01	; 1
    6ba4:	90 e0       	ldi	r25, 0x00	; 0
    6ba6:	02 2e       	mov	r0, r18
    6ba8:	02 c0       	rjmp	.+4      	; 0x6bae <DIO_voidconfigureChannel+0x7c>
    6baa:	88 0f       	add	r24, r24
    6bac:	99 1f       	adc	r25, r25
    6bae:	0a 94       	dec	r0
    6bb0:	e2 f7       	brpl	.-8      	; 0x6baa <DIO_voidconfigureChannel+0x78>
    6bb2:	80 95       	com	r24
    6bb4:	84 23       	and	r24, r20
    6bb6:	8c 93       	st	X, r24
    6bb8:	97 c0       	rjmp	.+302    	; 0x6ce8 <DIO_voidconfigureChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    6bba:	aa e3       	ldi	r26, 0x3A	; 58
    6bbc:	b0 e0       	ldi	r27, 0x00	; 0
    6bbe:	ea e3       	ldi	r30, 0x3A	; 58
    6bc0:	f0 e0       	ldi	r31, 0x00	; 0
    6bc2:	80 81       	ld	r24, Z
    6bc4:	48 2f       	mov	r20, r24
    6bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    6bc8:	28 2f       	mov	r18, r24
    6bca:	30 e0       	ldi	r19, 0x00	; 0
    6bcc:	81 e0       	ldi	r24, 0x01	; 1
    6bce:	90 e0       	ldi	r25, 0x00	; 0
    6bd0:	02 2e       	mov	r0, r18
    6bd2:	02 c0       	rjmp	.+4      	; 0x6bd8 <DIO_voidconfigureChannel+0xa6>
    6bd4:	88 0f       	add	r24, r24
    6bd6:	99 1f       	adc	r25, r25
    6bd8:	0a 94       	dec	r0
    6bda:	e2 f7       	brpl	.-8      	; 0x6bd4 <DIO_voidconfigureChannel+0xa2>
    6bdc:	84 2b       	or	r24, r20
    6bde:	8c 93       	st	X, r24
    6be0:	83 c0       	rjmp	.+262    	; 0x6ce8 <DIO_voidconfigureChannel+0x1b6>

		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    6be2:	8b 81       	ldd	r24, Y+3	; 0x03
    6be4:	88 23       	and	r24, r24
    6be6:	a9 f4       	brne	.+42     	; 0x6c12 <DIO_voidconfigureChannel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    6be8:	a7 e3       	ldi	r26, 0x37	; 55
    6bea:	b0 e0       	ldi	r27, 0x00	; 0
    6bec:	e7 e3       	ldi	r30, 0x37	; 55
    6bee:	f0 e0       	ldi	r31, 0x00	; 0
    6bf0:	80 81       	ld	r24, Z
    6bf2:	48 2f       	mov	r20, r24
    6bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    6bf6:	28 2f       	mov	r18, r24
    6bf8:	30 e0       	ldi	r19, 0x00	; 0
    6bfa:	81 e0       	ldi	r24, 0x01	; 1
    6bfc:	90 e0       	ldi	r25, 0x00	; 0
    6bfe:	02 2e       	mov	r0, r18
    6c00:	02 c0       	rjmp	.+4      	; 0x6c06 <DIO_voidconfigureChannel+0xd4>
    6c02:	88 0f       	add	r24, r24
    6c04:	99 1f       	adc	r25, r25
    6c06:	0a 94       	dec	r0
    6c08:	e2 f7       	brpl	.-8      	; 0x6c02 <DIO_voidconfigureChannel+0xd0>
    6c0a:	80 95       	com	r24
    6c0c:	84 23       	and	r24, r20
    6c0e:	8c 93       	st	X, r24
    6c10:	6b c0       	rjmp	.+214    	; 0x6ce8 <DIO_voidconfigureChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    6c12:	a7 e3       	ldi	r26, 0x37	; 55
    6c14:	b0 e0       	ldi	r27, 0x00	; 0
    6c16:	e7 e3       	ldi	r30, 0x37	; 55
    6c18:	f0 e0       	ldi	r31, 0x00	; 0
    6c1a:	80 81       	ld	r24, Z
    6c1c:	48 2f       	mov	r20, r24
    6c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    6c20:	28 2f       	mov	r18, r24
    6c22:	30 e0       	ldi	r19, 0x00	; 0
    6c24:	81 e0       	ldi	r24, 0x01	; 1
    6c26:	90 e0       	ldi	r25, 0x00	; 0
    6c28:	02 2e       	mov	r0, r18
    6c2a:	02 c0       	rjmp	.+4      	; 0x6c30 <DIO_voidconfigureChannel+0xfe>
    6c2c:	88 0f       	add	r24, r24
    6c2e:	99 1f       	adc	r25, r25
    6c30:	0a 94       	dec	r0
    6c32:	e2 f7       	brpl	.-8      	; 0x6c2c <DIO_voidconfigureChannel+0xfa>
    6c34:	84 2b       	or	r24, r20
    6c36:	8c 93       	st	X, r24
    6c38:	57 c0       	rjmp	.+174    	; 0x6ce8 <DIO_voidconfigureChannel+0x1b6>

		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    6c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    6c3c:	88 23       	and	r24, r24
    6c3e:	a9 f4       	brne	.+42     	; 0x6c6a <DIO_voidconfigureChannel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    6c40:	a4 e3       	ldi	r26, 0x34	; 52
    6c42:	b0 e0       	ldi	r27, 0x00	; 0
    6c44:	e4 e3       	ldi	r30, 0x34	; 52
    6c46:	f0 e0       	ldi	r31, 0x00	; 0
    6c48:	80 81       	ld	r24, Z
    6c4a:	48 2f       	mov	r20, r24
    6c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    6c4e:	28 2f       	mov	r18, r24
    6c50:	30 e0       	ldi	r19, 0x00	; 0
    6c52:	81 e0       	ldi	r24, 0x01	; 1
    6c54:	90 e0       	ldi	r25, 0x00	; 0
    6c56:	02 2e       	mov	r0, r18
    6c58:	02 c0       	rjmp	.+4      	; 0x6c5e <DIO_voidconfigureChannel+0x12c>
    6c5a:	88 0f       	add	r24, r24
    6c5c:	99 1f       	adc	r25, r25
    6c5e:	0a 94       	dec	r0
    6c60:	e2 f7       	brpl	.-8      	; 0x6c5a <DIO_voidconfigureChannel+0x128>
    6c62:	80 95       	com	r24
    6c64:	84 23       	and	r24, r20
    6c66:	8c 93       	st	X, r24
    6c68:	3f c0       	rjmp	.+126    	; 0x6ce8 <DIO_voidconfigureChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    6c6a:	a4 e3       	ldi	r26, 0x34	; 52
    6c6c:	b0 e0       	ldi	r27, 0x00	; 0
    6c6e:	e4 e3       	ldi	r30, 0x34	; 52
    6c70:	f0 e0       	ldi	r31, 0x00	; 0
    6c72:	80 81       	ld	r24, Z
    6c74:	48 2f       	mov	r20, r24
    6c76:	8a 81       	ldd	r24, Y+2	; 0x02
    6c78:	28 2f       	mov	r18, r24
    6c7a:	30 e0       	ldi	r19, 0x00	; 0
    6c7c:	81 e0       	ldi	r24, 0x01	; 1
    6c7e:	90 e0       	ldi	r25, 0x00	; 0
    6c80:	02 2e       	mov	r0, r18
    6c82:	02 c0       	rjmp	.+4      	; 0x6c88 <DIO_voidconfigureChannel+0x156>
    6c84:	88 0f       	add	r24, r24
    6c86:	99 1f       	adc	r25, r25
    6c88:	0a 94       	dec	r0
    6c8a:	e2 f7       	brpl	.-8      	; 0x6c84 <DIO_voidconfigureChannel+0x152>
    6c8c:	84 2b       	or	r24, r20
    6c8e:	8c 93       	st	X, r24
    6c90:	2b c0       	rjmp	.+86     	; 0x6ce8 <DIO_voidconfigureChannel+0x1b6>
		}
		break;


	case DIO_PORTD:
		if (dir == DIO_INPUT)
    6c92:	8b 81       	ldd	r24, Y+3	; 0x03
    6c94:	88 23       	and	r24, r24
    6c96:	a9 f4       	brne	.+42     	; 0x6cc2 <DIO_voidconfigureChannel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    6c98:	a1 e3       	ldi	r26, 0x31	; 49
    6c9a:	b0 e0       	ldi	r27, 0x00	; 0
    6c9c:	e1 e3       	ldi	r30, 0x31	; 49
    6c9e:	f0 e0       	ldi	r31, 0x00	; 0
    6ca0:	80 81       	ld	r24, Z
    6ca2:	48 2f       	mov	r20, r24
    6ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    6ca6:	28 2f       	mov	r18, r24
    6ca8:	30 e0       	ldi	r19, 0x00	; 0
    6caa:	81 e0       	ldi	r24, 0x01	; 1
    6cac:	90 e0       	ldi	r25, 0x00	; 0
    6cae:	02 2e       	mov	r0, r18
    6cb0:	02 c0       	rjmp	.+4      	; 0x6cb6 <DIO_voidconfigureChannel+0x184>
    6cb2:	88 0f       	add	r24, r24
    6cb4:	99 1f       	adc	r25, r25
    6cb6:	0a 94       	dec	r0
    6cb8:	e2 f7       	brpl	.-8      	; 0x6cb2 <DIO_voidconfigureChannel+0x180>
    6cba:	80 95       	com	r24
    6cbc:	84 23       	and	r24, r20
    6cbe:	8c 93       	st	X, r24
    6cc0:	13 c0       	rjmp	.+38     	; 0x6ce8 <DIO_voidconfigureChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    6cc2:	a1 e3       	ldi	r26, 0x31	; 49
    6cc4:	b0 e0       	ldi	r27, 0x00	; 0
    6cc6:	e1 e3       	ldi	r30, 0x31	; 49
    6cc8:	f0 e0       	ldi	r31, 0x00	; 0
    6cca:	80 81       	ld	r24, Z
    6ccc:	48 2f       	mov	r20, r24
    6cce:	8a 81       	ldd	r24, Y+2	; 0x02
    6cd0:	28 2f       	mov	r18, r24
    6cd2:	30 e0       	ldi	r19, 0x00	; 0
    6cd4:	81 e0       	ldi	r24, 0x01	; 1
    6cd6:	90 e0       	ldi	r25, 0x00	; 0
    6cd8:	02 2e       	mov	r0, r18
    6cda:	02 c0       	rjmp	.+4      	; 0x6ce0 <DIO_voidconfigureChannel+0x1ae>
    6cdc:	88 0f       	add	r24, r24
    6cde:	99 1f       	adc	r25, r25
    6ce0:	0a 94       	dec	r0
    6ce2:	e2 f7       	brpl	.-8      	; 0x6cdc <DIO_voidconfigureChannel+0x1aa>
    6ce4:	84 2b       	or	r24, r20
    6ce6:	8c 93       	st	X, r24
		}
		break;
	}


}
    6ce8:	0f 90       	pop	r0
    6cea:	0f 90       	pop	r0
    6cec:	0f 90       	pop	r0
    6cee:	0f 90       	pop	r0
    6cf0:	0f 90       	pop	r0
    6cf2:	cf 91       	pop	r28
    6cf4:	df 91       	pop	r29
    6cf6:	08 95       	ret

00006cf8 <DIO_voidWRITEChannel>:
void DIO_voidWRITEChannel(DIO_PORT_T port,DIO_PIN_T pin,DIO_LEVEL_T level)
{
    6cf8:	df 93       	push	r29
    6cfa:	cf 93       	push	r28
    6cfc:	00 d0       	rcall	.+0      	; 0x6cfe <DIO_voidWRITEChannel+0x6>
    6cfe:	00 d0       	rcall	.+0      	; 0x6d00 <DIO_voidWRITEChannel+0x8>
    6d00:	0f 92       	push	r0
    6d02:	cd b7       	in	r28, 0x3d	; 61
    6d04:	de b7       	in	r29, 0x3e	; 62
    6d06:	89 83       	std	Y+1, r24	; 0x01
    6d08:	6a 83       	std	Y+2, r22	; 0x02
    6d0a:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    6d0c:	89 81       	ldd	r24, Y+1	; 0x01
    6d0e:	28 2f       	mov	r18, r24
    6d10:	30 e0       	ldi	r19, 0x00	; 0
    6d12:	3d 83       	std	Y+5, r19	; 0x05
    6d14:	2c 83       	std	Y+4, r18	; 0x04
    6d16:	8c 81       	ldd	r24, Y+4	; 0x04
    6d18:	9d 81       	ldd	r25, Y+5	; 0x05
    6d1a:	81 30       	cpi	r24, 0x01	; 1
    6d1c:	91 05       	cpc	r25, r1
    6d1e:	09 f4       	brne	.+2      	; 0x6d22 <DIO_voidWRITEChannel+0x2a>
    6d20:	43 c0       	rjmp	.+134    	; 0x6da8 <DIO_voidWRITEChannel+0xb0>
    6d22:	2c 81       	ldd	r18, Y+4	; 0x04
    6d24:	3d 81       	ldd	r19, Y+5	; 0x05
    6d26:	22 30       	cpi	r18, 0x02	; 2
    6d28:	31 05       	cpc	r19, r1
    6d2a:	2c f4       	brge	.+10     	; 0x6d36 <DIO_voidWRITEChannel+0x3e>
    6d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    6d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    6d30:	00 97       	sbiw	r24, 0x00	; 0
    6d32:	71 f0       	breq	.+28     	; 0x6d50 <DIO_voidWRITEChannel+0x58>
    6d34:	bc c0       	rjmp	.+376    	; 0x6eae <DIO_voidWRITEChannel+0x1b6>
    6d36:	2c 81       	ldd	r18, Y+4	; 0x04
    6d38:	3d 81       	ldd	r19, Y+5	; 0x05
    6d3a:	22 30       	cpi	r18, 0x02	; 2
    6d3c:	31 05       	cpc	r19, r1
    6d3e:	09 f4       	brne	.+2      	; 0x6d42 <DIO_voidWRITEChannel+0x4a>
    6d40:	5f c0       	rjmp	.+190    	; 0x6e00 <DIO_voidWRITEChannel+0x108>
    6d42:	8c 81       	ldd	r24, Y+4	; 0x04
    6d44:	9d 81       	ldd	r25, Y+5	; 0x05
    6d46:	83 30       	cpi	r24, 0x03	; 3
    6d48:	91 05       	cpc	r25, r1
    6d4a:	09 f4       	brne	.+2      	; 0x6d4e <DIO_voidWRITEChannel+0x56>
    6d4c:	85 c0       	rjmp	.+266    	; 0x6e58 <DIO_voidWRITEChannel+0x160>
    6d4e:	af c0       	rjmp	.+350    	; 0x6eae <DIO_voidWRITEChannel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    6d50:	8b 81       	ldd	r24, Y+3	; 0x03
    6d52:	81 30       	cpi	r24, 0x01	; 1
    6d54:	a1 f4       	brne	.+40     	; 0x6d7e <DIO_voidWRITEChannel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    6d56:	ab e3       	ldi	r26, 0x3B	; 59
    6d58:	b0 e0       	ldi	r27, 0x00	; 0
    6d5a:	eb e3       	ldi	r30, 0x3B	; 59
    6d5c:	f0 e0       	ldi	r31, 0x00	; 0
    6d5e:	80 81       	ld	r24, Z
    6d60:	48 2f       	mov	r20, r24
    6d62:	8a 81       	ldd	r24, Y+2	; 0x02
    6d64:	28 2f       	mov	r18, r24
    6d66:	30 e0       	ldi	r19, 0x00	; 0
    6d68:	81 e0       	ldi	r24, 0x01	; 1
    6d6a:	90 e0       	ldi	r25, 0x00	; 0
    6d6c:	02 2e       	mov	r0, r18
    6d6e:	02 c0       	rjmp	.+4      	; 0x6d74 <DIO_voidWRITEChannel+0x7c>
    6d70:	88 0f       	add	r24, r24
    6d72:	99 1f       	adc	r25, r25
    6d74:	0a 94       	dec	r0
    6d76:	e2 f7       	brpl	.-8      	; 0x6d70 <DIO_voidWRITEChannel+0x78>
    6d78:	84 2b       	or	r24, r20
    6d7a:	8c 93       	st	X, r24
    6d7c:	98 c0       	rjmp	.+304    	; 0x6eae <DIO_voidWRITEChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    6d7e:	ab e3       	ldi	r26, 0x3B	; 59
    6d80:	b0 e0       	ldi	r27, 0x00	; 0
    6d82:	eb e3       	ldi	r30, 0x3B	; 59
    6d84:	f0 e0       	ldi	r31, 0x00	; 0
    6d86:	80 81       	ld	r24, Z
    6d88:	48 2f       	mov	r20, r24
    6d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    6d8c:	28 2f       	mov	r18, r24
    6d8e:	30 e0       	ldi	r19, 0x00	; 0
    6d90:	81 e0       	ldi	r24, 0x01	; 1
    6d92:	90 e0       	ldi	r25, 0x00	; 0
    6d94:	02 2e       	mov	r0, r18
    6d96:	02 c0       	rjmp	.+4      	; 0x6d9c <DIO_voidWRITEChannel+0xa4>
    6d98:	88 0f       	add	r24, r24
    6d9a:	99 1f       	adc	r25, r25
    6d9c:	0a 94       	dec	r0
    6d9e:	e2 f7       	brpl	.-8      	; 0x6d98 <DIO_voidWRITEChannel+0xa0>
    6da0:	80 95       	com	r24
    6da2:	84 23       	and	r24, r20
    6da4:	8c 93       	st	X, r24
    6da6:	83 c0       	rjmp	.+262    	; 0x6eae <DIO_voidWRITEChannel+0x1b6>
		}
		break;
	case DIO_PORTB:
		if (level == DIO_HIGH)
    6da8:	8b 81       	ldd	r24, Y+3	; 0x03
    6daa:	81 30       	cpi	r24, 0x01	; 1
    6dac:	a1 f4       	brne	.+40     	; 0x6dd6 <DIO_voidWRITEChannel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    6dae:	a8 e3       	ldi	r26, 0x38	; 56
    6db0:	b0 e0       	ldi	r27, 0x00	; 0
    6db2:	e8 e3       	ldi	r30, 0x38	; 56
    6db4:	f0 e0       	ldi	r31, 0x00	; 0
    6db6:	80 81       	ld	r24, Z
    6db8:	48 2f       	mov	r20, r24
    6dba:	8a 81       	ldd	r24, Y+2	; 0x02
    6dbc:	28 2f       	mov	r18, r24
    6dbe:	30 e0       	ldi	r19, 0x00	; 0
    6dc0:	81 e0       	ldi	r24, 0x01	; 1
    6dc2:	90 e0       	ldi	r25, 0x00	; 0
    6dc4:	02 2e       	mov	r0, r18
    6dc6:	02 c0       	rjmp	.+4      	; 0x6dcc <DIO_voidWRITEChannel+0xd4>
    6dc8:	88 0f       	add	r24, r24
    6dca:	99 1f       	adc	r25, r25
    6dcc:	0a 94       	dec	r0
    6dce:	e2 f7       	brpl	.-8      	; 0x6dc8 <DIO_voidWRITEChannel+0xd0>
    6dd0:	84 2b       	or	r24, r20
    6dd2:	8c 93       	st	X, r24
    6dd4:	6c c0       	rjmp	.+216    	; 0x6eae <DIO_voidWRITEChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    6dd6:	a8 e3       	ldi	r26, 0x38	; 56
    6dd8:	b0 e0       	ldi	r27, 0x00	; 0
    6dda:	e8 e3       	ldi	r30, 0x38	; 56
    6ddc:	f0 e0       	ldi	r31, 0x00	; 0
    6dde:	80 81       	ld	r24, Z
    6de0:	48 2f       	mov	r20, r24
    6de2:	8a 81       	ldd	r24, Y+2	; 0x02
    6de4:	28 2f       	mov	r18, r24
    6de6:	30 e0       	ldi	r19, 0x00	; 0
    6de8:	81 e0       	ldi	r24, 0x01	; 1
    6dea:	90 e0       	ldi	r25, 0x00	; 0
    6dec:	02 2e       	mov	r0, r18
    6dee:	02 c0       	rjmp	.+4      	; 0x6df4 <DIO_voidWRITEChannel+0xfc>
    6df0:	88 0f       	add	r24, r24
    6df2:	99 1f       	adc	r25, r25
    6df4:	0a 94       	dec	r0
    6df6:	e2 f7       	brpl	.-8      	; 0x6df0 <DIO_voidWRITEChannel+0xf8>
    6df8:	80 95       	com	r24
    6dfa:	84 23       	and	r24, r20
    6dfc:	8c 93       	st	X, r24
    6dfe:	57 c0       	rjmp	.+174    	; 0x6eae <DIO_voidWRITEChannel+0x1b6>
		}
		break;
	case DIO_PORTC:
		if (level == DIO_HIGH)
    6e00:	8b 81       	ldd	r24, Y+3	; 0x03
    6e02:	81 30       	cpi	r24, 0x01	; 1
    6e04:	a1 f4       	brne	.+40     	; 0x6e2e <DIO_voidWRITEChannel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    6e06:	a5 e3       	ldi	r26, 0x35	; 53
    6e08:	b0 e0       	ldi	r27, 0x00	; 0
    6e0a:	e5 e3       	ldi	r30, 0x35	; 53
    6e0c:	f0 e0       	ldi	r31, 0x00	; 0
    6e0e:	80 81       	ld	r24, Z
    6e10:	48 2f       	mov	r20, r24
    6e12:	8a 81       	ldd	r24, Y+2	; 0x02
    6e14:	28 2f       	mov	r18, r24
    6e16:	30 e0       	ldi	r19, 0x00	; 0
    6e18:	81 e0       	ldi	r24, 0x01	; 1
    6e1a:	90 e0       	ldi	r25, 0x00	; 0
    6e1c:	02 2e       	mov	r0, r18
    6e1e:	02 c0       	rjmp	.+4      	; 0x6e24 <DIO_voidWRITEChannel+0x12c>
    6e20:	88 0f       	add	r24, r24
    6e22:	99 1f       	adc	r25, r25
    6e24:	0a 94       	dec	r0
    6e26:	e2 f7       	brpl	.-8      	; 0x6e20 <DIO_voidWRITEChannel+0x128>
    6e28:	84 2b       	or	r24, r20
    6e2a:	8c 93       	st	X, r24
    6e2c:	40 c0       	rjmp	.+128    	; 0x6eae <DIO_voidWRITEChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    6e2e:	a5 e3       	ldi	r26, 0x35	; 53
    6e30:	b0 e0       	ldi	r27, 0x00	; 0
    6e32:	e5 e3       	ldi	r30, 0x35	; 53
    6e34:	f0 e0       	ldi	r31, 0x00	; 0
    6e36:	80 81       	ld	r24, Z
    6e38:	48 2f       	mov	r20, r24
    6e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    6e3c:	28 2f       	mov	r18, r24
    6e3e:	30 e0       	ldi	r19, 0x00	; 0
    6e40:	81 e0       	ldi	r24, 0x01	; 1
    6e42:	90 e0       	ldi	r25, 0x00	; 0
    6e44:	02 2e       	mov	r0, r18
    6e46:	02 c0       	rjmp	.+4      	; 0x6e4c <DIO_voidWRITEChannel+0x154>
    6e48:	88 0f       	add	r24, r24
    6e4a:	99 1f       	adc	r25, r25
    6e4c:	0a 94       	dec	r0
    6e4e:	e2 f7       	brpl	.-8      	; 0x6e48 <DIO_voidWRITEChannel+0x150>
    6e50:	80 95       	com	r24
    6e52:	84 23       	and	r24, r20
    6e54:	8c 93       	st	X, r24
    6e56:	2b c0       	rjmp	.+86     	; 0x6eae <DIO_voidWRITEChannel+0x1b6>
		}
		break;
	case DIO_PORTD:
		if (level == DIO_HIGH)
    6e58:	8b 81       	ldd	r24, Y+3	; 0x03
    6e5a:	81 30       	cpi	r24, 0x01	; 1
    6e5c:	a1 f4       	brne	.+40     	; 0x6e86 <DIO_voidWRITEChannel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    6e5e:	a2 e3       	ldi	r26, 0x32	; 50
    6e60:	b0 e0       	ldi	r27, 0x00	; 0
    6e62:	e2 e3       	ldi	r30, 0x32	; 50
    6e64:	f0 e0       	ldi	r31, 0x00	; 0
    6e66:	80 81       	ld	r24, Z
    6e68:	48 2f       	mov	r20, r24
    6e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    6e6c:	28 2f       	mov	r18, r24
    6e6e:	30 e0       	ldi	r19, 0x00	; 0
    6e70:	81 e0       	ldi	r24, 0x01	; 1
    6e72:	90 e0       	ldi	r25, 0x00	; 0
    6e74:	02 2e       	mov	r0, r18
    6e76:	02 c0       	rjmp	.+4      	; 0x6e7c <DIO_voidWRITEChannel+0x184>
    6e78:	88 0f       	add	r24, r24
    6e7a:	99 1f       	adc	r25, r25
    6e7c:	0a 94       	dec	r0
    6e7e:	e2 f7       	brpl	.-8      	; 0x6e78 <DIO_voidWRITEChannel+0x180>
    6e80:	84 2b       	or	r24, r20
    6e82:	8c 93       	st	X, r24
    6e84:	14 c0       	rjmp	.+40     	; 0x6eae <DIO_voidWRITEChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    6e86:	a2 e3       	ldi	r26, 0x32	; 50
    6e88:	b0 e0       	ldi	r27, 0x00	; 0
    6e8a:	e2 e3       	ldi	r30, 0x32	; 50
    6e8c:	f0 e0       	ldi	r31, 0x00	; 0
    6e8e:	80 81       	ld	r24, Z
    6e90:	48 2f       	mov	r20, r24
    6e92:	8a 81       	ldd	r24, Y+2	; 0x02
    6e94:	28 2f       	mov	r18, r24
    6e96:	30 e0       	ldi	r19, 0x00	; 0
    6e98:	81 e0       	ldi	r24, 0x01	; 1
    6e9a:	90 e0       	ldi	r25, 0x00	; 0
    6e9c:	02 2e       	mov	r0, r18
    6e9e:	02 c0       	rjmp	.+4      	; 0x6ea4 <DIO_voidWRITEChannel+0x1ac>
    6ea0:	88 0f       	add	r24, r24
    6ea2:	99 1f       	adc	r25, r25
    6ea4:	0a 94       	dec	r0
    6ea6:	e2 f7       	brpl	.-8      	; 0x6ea0 <DIO_voidWRITEChannel+0x1a8>
    6ea8:	80 95       	com	r24
    6eaa:	84 23       	and	r24, r20
    6eac:	8c 93       	st	X, r24
		}
		break;
	}
}
    6eae:	0f 90       	pop	r0
    6eb0:	0f 90       	pop	r0
    6eb2:	0f 90       	pop	r0
    6eb4:	0f 90       	pop	r0
    6eb6:	0f 90       	pop	r0
    6eb8:	cf 91       	pop	r28
    6eba:	df 91       	pop	r29
    6ebc:	08 95       	ret

00006ebe <DIO_voidREADChannel>:
DIO_LEVEL_T DIO_voidREADChannel(DIO_PORT_T port,DIO_PIN_T pin)
{
    6ebe:	df 93       	push	r29
    6ec0:	cf 93       	push	r28
    6ec2:	00 d0       	rcall	.+0      	; 0x6ec4 <DIO_voidREADChannel+0x6>
    6ec4:	00 d0       	rcall	.+0      	; 0x6ec6 <DIO_voidREADChannel+0x8>
    6ec6:	0f 92       	push	r0
    6ec8:	cd b7       	in	r28, 0x3d	; 61
    6eca:	de b7       	in	r29, 0x3e	; 62
    6ecc:	8a 83       	std	Y+2, r24	; 0x02
    6ece:	6b 83       	std	Y+3, r22	; 0x03
	DIO_LEVEL_T localstatus;
	switch(port)
    6ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ed2:	28 2f       	mov	r18, r24
    6ed4:	30 e0       	ldi	r19, 0x00	; 0
    6ed6:	3d 83       	std	Y+5, r19	; 0x05
    6ed8:	2c 83       	std	Y+4, r18	; 0x04
    6eda:	4c 81       	ldd	r20, Y+4	; 0x04
    6edc:	5d 81       	ldd	r21, Y+5	; 0x05
    6ede:	41 30       	cpi	r20, 0x01	; 1
    6ee0:	51 05       	cpc	r21, r1
    6ee2:	41 f1       	breq	.+80     	; 0x6f34 <DIO_voidREADChannel+0x76>
    6ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    6ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    6ee8:	82 30       	cpi	r24, 0x02	; 2
    6eea:	91 05       	cpc	r25, r1
    6eec:	34 f4       	brge	.+12     	; 0x6efa <DIO_voidREADChannel+0x3c>
    6eee:	2c 81       	ldd	r18, Y+4	; 0x04
    6ef0:	3d 81       	ldd	r19, Y+5	; 0x05
    6ef2:	21 15       	cp	r18, r1
    6ef4:	31 05       	cpc	r19, r1
    6ef6:	61 f0       	breq	.+24     	; 0x6f10 <DIO_voidREADChannel+0x52>
    6ef8:	52 c0       	rjmp	.+164    	; 0x6f9e <DIO_voidREADChannel+0xe0>
    6efa:	4c 81       	ldd	r20, Y+4	; 0x04
    6efc:	5d 81       	ldd	r21, Y+5	; 0x05
    6efe:	42 30       	cpi	r20, 0x02	; 2
    6f00:	51 05       	cpc	r21, r1
    6f02:	51 f1       	breq	.+84     	; 0x6f58 <DIO_voidREADChannel+0x9a>
    6f04:	8c 81       	ldd	r24, Y+4	; 0x04
    6f06:	9d 81       	ldd	r25, Y+5	; 0x05
    6f08:	83 30       	cpi	r24, 0x03	; 3
    6f0a:	91 05       	cpc	r25, r1
    6f0c:	b9 f1       	breq	.+110    	; 0x6f7c <DIO_voidREADChannel+0xbe>
    6f0e:	47 c0       	rjmp	.+142    	; 0x6f9e <DIO_voidREADChannel+0xe0>
	{
	case DIO_PORTA:
		localstatus = CHECK_BIT(DIO_PINA_REG, pin);
    6f10:	e9 e3       	ldi	r30, 0x39	; 57
    6f12:	f0 e0       	ldi	r31, 0x00	; 0
    6f14:	80 81       	ld	r24, Z
    6f16:	28 2f       	mov	r18, r24
    6f18:	30 e0       	ldi	r19, 0x00	; 0
    6f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    6f1c:	88 2f       	mov	r24, r24
    6f1e:	90 e0       	ldi	r25, 0x00	; 0
    6f20:	a9 01       	movw	r20, r18
    6f22:	02 c0       	rjmp	.+4      	; 0x6f28 <DIO_voidREADChannel+0x6a>
    6f24:	55 95       	asr	r21
    6f26:	47 95       	ror	r20
    6f28:	8a 95       	dec	r24
    6f2a:	e2 f7       	brpl	.-8      	; 0x6f24 <DIO_voidREADChannel+0x66>
    6f2c:	ca 01       	movw	r24, r20
    6f2e:	81 70       	andi	r24, 0x01	; 1
    6f30:	89 83       	std	Y+1, r24	; 0x01
    6f32:	35 c0       	rjmp	.+106    	; 0x6f9e <DIO_voidREADChannel+0xe0>
		break;
	case DIO_PORTB:

		localstatus= CHECK_BIT(DIO_PINB_REG, pin);
    6f34:	e6 e3       	ldi	r30, 0x36	; 54
    6f36:	f0 e0       	ldi	r31, 0x00	; 0
    6f38:	80 81       	ld	r24, Z
    6f3a:	28 2f       	mov	r18, r24
    6f3c:	30 e0       	ldi	r19, 0x00	; 0
    6f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    6f40:	88 2f       	mov	r24, r24
    6f42:	90 e0       	ldi	r25, 0x00	; 0
    6f44:	a9 01       	movw	r20, r18
    6f46:	02 c0       	rjmp	.+4      	; 0x6f4c <DIO_voidREADChannel+0x8e>
    6f48:	55 95       	asr	r21
    6f4a:	47 95       	ror	r20
    6f4c:	8a 95       	dec	r24
    6f4e:	e2 f7       	brpl	.-8      	; 0x6f48 <DIO_voidREADChannel+0x8a>
    6f50:	ca 01       	movw	r24, r20
    6f52:	81 70       	andi	r24, 0x01	; 1
    6f54:	89 83       	std	Y+1, r24	; 0x01
    6f56:	23 c0       	rjmp	.+70     	; 0x6f9e <DIO_voidREADChannel+0xe0>
		break;
	case DIO_PORTC:

		localstatus = CHECK_BIT(DIO_PINC_REG, pin);
    6f58:	e3 e3       	ldi	r30, 0x33	; 51
    6f5a:	f0 e0       	ldi	r31, 0x00	; 0
    6f5c:	80 81       	ld	r24, Z
    6f5e:	28 2f       	mov	r18, r24
    6f60:	30 e0       	ldi	r19, 0x00	; 0
    6f62:	8b 81       	ldd	r24, Y+3	; 0x03
    6f64:	88 2f       	mov	r24, r24
    6f66:	90 e0       	ldi	r25, 0x00	; 0
    6f68:	a9 01       	movw	r20, r18
    6f6a:	02 c0       	rjmp	.+4      	; 0x6f70 <DIO_voidREADChannel+0xb2>
    6f6c:	55 95       	asr	r21
    6f6e:	47 95       	ror	r20
    6f70:	8a 95       	dec	r24
    6f72:	e2 f7       	brpl	.-8      	; 0x6f6c <DIO_voidREADChannel+0xae>
    6f74:	ca 01       	movw	r24, r20
    6f76:	81 70       	andi	r24, 0x01	; 1
    6f78:	89 83       	std	Y+1, r24	; 0x01
    6f7a:	11 c0       	rjmp	.+34     	; 0x6f9e <DIO_voidREADChannel+0xe0>

		break;
	case DIO_PORTD:

		localstatus = CHECK_BIT(DIO_PIND_REG, pin);
    6f7c:	e0 e3       	ldi	r30, 0x30	; 48
    6f7e:	f0 e0       	ldi	r31, 0x00	; 0
    6f80:	80 81       	ld	r24, Z
    6f82:	28 2f       	mov	r18, r24
    6f84:	30 e0       	ldi	r19, 0x00	; 0
    6f86:	8b 81       	ldd	r24, Y+3	; 0x03
    6f88:	88 2f       	mov	r24, r24
    6f8a:	90 e0       	ldi	r25, 0x00	; 0
    6f8c:	a9 01       	movw	r20, r18
    6f8e:	02 c0       	rjmp	.+4      	; 0x6f94 <DIO_voidREADChannel+0xd6>
    6f90:	55 95       	asr	r21
    6f92:	47 95       	ror	r20
    6f94:	8a 95       	dec	r24
    6f96:	e2 f7       	brpl	.-8      	; 0x6f90 <DIO_voidREADChannel+0xd2>
    6f98:	ca 01       	movw	r24, r20
    6f9a:	81 70       	andi	r24, 0x01	; 1
    6f9c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return localstatus;
    6f9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    6fa0:	0f 90       	pop	r0
    6fa2:	0f 90       	pop	r0
    6fa4:	0f 90       	pop	r0
    6fa6:	0f 90       	pop	r0
    6fa8:	0f 90       	pop	r0
    6faa:	cf 91       	pop	r28
    6fac:	df 91       	pop	r29
    6fae:	08 95       	ret

00006fb0 <DIO_voidWRITEChannelGroup>:
void DIO_voidWRITEChannelGroup(DIO_PORT_T port,u8 data, u8 mask)
{
    6fb0:	df 93       	push	r29
    6fb2:	cf 93       	push	r28
    6fb4:	00 d0       	rcall	.+0      	; 0x6fb6 <DIO_voidWRITEChannelGroup+0x6>
    6fb6:	00 d0       	rcall	.+0      	; 0x6fb8 <DIO_voidWRITEChannelGroup+0x8>
    6fb8:	0f 92       	push	r0
    6fba:	cd b7       	in	r28, 0x3d	; 61
    6fbc:	de b7       	in	r29, 0x3e	; 62
    6fbe:	89 83       	std	Y+1, r24	; 0x01
    6fc0:	6a 83       	std	Y+2, r22	; 0x02
    6fc2:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    6fc4:	89 81       	ldd	r24, Y+1	; 0x01
    6fc6:	28 2f       	mov	r18, r24
    6fc8:	30 e0       	ldi	r19, 0x00	; 0
    6fca:	3d 83       	std	Y+5, r19	; 0x05
    6fcc:	2c 83       	std	Y+4, r18	; 0x04
    6fce:	8c 81       	ldd	r24, Y+4	; 0x04
    6fd0:	9d 81       	ldd	r25, Y+5	; 0x05
    6fd2:	81 30       	cpi	r24, 0x01	; 1
    6fd4:	91 05       	cpc	r25, r1
    6fd6:	01 f1       	breq	.+64     	; 0x7018 <DIO_voidWRITEChannelGroup+0x68>
    6fd8:	2c 81       	ldd	r18, Y+4	; 0x04
    6fda:	3d 81       	ldd	r19, Y+5	; 0x05
    6fdc:	22 30       	cpi	r18, 0x02	; 2
    6fde:	31 05       	cpc	r19, r1
    6fe0:	2c f4       	brge	.+10     	; 0x6fec <DIO_voidWRITEChannelGroup+0x3c>
    6fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    6fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    6fe6:	00 97       	sbiw	r24, 0x00	; 0
    6fe8:	61 f0       	breq	.+24     	; 0x7002 <DIO_voidWRITEChannelGroup+0x52>
    6fea:	36 c0       	rjmp	.+108    	; 0x7058 <DIO_voidWRITEChannelGroup+0xa8>
    6fec:	2c 81       	ldd	r18, Y+4	; 0x04
    6fee:	3d 81       	ldd	r19, Y+5	; 0x05
    6ff0:	22 30       	cpi	r18, 0x02	; 2
    6ff2:	31 05       	cpc	r19, r1
    6ff4:	e1 f0       	breq	.+56     	; 0x702e <DIO_voidWRITEChannelGroup+0x7e>
    6ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    6ff8:	9d 81       	ldd	r25, Y+5	; 0x05
    6ffa:	83 30       	cpi	r24, 0x03	; 3
    6ffc:	91 05       	cpc	r25, r1
    6ffe:	11 f1       	breq	.+68     	; 0x7044 <DIO_voidWRITEChannelGroup+0x94>
    7000:	2b c0       	rjmp	.+86     	; 0x7058 <DIO_voidWRITEChannelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data); //0000 0101 -> 0101 0000
    7002:	ab e3       	ldi	r26, 0x3B	; 59
    7004:	b0 e0       	ldi	r27, 0x00	; 0
    7006:	eb e3       	ldi	r30, 0x3B	; 59
    7008:	f0 e0       	ldi	r31, 0x00	; 0
    700a:	90 81       	ld	r25, Z
    700c:	8b 81       	ldd	r24, Y+3	; 0x03
    700e:	98 23       	and	r25, r24
    7010:	8a 81       	ldd	r24, Y+2	; 0x02
    7012:	89 2b       	or	r24, r25
    7014:	8c 93       	st	X, r24
    7016:	20 c0       	rjmp	.+64     	; 0x7058 <DIO_voidWRITEChannelGroup+0xa8>
		break;
		// we must shift 5, 4 places or we will write 0000 0101 on the 8 pins
		// after shift 5 will be 0101 and will be written on the first 4 pins
		// 0101 0000
	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    7018:	a8 e3       	ldi	r26, 0x38	; 56
    701a:	b0 e0       	ldi	r27, 0x00	; 0
    701c:	e8 e3       	ldi	r30, 0x38	; 56
    701e:	f0 e0       	ldi	r31, 0x00	; 0
    7020:	90 81       	ld	r25, Z
    7022:	8b 81       	ldd	r24, Y+3	; 0x03
    7024:	98 23       	and	r25, r24
    7026:	8a 81       	ldd	r24, Y+2	; 0x02
    7028:	89 2b       	or	r24, r25
    702a:	8c 93       	st	X, r24
    702c:	15 c0       	rjmp	.+42     	; 0x7058 <DIO_voidWRITEChannelGroup+0xa8>
		break;
	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    702e:	a5 e3       	ldi	r26, 0x35	; 53
    7030:	b0 e0       	ldi	r27, 0x00	; 0
    7032:	e5 e3       	ldi	r30, 0x35	; 53
    7034:	f0 e0       	ldi	r31, 0x00	; 0
    7036:	90 81       	ld	r25, Z
    7038:	8b 81       	ldd	r24, Y+3	; 0x03
    703a:	98 23       	and	r25, r24
    703c:	8a 81       	ldd	r24, Y+2	; 0x02
    703e:	89 2b       	or	r24, r25
    7040:	8c 93       	st	X, r24
    7042:	0a c0       	rjmp	.+20     	; 0x7058 <DIO_voidWRITEChannelGroup+0xa8>
		break;
	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    7044:	a2 e3       	ldi	r26, 0x32	; 50
    7046:	b0 e0       	ldi	r27, 0x00	; 0
    7048:	e2 e3       	ldi	r30, 0x32	; 50
    704a:	f0 e0       	ldi	r31, 0x00	; 0
    704c:	90 81       	ld	r25, Z
    704e:	8b 81       	ldd	r24, Y+3	; 0x03
    7050:	98 23       	and	r25, r24
    7052:	8a 81       	ldd	r24, Y+2	; 0x02
    7054:	89 2b       	or	r24, r25
    7056:	8c 93       	st	X, r24
		break;
	}

}
    7058:	0f 90       	pop	r0
    705a:	0f 90       	pop	r0
    705c:	0f 90       	pop	r0
    705e:	0f 90       	pop	r0
    7060:	0f 90       	pop	r0
    7062:	cf 91       	pop	r28
    7064:	df 91       	pop	r29
    7066:	08 95       	ret

00007068 <DIO_voidPULLUpEnable>:
void DIO_voidPULLUpEnable(DIO_PORT_T port,DIO_PIN_T pin)
{
    7068:	df 93       	push	r29
    706a:	cf 93       	push	r28
    706c:	00 d0       	rcall	.+0      	; 0x706e <DIO_voidPULLUpEnable+0x6>
    706e:	00 d0       	rcall	.+0      	; 0x7070 <DIO_voidPULLUpEnable+0x8>
    7070:	cd b7       	in	r28, 0x3d	; 61
    7072:	de b7       	in	r29, 0x3e	; 62
    7074:	89 83       	std	Y+1, r24	; 0x01
    7076:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    7078:	89 81       	ldd	r24, Y+1	; 0x01
    707a:	28 2f       	mov	r18, r24
    707c:	30 e0       	ldi	r19, 0x00	; 0
    707e:	3c 83       	std	Y+4, r19	; 0x04
    7080:	2b 83       	std	Y+3, r18	; 0x03
    7082:	8b 81       	ldd	r24, Y+3	; 0x03
    7084:	9c 81       	ldd	r25, Y+4	; 0x04
    7086:	81 30       	cpi	r24, 0x01	; 1
    7088:	91 05       	cpc	r25, r1
    708a:	49 f1       	breq	.+82     	; 0x70de <DIO_voidPULLUpEnable+0x76>
    708c:	2b 81       	ldd	r18, Y+3	; 0x03
    708e:	3c 81       	ldd	r19, Y+4	; 0x04
    7090:	22 30       	cpi	r18, 0x02	; 2
    7092:	31 05       	cpc	r19, r1
    7094:	2c f4       	brge	.+10     	; 0x70a0 <DIO_voidPULLUpEnable+0x38>
    7096:	8b 81       	ldd	r24, Y+3	; 0x03
    7098:	9c 81       	ldd	r25, Y+4	; 0x04
    709a:	00 97       	sbiw	r24, 0x00	; 0
    709c:	61 f0       	breq	.+24     	; 0x70b6 <DIO_voidPULLUpEnable+0x4e>
    709e:	5a c0       	rjmp	.+180    	; 0x7154 <DIO_voidPULLUpEnable+0xec>
    70a0:	2b 81       	ldd	r18, Y+3	; 0x03
    70a2:	3c 81       	ldd	r19, Y+4	; 0x04
    70a4:	22 30       	cpi	r18, 0x02	; 2
    70a6:	31 05       	cpc	r19, r1
    70a8:	71 f1       	breq	.+92     	; 0x7106 <DIO_voidPULLUpEnable+0x9e>
    70aa:	8b 81       	ldd	r24, Y+3	; 0x03
    70ac:	9c 81       	ldd	r25, Y+4	; 0x04
    70ae:	83 30       	cpi	r24, 0x03	; 3
    70b0:	91 05       	cpc	r25, r1
    70b2:	e9 f1       	breq	.+122    	; 0x712e <DIO_voidPULLUpEnable+0xc6>
    70b4:	4f c0       	rjmp	.+158    	; 0x7154 <DIO_voidPULLUpEnable+0xec>
	{
	case DIO_PORTA:
		SET_BIT(DIO_PORTA_REG,pin);
    70b6:	ab e3       	ldi	r26, 0x3B	; 59
    70b8:	b0 e0       	ldi	r27, 0x00	; 0
    70ba:	eb e3       	ldi	r30, 0x3B	; 59
    70bc:	f0 e0       	ldi	r31, 0x00	; 0
    70be:	80 81       	ld	r24, Z
    70c0:	48 2f       	mov	r20, r24
    70c2:	8a 81       	ldd	r24, Y+2	; 0x02
    70c4:	28 2f       	mov	r18, r24
    70c6:	30 e0       	ldi	r19, 0x00	; 0
    70c8:	81 e0       	ldi	r24, 0x01	; 1
    70ca:	90 e0       	ldi	r25, 0x00	; 0
    70cc:	02 2e       	mov	r0, r18
    70ce:	02 c0       	rjmp	.+4      	; 0x70d4 <DIO_voidPULLUpEnable+0x6c>
    70d0:	88 0f       	add	r24, r24
    70d2:	99 1f       	adc	r25, r25
    70d4:	0a 94       	dec	r0
    70d6:	e2 f7       	brpl	.-8      	; 0x70d0 <DIO_voidPULLUpEnable+0x68>
    70d8:	84 2b       	or	r24, r20
    70da:	8c 93       	st	X, r24
    70dc:	3b c0       	rjmp	.+118    	; 0x7154 <DIO_voidPULLUpEnable+0xec>
		break;
	case DIO_PORTB:
		SET_BIT(DIO_PORTB_REG,pin);
    70de:	a8 e3       	ldi	r26, 0x38	; 56
    70e0:	b0 e0       	ldi	r27, 0x00	; 0
    70e2:	e8 e3       	ldi	r30, 0x38	; 56
    70e4:	f0 e0       	ldi	r31, 0x00	; 0
    70e6:	80 81       	ld	r24, Z
    70e8:	48 2f       	mov	r20, r24
    70ea:	8a 81       	ldd	r24, Y+2	; 0x02
    70ec:	28 2f       	mov	r18, r24
    70ee:	30 e0       	ldi	r19, 0x00	; 0
    70f0:	81 e0       	ldi	r24, 0x01	; 1
    70f2:	90 e0       	ldi	r25, 0x00	; 0
    70f4:	02 2e       	mov	r0, r18
    70f6:	02 c0       	rjmp	.+4      	; 0x70fc <DIO_voidPULLUpEnable+0x94>
    70f8:	88 0f       	add	r24, r24
    70fa:	99 1f       	adc	r25, r25
    70fc:	0a 94       	dec	r0
    70fe:	e2 f7       	brpl	.-8      	; 0x70f8 <DIO_voidPULLUpEnable+0x90>
    7100:	84 2b       	or	r24, r20
    7102:	8c 93       	st	X, r24
    7104:	27 c0       	rjmp	.+78     	; 0x7154 <DIO_voidPULLUpEnable+0xec>
		break;
	case DIO_PORTC:
		SET_BIT(DIO_PORTC_REG,pin);
    7106:	a5 e3       	ldi	r26, 0x35	; 53
    7108:	b0 e0       	ldi	r27, 0x00	; 0
    710a:	e5 e3       	ldi	r30, 0x35	; 53
    710c:	f0 e0       	ldi	r31, 0x00	; 0
    710e:	80 81       	ld	r24, Z
    7110:	48 2f       	mov	r20, r24
    7112:	8a 81       	ldd	r24, Y+2	; 0x02
    7114:	28 2f       	mov	r18, r24
    7116:	30 e0       	ldi	r19, 0x00	; 0
    7118:	81 e0       	ldi	r24, 0x01	; 1
    711a:	90 e0       	ldi	r25, 0x00	; 0
    711c:	02 2e       	mov	r0, r18
    711e:	02 c0       	rjmp	.+4      	; 0x7124 <DIO_voidPULLUpEnable+0xbc>
    7120:	88 0f       	add	r24, r24
    7122:	99 1f       	adc	r25, r25
    7124:	0a 94       	dec	r0
    7126:	e2 f7       	brpl	.-8      	; 0x7120 <DIO_voidPULLUpEnable+0xb8>
    7128:	84 2b       	or	r24, r20
    712a:	8c 93       	st	X, r24
    712c:	13 c0       	rjmp	.+38     	; 0x7154 <DIO_voidPULLUpEnable+0xec>
		break;
	case DIO_PORTD:
		SET_BIT(DIO_PORTD_REG,pin);
    712e:	a2 e3       	ldi	r26, 0x32	; 50
    7130:	b0 e0       	ldi	r27, 0x00	; 0
    7132:	e2 e3       	ldi	r30, 0x32	; 50
    7134:	f0 e0       	ldi	r31, 0x00	; 0
    7136:	80 81       	ld	r24, Z
    7138:	48 2f       	mov	r20, r24
    713a:	8a 81       	ldd	r24, Y+2	; 0x02
    713c:	28 2f       	mov	r18, r24
    713e:	30 e0       	ldi	r19, 0x00	; 0
    7140:	81 e0       	ldi	r24, 0x01	; 1
    7142:	90 e0       	ldi	r25, 0x00	; 0
    7144:	02 2e       	mov	r0, r18
    7146:	02 c0       	rjmp	.+4      	; 0x714c <DIO_voidPULLUpEnable+0xe4>
    7148:	88 0f       	add	r24, r24
    714a:	99 1f       	adc	r25, r25
    714c:	0a 94       	dec	r0
    714e:	e2 f7       	brpl	.-8      	; 0x7148 <DIO_voidPULLUpEnable+0xe0>
    7150:	84 2b       	or	r24, r20
    7152:	8c 93       	st	X, r24
		break;
	}
}
    7154:	0f 90       	pop	r0
    7156:	0f 90       	pop	r0
    7158:	0f 90       	pop	r0
    715a:	0f 90       	pop	r0
    715c:	cf 91       	pop	r28
    715e:	df 91       	pop	r29
    7160:	08 95       	ret

00007162 <DIO_voidFlipChannel>:
void DIO_voidFlipChannel(DIO_PORT_T port,DIO_PIN_T pin)
{
    7162:	df 93       	push	r29
    7164:	cf 93       	push	r28
    7166:	00 d0       	rcall	.+0      	; 0x7168 <DIO_voidFlipChannel+0x6>
    7168:	00 d0       	rcall	.+0      	; 0x716a <DIO_voidFlipChannel+0x8>
    716a:	cd b7       	in	r28, 0x3d	; 61
    716c:	de b7       	in	r29, 0x3e	; 62
    716e:	89 83       	std	Y+1, r24	; 0x01
    7170:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    7172:	89 81       	ldd	r24, Y+1	; 0x01
    7174:	28 2f       	mov	r18, r24
    7176:	30 e0       	ldi	r19, 0x00	; 0
    7178:	3c 83       	std	Y+4, r19	; 0x04
    717a:	2b 83       	std	Y+3, r18	; 0x03
    717c:	8b 81       	ldd	r24, Y+3	; 0x03
    717e:	9c 81       	ldd	r25, Y+4	; 0x04
    7180:	81 30       	cpi	r24, 0x01	; 1
    7182:	91 05       	cpc	r25, r1
    7184:	49 f1       	breq	.+82     	; 0x71d8 <DIO_voidFlipChannel+0x76>
    7186:	2b 81       	ldd	r18, Y+3	; 0x03
    7188:	3c 81       	ldd	r19, Y+4	; 0x04
    718a:	22 30       	cpi	r18, 0x02	; 2
    718c:	31 05       	cpc	r19, r1
    718e:	2c f4       	brge	.+10     	; 0x719a <DIO_voidFlipChannel+0x38>
    7190:	8b 81       	ldd	r24, Y+3	; 0x03
    7192:	9c 81       	ldd	r25, Y+4	; 0x04
    7194:	00 97       	sbiw	r24, 0x00	; 0
    7196:	61 f0       	breq	.+24     	; 0x71b0 <DIO_voidFlipChannel+0x4e>
    7198:	5a c0       	rjmp	.+180    	; 0x724e <DIO_voidFlipChannel+0xec>
    719a:	2b 81       	ldd	r18, Y+3	; 0x03
    719c:	3c 81       	ldd	r19, Y+4	; 0x04
    719e:	22 30       	cpi	r18, 0x02	; 2
    71a0:	31 05       	cpc	r19, r1
    71a2:	71 f1       	breq	.+92     	; 0x7200 <DIO_voidFlipChannel+0x9e>
    71a4:	8b 81       	ldd	r24, Y+3	; 0x03
    71a6:	9c 81       	ldd	r25, Y+4	; 0x04
    71a8:	83 30       	cpi	r24, 0x03	; 3
    71aa:	91 05       	cpc	r25, r1
    71ac:	e9 f1       	breq	.+122    	; 0x7228 <DIO_voidFlipChannel+0xc6>
    71ae:	4f c0       	rjmp	.+158    	; 0x724e <DIO_voidFlipChannel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    71b0:	ab e3       	ldi	r26, 0x3B	; 59
    71b2:	b0 e0       	ldi	r27, 0x00	; 0
    71b4:	eb e3       	ldi	r30, 0x3B	; 59
    71b6:	f0 e0       	ldi	r31, 0x00	; 0
    71b8:	80 81       	ld	r24, Z
    71ba:	48 2f       	mov	r20, r24
    71bc:	8a 81       	ldd	r24, Y+2	; 0x02
    71be:	28 2f       	mov	r18, r24
    71c0:	30 e0       	ldi	r19, 0x00	; 0
    71c2:	81 e0       	ldi	r24, 0x01	; 1
    71c4:	90 e0       	ldi	r25, 0x00	; 0
    71c6:	02 2e       	mov	r0, r18
    71c8:	02 c0       	rjmp	.+4      	; 0x71ce <DIO_voidFlipChannel+0x6c>
    71ca:	88 0f       	add	r24, r24
    71cc:	99 1f       	adc	r25, r25
    71ce:	0a 94       	dec	r0
    71d0:	e2 f7       	brpl	.-8      	; 0x71ca <DIO_voidFlipChannel+0x68>
    71d2:	84 27       	eor	r24, r20
    71d4:	8c 93       	st	X, r24
    71d6:	3b c0       	rjmp	.+118    	; 0x724e <DIO_voidFlipChannel+0xec>
		break;
	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    71d8:	a8 e3       	ldi	r26, 0x38	; 56
    71da:	b0 e0       	ldi	r27, 0x00	; 0
    71dc:	e8 e3       	ldi	r30, 0x38	; 56
    71de:	f0 e0       	ldi	r31, 0x00	; 0
    71e0:	80 81       	ld	r24, Z
    71e2:	48 2f       	mov	r20, r24
    71e4:	8a 81       	ldd	r24, Y+2	; 0x02
    71e6:	28 2f       	mov	r18, r24
    71e8:	30 e0       	ldi	r19, 0x00	; 0
    71ea:	81 e0       	ldi	r24, 0x01	; 1
    71ec:	90 e0       	ldi	r25, 0x00	; 0
    71ee:	02 2e       	mov	r0, r18
    71f0:	02 c0       	rjmp	.+4      	; 0x71f6 <DIO_voidFlipChannel+0x94>
    71f2:	88 0f       	add	r24, r24
    71f4:	99 1f       	adc	r25, r25
    71f6:	0a 94       	dec	r0
    71f8:	e2 f7       	brpl	.-8      	; 0x71f2 <DIO_voidFlipChannel+0x90>
    71fa:	84 27       	eor	r24, r20
    71fc:	8c 93       	st	X, r24
    71fe:	27 c0       	rjmp	.+78     	; 0x724e <DIO_voidFlipChannel+0xec>
		break;
	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    7200:	a5 e3       	ldi	r26, 0x35	; 53
    7202:	b0 e0       	ldi	r27, 0x00	; 0
    7204:	e5 e3       	ldi	r30, 0x35	; 53
    7206:	f0 e0       	ldi	r31, 0x00	; 0
    7208:	80 81       	ld	r24, Z
    720a:	48 2f       	mov	r20, r24
    720c:	8a 81       	ldd	r24, Y+2	; 0x02
    720e:	28 2f       	mov	r18, r24
    7210:	30 e0       	ldi	r19, 0x00	; 0
    7212:	81 e0       	ldi	r24, 0x01	; 1
    7214:	90 e0       	ldi	r25, 0x00	; 0
    7216:	02 2e       	mov	r0, r18
    7218:	02 c0       	rjmp	.+4      	; 0x721e <DIO_voidFlipChannel+0xbc>
    721a:	88 0f       	add	r24, r24
    721c:	99 1f       	adc	r25, r25
    721e:	0a 94       	dec	r0
    7220:	e2 f7       	brpl	.-8      	; 0x721a <DIO_voidFlipChannel+0xb8>
    7222:	84 27       	eor	r24, r20
    7224:	8c 93       	st	X, r24
    7226:	13 c0       	rjmp	.+38     	; 0x724e <DIO_voidFlipChannel+0xec>
		break;
	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    7228:	a2 e3       	ldi	r26, 0x32	; 50
    722a:	b0 e0       	ldi	r27, 0x00	; 0
    722c:	e2 e3       	ldi	r30, 0x32	; 50
    722e:	f0 e0       	ldi	r31, 0x00	; 0
    7230:	80 81       	ld	r24, Z
    7232:	48 2f       	mov	r20, r24
    7234:	8a 81       	ldd	r24, Y+2	; 0x02
    7236:	28 2f       	mov	r18, r24
    7238:	30 e0       	ldi	r19, 0x00	; 0
    723a:	81 e0       	ldi	r24, 0x01	; 1
    723c:	90 e0       	ldi	r25, 0x00	; 0
    723e:	02 2e       	mov	r0, r18
    7240:	02 c0       	rjmp	.+4      	; 0x7246 <DIO_voidFlipChannel+0xe4>
    7242:	88 0f       	add	r24, r24
    7244:	99 1f       	adc	r25, r25
    7246:	0a 94       	dec	r0
    7248:	e2 f7       	brpl	.-8      	; 0x7242 <DIO_voidFlipChannel+0xe0>
    724a:	84 27       	eor	r24, r20
    724c:	8c 93       	st	X, r24
		break;
	}
}
    724e:	0f 90       	pop	r0
    7250:	0f 90       	pop	r0
    7252:	0f 90       	pop	r0
    7254:	0f 90       	pop	r0
    7256:	cf 91       	pop	r28
    7258:	df 91       	pop	r29
    725a:	08 95       	ret

0000725c <WakeUp_Call>:
void WakeUp_Call(void)
{
    725c:	df 93       	push	r29
    725e:	cf 93       	push	r28
    7260:	cd b7       	in	r28, 0x3d	; 61
    7262:	de b7       	in	r29, 0x3e	; 62
	LED_voidInit();
    7264:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LED_voidInit>
	BUTTONS_voidInit();
    7268:	0e 94 19 31 	call	0x6232	; 0x6232 <BUTTONS_voidInit>
	Buzzer_voidInit();
    726c:	0e 94 f5 30 	call	0x61ea	; 0x61ea <Buzzer_voidInit>
	SSD_voidInit();
    7270:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <SSD_voidInit>
	LCD_voidInit();
    7274:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <LCD_voidInit>
	ADC_voidInit(ADC_AVCC);
    7278:	81 e0       	ldi	r24, 0x01	; 1
    727a:	0e 94 42 39 	call	0x7284	; 0x7284 <ADC_voidInit>
}
    727e:	cf 91       	pop	r28
    7280:	df 91       	pop	r29
    7282:	08 95       	ret

00007284 <ADC_voidInit>:
 */

#include "ADC.h"

void ADC_voidInit(ADC_Vref_t vrefMode)
{
    7284:	df 93       	push	r29
    7286:	cf 93       	push	r28
    7288:	0f 92       	push	r0
    728a:	cd b7       	in	r28, 0x3d	; 61
    728c:	de b7       	in	r29, 0x3e	; 62
    728e:	89 83       	std	Y+1, r24	; 0x01
	// Enable ADC
	SET_BIT(ADC_ADCSRA_REG,ADC_ENABLE_BIT);
    7290:	a6 e2       	ldi	r26, 0x26	; 38
    7292:	b0 e0       	ldi	r27, 0x00	; 0
    7294:	e6 e2       	ldi	r30, 0x26	; 38
    7296:	f0 e0       	ldi	r31, 0x00	; 0
    7298:	80 81       	ld	r24, Z
    729a:	80 68       	ori	r24, 0x80	; 128
    729c:	8c 93       	st	X, r24

	// configure VREF+
	ADC_ADMUX_REG = (ADC_ADMUX_REG & ADC_VREF_MASK) | (vrefMode << 6);
    729e:	a7 e2       	ldi	r26, 0x27	; 39
    72a0:	b0 e0       	ldi	r27, 0x00	; 0
    72a2:	e7 e2       	ldi	r30, 0x27	; 39
    72a4:	f0 e0       	ldi	r31, 0x00	; 0
    72a6:	80 81       	ld	r24, Z
    72a8:	28 2f       	mov	r18, r24
    72aa:	2f 73       	andi	r18, 0x3F	; 63
    72ac:	89 81       	ldd	r24, Y+1	; 0x01
    72ae:	88 2f       	mov	r24, r24
    72b0:	90 e0       	ldi	r25, 0x00	; 0
    72b2:	00 24       	eor	r0, r0
    72b4:	96 95       	lsr	r25
    72b6:	87 95       	ror	r24
    72b8:	07 94       	ror	r0
    72ba:	96 95       	lsr	r25
    72bc:	87 95       	ror	r24
    72be:	07 94       	ror	r0
    72c0:	98 2f       	mov	r25, r24
    72c2:	80 2d       	mov	r24, r0
    72c4:	82 2b       	or	r24, r18
    72c6:	8c 93       	st	X, r24

	// Configure prescaler
	ADC_ADCSRA_REG = (ADC_ADCSRA_REG & ADC_PRESCALER_MASK) | (ADC_PRES_125KHZ << 0);
    72c8:	a6 e2       	ldi	r26, 0x26	; 38
    72ca:	b0 e0       	ldi	r27, 0x00	; 0
    72cc:	e6 e2       	ldi	r30, 0x26	; 38
    72ce:	f0 e0       	ldi	r31, 0x00	; 0
    72d0:	80 81       	ld	r24, Z
    72d2:	87 60       	ori	r24, 0x07	; 7
    72d4:	8c 93       	st	X, r24
}
    72d6:	0f 90       	pop	r0
    72d8:	cf 91       	pop	r28
    72da:	df 91       	pop	r29
    72dc:	08 95       	ret

000072de <ADC_u16ReadSteps>:

u16 ADC_u16ReadSteps(ADC_Channel_t channel)
{
    72de:	df 93       	push	r29
    72e0:	cf 93       	push	r28
    72e2:	00 d0       	rcall	.+0      	; 0x72e4 <ADC_u16ReadSteps+0x6>
    72e4:	0f 92       	push	r0
    72e6:	cd b7       	in	r28, 0x3d	; 61
    72e8:	de b7       	in	r29, 0x3e	; 62
    72ea:	8b 83       	std	Y+3, r24	; 0x03
	u16 loc_steps;

	// Configure channel
	ADC_ADMUX_REG = (ADC_ADMUX_REG & ADC_CHANNEL_MASK) | (channel << 0);
    72ec:	a7 e2       	ldi	r26, 0x27	; 39
    72ee:	b0 e0       	ldi	r27, 0x00	; 0
    72f0:	e7 e2       	ldi	r30, 0x27	; 39
    72f2:	f0 e0       	ldi	r31, 0x00	; 0
    72f4:	80 81       	ld	r24, Z
    72f6:	98 2f       	mov	r25, r24
    72f8:	90 7e       	andi	r25, 0xE0	; 224
    72fa:	8b 81       	ldd	r24, Y+3	; 0x03
    72fc:	89 2b       	or	r24, r25
    72fe:	8c 93       	st	X, r24

	// Start conversion
	SET_BIT(ADC_ADCSRA_REG,ADC_CONVERSION_BIT);
    7300:	a6 e2       	ldi	r26, 0x26	; 38
    7302:	b0 e0       	ldi	r27, 0x00	; 0
    7304:	e6 e2       	ldi	r30, 0x26	; 38
    7306:	f0 e0       	ldi	r31, 0x00	; 0
    7308:	80 81       	ld	r24, Z
    730a:	80 64       	ori	r24, 0x40	; 64
    730c:	8c 93       	st	X, r24

	// Wait for the ADIF and then clear it by writing 1 to it
	while( CHECK_BIT(ADC_ADCSRA_REG,ADC_ADIF_BIT) != 1 );
    730e:	e6 e2       	ldi	r30, 0x26	; 38
    7310:	f0 e0       	ldi	r31, 0x00	; 0
    7312:	80 81       	ld	r24, Z
    7314:	82 95       	swap	r24
    7316:	8f 70       	andi	r24, 0x0F	; 15
    7318:	88 2f       	mov	r24, r24
    731a:	90 e0       	ldi	r25, 0x00	; 0
    731c:	81 70       	andi	r24, 0x01	; 1
    731e:	90 70       	andi	r25, 0x00	; 0
    7320:	00 97       	sbiw	r24, 0x00	; 0
    7322:	a9 f3       	breq	.-22     	; 0x730e <ADC_u16ReadSteps+0x30>

	//SET_BIT(ADC_ADIF_BIT, ADC_ADCSRA_REG);
	SET_BIT(ADC_ADCSRA_REG,ADC_ADIF_BIT);
    7324:	a6 e2       	ldi	r26, 0x26	; 38
    7326:	b0 e0       	ldi	r27, 0x00	; 0
    7328:	e6 e2       	ldi	r30, 0x26	; 38
    732a:	f0 e0       	ldi	r31, 0x00	; 0
    732c:	80 81       	ld	r24, Z
    732e:	80 61       	ori	r24, 0x10	; 16
    7330:	8c 93       	st	X, r24

	loc_steps = ADC_ADCL_REG | (ADC_ADCH_REG << 8);
    7332:	e4 e2       	ldi	r30, 0x24	; 36
    7334:	f0 e0       	ldi	r31, 0x00	; 0
    7336:	80 81       	ld	r24, Z
    7338:	28 2f       	mov	r18, r24
    733a:	30 e0       	ldi	r19, 0x00	; 0
    733c:	e5 e2       	ldi	r30, 0x25	; 37
    733e:	f0 e0       	ldi	r31, 0x00	; 0
    7340:	80 81       	ld	r24, Z
    7342:	88 2f       	mov	r24, r24
    7344:	90 e0       	ldi	r25, 0x00	; 0
    7346:	98 2f       	mov	r25, r24
    7348:	88 27       	eor	r24, r24
    734a:	82 2b       	or	r24, r18
    734c:	93 2b       	or	r25, r19
    734e:	9a 83       	std	Y+2, r25	; 0x02
    7350:	89 83       	std	Y+1, r24	; 0x01

	return loc_steps;
    7352:	89 81       	ldd	r24, Y+1	; 0x01
    7354:	9a 81       	ldd	r25, Y+2	; 0x02
}
    7356:	0f 90       	pop	r0
    7358:	0f 90       	pop	r0
    735a:	0f 90       	pop	r0
    735c:	cf 91       	pop	r28
    735e:	df 91       	pop	r29
    7360:	08 95       	ret

00007362 <ADC_f64ReadVolts_mv>:

f64 ADC_f64ReadVolts_mv(ADC_Channel_t channel)
{
    7362:	df 93       	push	r29
    7364:	cf 93       	push	r28
    7366:	cd b7       	in	r28, 0x3d	; 61
    7368:	de b7       	in	r29, 0x3e	; 62
    736a:	27 97       	sbiw	r28, 0x07	; 7
    736c:	0f b6       	in	r0, 0x3f	; 63
    736e:	f8 94       	cli
    7370:	de bf       	out	0x3e, r29	; 62
    7372:	0f be       	out	0x3f, r0	; 63
    7374:	cd bf       	out	0x3d, r28	; 61
    7376:	8f 83       	std	Y+7, r24	; 0x07
	u16 loc_steps;
	f64 loc_volts;

	// Configure channel
	ADC_ADMUX_REG = (ADC_ADMUX_REG & ADC_CHANNEL_MASK) | (channel << 0);
    7378:	a7 e2       	ldi	r26, 0x27	; 39
    737a:	b0 e0       	ldi	r27, 0x00	; 0
    737c:	e7 e2       	ldi	r30, 0x27	; 39
    737e:	f0 e0       	ldi	r31, 0x00	; 0
    7380:	80 81       	ld	r24, Z
    7382:	98 2f       	mov	r25, r24
    7384:	90 7e       	andi	r25, 0xE0	; 224
    7386:	8f 81       	ldd	r24, Y+7	; 0x07
    7388:	89 2b       	or	r24, r25
    738a:	8c 93       	st	X, r24

	// Start conversion
	SET_BIT(ADC_ADCSRA_REG,ADC_CONVERSION_BIT);
    738c:	a6 e2       	ldi	r26, 0x26	; 38
    738e:	b0 e0       	ldi	r27, 0x00	; 0
    7390:	e6 e2       	ldi	r30, 0x26	; 38
    7392:	f0 e0       	ldi	r31, 0x00	; 0
    7394:	80 81       	ld	r24, Z
    7396:	80 64       	ori	r24, 0x40	; 64
    7398:	8c 93       	st	X, r24

	// Wait for the ADIF and then clear it by writing 1 to it
	while( CHECK_BIT(ADC_ADCSRA_REG,ADC_ADIF_BIT) != 1 );
    739a:	e6 e2       	ldi	r30, 0x26	; 38
    739c:	f0 e0       	ldi	r31, 0x00	; 0
    739e:	80 81       	ld	r24, Z
    73a0:	82 95       	swap	r24
    73a2:	8f 70       	andi	r24, 0x0F	; 15
    73a4:	88 2f       	mov	r24, r24
    73a6:	90 e0       	ldi	r25, 0x00	; 0
    73a8:	81 70       	andi	r24, 0x01	; 1
    73aa:	90 70       	andi	r25, 0x00	; 0
    73ac:	00 97       	sbiw	r24, 0x00	; 0
    73ae:	a9 f3       	breq	.-22     	; 0x739a <ADC_f64ReadVolts_mv+0x38>

	SET_BIT(ADC_ADCSRA_REG,ADC_ADIF_BIT);
    73b0:	a6 e2       	ldi	r26, 0x26	; 38
    73b2:	b0 e0       	ldi	r27, 0x00	; 0
    73b4:	e6 e2       	ldi	r30, 0x26	; 38
    73b6:	f0 e0       	ldi	r31, 0x00	; 0
    73b8:	80 81       	ld	r24, Z
    73ba:	80 61       	ori	r24, 0x10	; 16
    73bc:	8c 93       	st	X, r24

	loc_steps = ADC_ADCL_REG | (ADC_ADCH_REG << 8);
    73be:	e4 e2       	ldi	r30, 0x24	; 36
    73c0:	f0 e0       	ldi	r31, 0x00	; 0
    73c2:	80 81       	ld	r24, Z
    73c4:	28 2f       	mov	r18, r24
    73c6:	30 e0       	ldi	r19, 0x00	; 0
    73c8:	e5 e2       	ldi	r30, 0x25	; 37
    73ca:	f0 e0       	ldi	r31, 0x00	; 0
    73cc:	80 81       	ld	r24, Z
    73ce:	88 2f       	mov	r24, r24
    73d0:	90 e0       	ldi	r25, 0x00	; 0
    73d2:	98 2f       	mov	r25, r24
    73d4:	88 27       	eor	r24, r24
    73d6:	82 2b       	or	r24, r18
    73d8:	93 2b       	or	r25, r19
    73da:	9e 83       	std	Y+6, r25	; 0x06
    73dc:	8d 83       	std	Y+5, r24	; 0x05
	loc_volts = loc_steps * ADC_STEP;
    73de:	8d 81       	ldd	r24, Y+5	; 0x05
    73e0:	9e 81       	ldd	r25, Y+6	; 0x06
    73e2:	cc 01       	movw	r24, r24
    73e4:	a0 e0       	ldi	r26, 0x00	; 0
    73e6:	b0 e0       	ldi	r27, 0x00	; 0
    73e8:	bc 01       	movw	r22, r24
    73ea:	cd 01       	movw	r24, r26
    73ec:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    73f0:	dc 01       	movw	r26, r24
    73f2:	cb 01       	movw	r24, r22
    73f4:	bc 01       	movw	r22, r24
    73f6:	cd 01       	movw	r24, r26
    73f8:	2a e9       	ldi	r18, 0x9A	; 154
    73fa:	39 e9       	ldi	r19, 0x99	; 153
    73fc:	49 e9       	ldi	r20, 0x99	; 153
    73fe:	50 e4       	ldi	r21, 0x40	; 64
    7400:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    7404:	dc 01       	movw	r26, r24
    7406:	cb 01       	movw	r24, r22
    7408:	89 83       	std	Y+1, r24	; 0x01
    740a:	9a 83       	std	Y+2, r25	; 0x02
    740c:	ab 83       	std	Y+3, r26	; 0x03
    740e:	bc 83       	std	Y+4, r27	; 0x04

	return loc_volts;
    7410:	89 81       	ldd	r24, Y+1	; 0x01
    7412:	9a 81       	ldd	r25, Y+2	; 0x02
    7414:	ab 81       	ldd	r26, Y+3	; 0x03
    7416:	bc 81       	ldd	r27, Y+4	; 0x04
}
    7418:	bc 01       	movw	r22, r24
    741a:	cd 01       	movw	r24, r26
    741c:	27 96       	adiw	r28, 0x07	; 7
    741e:	0f b6       	in	r0, 0x3f	; 63
    7420:	f8 94       	cli
    7422:	de bf       	out	0x3e, r29	; 62
    7424:	0f be       	out	0x3f, r0	; 63
    7426:	cd bf       	out	0x3d, r28	; 61
    7428:	cf 91       	pop	r28
    742a:	df 91       	pop	r29
    742c:	08 95       	ret

0000742e <__udivmodqi4>:
    742e:	99 1b       	sub	r25, r25
    7430:	79 e0       	ldi	r23, 0x09	; 9
    7432:	04 c0       	rjmp	.+8      	; 0x743c <__udivmodqi4_ep>

00007434 <__udivmodqi4_loop>:
    7434:	99 1f       	adc	r25, r25
    7436:	96 17       	cp	r25, r22
    7438:	08 f0       	brcs	.+2      	; 0x743c <__udivmodqi4_ep>
    743a:	96 1b       	sub	r25, r22

0000743c <__udivmodqi4_ep>:
    743c:	88 1f       	adc	r24, r24
    743e:	7a 95       	dec	r23
    7440:	c9 f7       	brne	.-14     	; 0x7434 <__udivmodqi4_loop>
    7442:	80 95       	com	r24
    7444:	08 95       	ret

00007446 <__udivmodsi4>:
    7446:	a1 e2       	ldi	r26, 0x21	; 33
    7448:	1a 2e       	mov	r1, r26
    744a:	aa 1b       	sub	r26, r26
    744c:	bb 1b       	sub	r27, r27
    744e:	fd 01       	movw	r30, r26
    7450:	0d c0       	rjmp	.+26     	; 0x746c <__udivmodsi4_ep>

00007452 <__udivmodsi4_loop>:
    7452:	aa 1f       	adc	r26, r26
    7454:	bb 1f       	adc	r27, r27
    7456:	ee 1f       	adc	r30, r30
    7458:	ff 1f       	adc	r31, r31
    745a:	a2 17       	cp	r26, r18
    745c:	b3 07       	cpc	r27, r19
    745e:	e4 07       	cpc	r30, r20
    7460:	f5 07       	cpc	r31, r21
    7462:	20 f0       	brcs	.+8      	; 0x746c <__udivmodsi4_ep>
    7464:	a2 1b       	sub	r26, r18
    7466:	b3 0b       	sbc	r27, r19
    7468:	e4 0b       	sbc	r30, r20
    746a:	f5 0b       	sbc	r31, r21

0000746c <__udivmodsi4_ep>:
    746c:	66 1f       	adc	r22, r22
    746e:	77 1f       	adc	r23, r23
    7470:	88 1f       	adc	r24, r24
    7472:	99 1f       	adc	r25, r25
    7474:	1a 94       	dec	r1
    7476:	69 f7       	brne	.-38     	; 0x7452 <__udivmodsi4_loop>
    7478:	60 95       	com	r22
    747a:	70 95       	com	r23
    747c:	80 95       	com	r24
    747e:	90 95       	com	r25
    7480:	9b 01       	movw	r18, r22
    7482:	ac 01       	movw	r20, r24
    7484:	bd 01       	movw	r22, r26
    7486:	cf 01       	movw	r24, r30
    7488:	08 95       	ret

0000748a <__prologue_saves__>:
    748a:	2f 92       	push	r2
    748c:	3f 92       	push	r3
    748e:	4f 92       	push	r4
    7490:	5f 92       	push	r5
    7492:	6f 92       	push	r6
    7494:	7f 92       	push	r7
    7496:	8f 92       	push	r8
    7498:	9f 92       	push	r9
    749a:	af 92       	push	r10
    749c:	bf 92       	push	r11
    749e:	cf 92       	push	r12
    74a0:	df 92       	push	r13
    74a2:	ef 92       	push	r14
    74a4:	ff 92       	push	r15
    74a6:	0f 93       	push	r16
    74a8:	1f 93       	push	r17
    74aa:	cf 93       	push	r28
    74ac:	df 93       	push	r29
    74ae:	cd b7       	in	r28, 0x3d	; 61
    74b0:	de b7       	in	r29, 0x3e	; 62
    74b2:	ca 1b       	sub	r28, r26
    74b4:	db 0b       	sbc	r29, r27
    74b6:	0f b6       	in	r0, 0x3f	; 63
    74b8:	f8 94       	cli
    74ba:	de bf       	out	0x3e, r29	; 62
    74bc:	0f be       	out	0x3f, r0	; 63
    74be:	cd bf       	out	0x3d, r28	; 61
    74c0:	09 94       	ijmp

000074c2 <__epilogue_restores__>:
    74c2:	2a 88       	ldd	r2, Y+18	; 0x12
    74c4:	39 88       	ldd	r3, Y+17	; 0x11
    74c6:	48 88       	ldd	r4, Y+16	; 0x10
    74c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    74ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    74cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    74ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    74d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    74d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    74d4:	b9 84       	ldd	r11, Y+9	; 0x09
    74d6:	c8 84       	ldd	r12, Y+8	; 0x08
    74d8:	df 80       	ldd	r13, Y+7	; 0x07
    74da:	ee 80       	ldd	r14, Y+6	; 0x06
    74dc:	fd 80       	ldd	r15, Y+5	; 0x05
    74de:	0c 81       	ldd	r16, Y+4	; 0x04
    74e0:	1b 81       	ldd	r17, Y+3	; 0x03
    74e2:	aa 81       	ldd	r26, Y+2	; 0x02
    74e4:	b9 81       	ldd	r27, Y+1	; 0x01
    74e6:	ce 0f       	add	r28, r30
    74e8:	d1 1d       	adc	r29, r1
    74ea:	0f b6       	in	r0, 0x3f	; 63
    74ec:	f8 94       	cli
    74ee:	de bf       	out	0x3e, r29	; 62
    74f0:	0f be       	out	0x3f, r0	; 63
    74f2:	cd bf       	out	0x3d, r28	; 61
    74f4:	ed 01       	movw	r28, r26
    74f6:	08 95       	ret

000074f8 <sprintf>:
    74f8:	ae e0       	ldi	r26, 0x0E	; 14
    74fa:	b0 e0       	ldi	r27, 0x00	; 0
    74fc:	e2 e8       	ldi	r30, 0x82	; 130
    74fe:	fa e3       	ldi	r31, 0x3A	; 58
    7500:	0c 94 53 3a 	jmp	0x74a6	; 0x74a6 <__prologue_saves__+0x1c>
    7504:	0d 89       	ldd	r16, Y+21	; 0x15
    7506:	1e 89       	ldd	r17, Y+22	; 0x16
    7508:	86 e0       	ldi	r24, 0x06	; 6
    750a:	8c 83       	std	Y+4, r24	; 0x04
    750c:	1a 83       	std	Y+2, r17	; 0x02
    750e:	09 83       	std	Y+1, r16	; 0x01
    7510:	8f ef       	ldi	r24, 0xFF	; 255
    7512:	9f e7       	ldi	r25, 0x7F	; 127
    7514:	9e 83       	std	Y+6, r25	; 0x06
    7516:	8d 83       	std	Y+5, r24	; 0x05
    7518:	9e 01       	movw	r18, r28
    751a:	27 5e       	subi	r18, 0xE7	; 231
    751c:	3f 4f       	sbci	r19, 0xFF	; 255
    751e:	ce 01       	movw	r24, r28
    7520:	01 96       	adiw	r24, 0x01	; 1
    7522:	6f 89       	ldd	r22, Y+23	; 0x17
    7524:	78 8d       	ldd	r23, Y+24	; 0x18
    7526:	a9 01       	movw	r20, r18
    7528:	0e 94 a0 3a 	call	0x7540	; 0x7540 <vfprintf>
    752c:	2f 81       	ldd	r18, Y+7	; 0x07
    752e:	38 85       	ldd	r19, Y+8	; 0x08
    7530:	02 0f       	add	r16, r18
    7532:	13 1f       	adc	r17, r19
    7534:	f8 01       	movw	r30, r16
    7536:	10 82       	st	Z, r1
    7538:	2e 96       	adiw	r28, 0x0e	; 14
    753a:	e4 e0       	ldi	r30, 0x04	; 4
    753c:	0c 94 6f 3a 	jmp	0x74de	; 0x74de <__epilogue_restores__+0x1c>

00007540 <vfprintf>:
    7540:	ab e0       	ldi	r26, 0x0B	; 11
    7542:	b0 e0       	ldi	r27, 0x00	; 0
    7544:	e6 ea       	ldi	r30, 0xA6	; 166
    7546:	fa e3       	ldi	r31, 0x3A	; 58
    7548:	0c 94 45 3a 	jmp	0x748a	; 0x748a <__prologue_saves__>
    754c:	3c 01       	movw	r6, r24
    754e:	2b 01       	movw	r4, r22
    7550:	5a 01       	movw	r10, r20
    7552:	fc 01       	movw	r30, r24
    7554:	17 82       	std	Z+7, r1	; 0x07
    7556:	16 82       	std	Z+6, r1	; 0x06
    7558:	83 81       	ldd	r24, Z+3	; 0x03
    755a:	81 fd       	sbrc	r24, 1
    755c:	03 c0       	rjmp	.+6      	; 0x7564 <vfprintf+0x24>
    755e:	6f ef       	ldi	r22, 0xFF	; 255
    7560:	7f ef       	ldi	r23, 0xFF	; 255
    7562:	c6 c1       	rjmp	.+908    	; 0x78f0 <vfprintf+0x3b0>
    7564:	9a e0       	ldi	r25, 0x0A	; 10
    7566:	89 2e       	mov	r8, r25
    7568:	1e 01       	movw	r2, r28
    756a:	08 94       	sec
    756c:	21 1c       	adc	r2, r1
    756e:	31 1c       	adc	r3, r1
    7570:	f3 01       	movw	r30, r6
    7572:	23 81       	ldd	r18, Z+3	; 0x03
    7574:	f2 01       	movw	r30, r4
    7576:	23 fd       	sbrc	r18, 3
    7578:	85 91       	lpm	r24, Z+
    757a:	23 ff       	sbrs	r18, 3
    757c:	81 91       	ld	r24, Z+
    757e:	2f 01       	movw	r4, r30
    7580:	88 23       	and	r24, r24
    7582:	09 f4       	brne	.+2      	; 0x7586 <vfprintf+0x46>
    7584:	b2 c1       	rjmp	.+868    	; 0x78ea <vfprintf+0x3aa>
    7586:	85 32       	cpi	r24, 0x25	; 37
    7588:	39 f4       	brne	.+14     	; 0x7598 <vfprintf+0x58>
    758a:	23 fd       	sbrc	r18, 3
    758c:	85 91       	lpm	r24, Z+
    758e:	23 ff       	sbrs	r18, 3
    7590:	81 91       	ld	r24, Z+
    7592:	2f 01       	movw	r4, r30
    7594:	85 32       	cpi	r24, 0x25	; 37
    7596:	29 f4       	brne	.+10     	; 0x75a2 <vfprintf+0x62>
    7598:	90 e0       	ldi	r25, 0x00	; 0
    759a:	b3 01       	movw	r22, r6
    759c:	0e 94 93 3c 	call	0x7926	; 0x7926 <fputc>
    75a0:	e7 cf       	rjmp	.-50     	; 0x7570 <vfprintf+0x30>
    75a2:	98 2f       	mov	r25, r24
    75a4:	ff 24       	eor	r15, r15
    75a6:	ee 24       	eor	r14, r14
    75a8:	99 24       	eor	r9, r9
    75aa:	ff e1       	ldi	r31, 0x1F	; 31
    75ac:	ff 15       	cp	r31, r15
    75ae:	d0 f0       	brcs	.+52     	; 0x75e4 <vfprintf+0xa4>
    75b0:	9b 32       	cpi	r25, 0x2B	; 43
    75b2:	69 f0       	breq	.+26     	; 0x75ce <vfprintf+0x8e>
    75b4:	9c 32       	cpi	r25, 0x2C	; 44
    75b6:	28 f4       	brcc	.+10     	; 0x75c2 <vfprintf+0x82>
    75b8:	90 32       	cpi	r25, 0x20	; 32
    75ba:	59 f0       	breq	.+22     	; 0x75d2 <vfprintf+0x92>
    75bc:	93 32       	cpi	r25, 0x23	; 35
    75be:	91 f4       	brne	.+36     	; 0x75e4 <vfprintf+0xa4>
    75c0:	0e c0       	rjmp	.+28     	; 0x75de <vfprintf+0x9e>
    75c2:	9d 32       	cpi	r25, 0x2D	; 45
    75c4:	49 f0       	breq	.+18     	; 0x75d8 <vfprintf+0x98>
    75c6:	90 33       	cpi	r25, 0x30	; 48
    75c8:	69 f4       	brne	.+26     	; 0x75e4 <vfprintf+0xa4>
    75ca:	41 e0       	ldi	r20, 0x01	; 1
    75cc:	24 c0       	rjmp	.+72     	; 0x7616 <vfprintf+0xd6>
    75ce:	52 e0       	ldi	r21, 0x02	; 2
    75d0:	f5 2a       	or	r15, r21
    75d2:	84 e0       	ldi	r24, 0x04	; 4
    75d4:	f8 2a       	or	r15, r24
    75d6:	28 c0       	rjmp	.+80     	; 0x7628 <vfprintf+0xe8>
    75d8:	98 e0       	ldi	r25, 0x08	; 8
    75da:	f9 2a       	or	r15, r25
    75dc:	25 c0       	rjmp	.+74     	; 0x7628 <vfprintf+0xe8>
    75de:	e0 e1       	ldi	r30, 0x10	; 16
    75e0:	fe 2a       	or	r15, r30
    75e2:	22 c0       	rjmp	.+68     	; 0x7628 <vfprintf+0xe8>
    75e4:	f7 fc       	sbrc	r15, 7
    75e6:	29 c0       	rjmp	.+82     	; 0x763a <vfprintf+0xfa>
    75e8:	89 2f       	mov	r24, r25
    75ea:	80 53       	subi	r24, 0x30	; 48
    75ec:	8a 30       	cpi	r24, 0x0A	; 10
    75ee:	70 f4       	brcc	.+28     	; 0x760c <vfprintf+0xcc>
    75f0:	f6 fe       	sbrs	r15, 6
    75f2:	05 c0       	rjmp	.+10     	; 0x75fe <vfprintf+0xbe>
    75f4:	98 9c       	mul	r9, r8
    75f6:	90 2c       	mov	r9, r0
    75f8:	11 24       	eor	r1, r1
    75fa:	98 0e       	add	r9, r24
    75fc:	15 c0       	rjmp	.+42     	; 0x7628 <vfprintf+0xe8>
    75fe:	e8 9c       	mul	r14, r8
    7600:	e0 2c       	mov	r14, r0
    7602:	11 24       	eor	r1, r1
    7604:	e8 0e       	add	r14, r24
    7606:	f0 e2       	ldi	r31, 0x20	; 32
    7608:	ff 2a       	or	r15, r31
    760a:	0e c0       	rjmp	.+28     	; 0x7628 <vfprintf+0xe8>
    760c:	9e 32       	cpi	r25, 0x2E	; 46
    760e:	29 f4       	brne	.+10     	; 0x761a <vfprintf+0xda>
    7610:	f6 fc       	sbrc	r15, 6
    7612:	6b c1       	rjmp	.+726    	; 0x78ea <vfprintf+0x3aa>
    7614:	40 e4       	ldi	r20, 0x40	; 64
    7616:	f4 2a       	or	r15, r20
    7618:	07 c0       	rjmp	.+14     	; 0x7628 <vfprintf+0xe8>
    761a:	9c 36       	cpi	r25, 0x6C	; 108
    761c:	19 f4       	brne	.+6      	; 0x7624 <vfprintf+0xe4>
    761e:	50 e8       	ldi	r21, 0x80	; 128
    7620:	f5 2a       	or	r15, r21
    7622:	02 c0       	rjmp	.+4      	; 0x7628 <vfprintf+0xe8>
    7624:	98 36       	cpi	r25, 0x68	; 104
    7626:	49 f4       	brne	.+18     	; 0x763a <vfprintf+0xfa>
    7628:	f2 01       	movw	r30, r4
    762a:	23 fd       	sbrc	r18, 3
    762c:	95 91       	lpm	r25, Z+
    762e:	23 ff       	sbrs	r18, 3
    7630:	91 91       	ld	r25, Z+
    7632:	2f 01       	movw	r4, r30
    7634:	99 23       	and	r25, r25
    7636:	09 f0       	breq	.+2      	; 0x763a <vfprintf+0xfa>
    7638:	b8 cf       	rjmp	.-144    	; 0x75aa <vfprintf+0x6a>
    763a:	89 2f       	mov	r24, r25
    763c:	85 54       	subi	r24, 0x45	; 69
    763e:	83 30       	cpi	r24, 0x03	; 3
    7640:	18 f0       	brcs	.+6      	; 0x7648 <vfprintf+0x108>
    7642:	80 52       	subi	r24, 0x20	; 32
    7644:	83 30       	cpi	r24, 0x03	; 3
    7646:	38 f4       	brcc	.+14     	; 0x7656 <vfprintf+0x116>
    7648:	44 e0       	ldi	r20, 0x04	; 4
    764a:	50 e0       	ldi	r21, 0x00	; 0
    764c:	a4 0e       	add	r10, r20
    764e:	b5 1e       	adc	r11, r21
    7650:	5f e3       	ldi	r21, 0x3F	; 63
    7652:	59 83       	std	Y+1, r21	; 0x01
    7654:	0f c0       	rjmp	.+30     	; 0x7674 <vfprintf+0x134>
    7656:	93 36       	cpi	r25, 0x63	; 99
    7658:	31 f0       	breq	.+12     	; 0x7666 <vfprintf+0x126>
    765a:	93 37       	cpi	r25, 0x73	; 115
    765c:	79 f0       	breq	.+30     	; 0x767c <vfprintf+0x13c>
    765e:	93 35       	cpi	r25, 0x53	; 83
    7660:	09 f0       	breq	.+2      	; 0x7664 <vfprintf+0x124>
    7662:	56 c0       	rjmp	.+172    	; 0x7710 <vfprintf+0x1d0>
    7664:	20 c0       	rjmp	.+64     	; 0x76a6 <vfprintf+0x166>
    7666:	f5 01       	movw	r30, r10
    7668:	80 81       	ld	r24, Z
    766a:	89 83       	std	Y+1, r24	; 0x01
    766c:	42 e0       	ldi	r20, 0x02	; 2
    766e:	50 e0       	ldi	r21, 0x00	; 0
    7670:	a4 0e       	add	r10, r20
    7672:	b5 1e       	adc	r11, r21
    7674:	61 01       	movw	r12, r2
    7676:	01 e0       	ldi	r16, 0x01	; 1
    7678:	10 e0       	ldi	r17, 0x00	; 0
    767a:	12 c0       	rjmp	.+36     	; 0x76a0 <vfprintf+0x160>
    767c:	f5 01       	movw	r30, r10
    767e:	c0 80       	ld	r12, Z
    7680:	d1 80       	ldd	r13, Z+1	; 0x01
    7682:	f6 fc       	sbrc	r15, 6
    7684:	03 c0       	rjmp	.+6      	; 0x768c <vfprintf+0x14c>
    7686:	6f ef       	ldi	r22, 0xFF	; 255
    7688:	7f ef       	ldi	r23, 0xFF	; 255
    768a:	02 c0       	rjmp	.+4      	; 0x7690 <vfprintf+0x150>
    768c:	69 2d       	mov	r22, r9
    768e:	70 e0       	ldi	r23, 0x00	; 0
    7690:	42 e0       	ldi	r20, 0x02	; 2
    7692:	50 e0       	ldi	r21, 0x00	; 0
    7694:	a4 0e       	add	r10, r20
    7696:	b5 1e       	adc	r11, r21
    7698:	c6 01       	movw	r24, r12
    769a:	0e 94 88 3c 	call	0x7910	; 0x7910 <strnlen>
    769e:	8c 01       	movw	r16, r24
    76a0:	5f e7       	ldi	r21, 0x7F	; 127
    76a2:	f5 22       	and	r15, r21
    76a4:	14 c0       	rjmp	.+40     	; 0x76ce <vfprintf+0x18e>
    76a6:	f5 01       	movw	r30, r10
    76a8:	c0 80       	ld	r12, Z
    76aa:	d1 80       	ldd	r13, Z+1	; 0x01
    76ac:	f6 fc       	sbrc	r15, 6
    76ae:	03 c0       	rjmp	.+6      	; 0x76b6 <vfprintf+0x176>
    76b0:	6f ef       	ldi	r22, 0xFF	; 255
    76b2:	7f ef       	ldi	r23, 0xFF	; 255
    76b4:	02 c0       	rjmp	.+4      	; 0x76ba <vfprintf+0x17a>
    76b6:	69 2d       	mov	r22, r9
    76b8:	70 e0       	ldi	r23, 0x00	; 0
    76ba:	42 e0       	ldi	r20, 0x02	; 2
    76bc:	50 e0       	ldi	r21, 0x00	; 0
    76be:	a4 0e       	add	r10, r20
    76c0:	b5 1e       	adc	r11, r21
    76c2:	c6 01       	movw	r24, r12
    76c4:	0e 94 7d 3c 	call	0x78fa	; 0x78fa <strnlen_P>
    76c8:	8c 01       	movw	r16, r24
    76ca:	50 e8       	ldi	r21, 0x80	; 128
    76cc:	f5 2a       	or	r15, r21
    76ce:	f3 fe       	sbrs	r15, 3
    76d0:	07 c0       	rjmp	.+14     	; 0x76e0 <vfprintf+0x1a0>
    76d2:	1a c0       	rjmp	.+52     	; 0x7708 <vfprintf+0x1c8>
    76d4:	80 e2       	ldi	r24, 0x20	; 32
    76d6:	90 e0       	ldi	r25, 0x00	; 0
    76d8:	b3 01       	movw	r22, r6
    76da:	0e 94 93 3c 	call	0x7926	; 0x7926 <fputc>
    76de:	ea 94       	dec	r14
    76e0:	8e 2d       	mov	r24, r14
    76e2:	90 e0       	ldi	r25, 0x00	; 0
    76e4:	08 17       	cp	r16, r24
    76e6:	19 07       	cpc	r17, r25
    76e8:	a8 f3       	brcs	.-22     	; 0x76d4 <vfprintf+0x194>
    76ea:	0e c0       	rjmp	.+28     	; 0x7708 <vfprintf+0x1c8>
    76ec:	f6 01       	movw	r30, r12
    76ee:	f7 fc       	sbrc	r15, 7
    76f0:	85 91       	lpm	r24, Z+
    76f2:	f7 fe       	sbrs	r15, 7
    76f4:	81 91       	ld	r24, Z+
    76f6:	6f 01       	movw	r12, r30
    76f8:	90 e0       	ldi	r25, 0x00	; 0
    76fa:	b3 01       	movw	r22, r6
    76fc:	0e 94 93 3c 	call	0x7926	; 0x7926 <fputc>
    7700:	e1 10       	cpse	r14, r1
    7702:	ea 94       	dec	r14
    7704:	01 50       	subi	r16, 0x01	; 1
    7706:	10 40       	sbci	r17, 0x00	; 0
    7708:	01 15       	cp	r16, r1
    770a:	11 05       	cpc	r17, r1
    770c:	79 f7       	brne	.-34     	; 0x76ec <vfprintf+0x1ac>
    770e:	ea c0       	rjmp	.+468    	; 0x78e4 <vfprintf+0x3a4>
    7710:	94 36       	cpi	r25, 0x64	; 100
    7712:	11 f0       	breq	.+4      	; 0x7718 <vfprintf+0x1d8>
    7714:	99 36       	cpi	r25, 0x69	; 105
    7716:	69 f5       	brne	.+90     	; 0x7772 <vfprintf+0x232>
    7718:	f7 fe       	sbrs	r15, 7
    771a:	08 c0       	rjmp	.+16     	; 0x772c <vfprintf+0x1ec>
    771c:	f5 01       	movw	r30, r10
    771e:	20 81       	ld	r18, Z
    7720:	31 81       	ldd	r19, Z+1	; 0x01
    7722:	42 81       	ldd	r20, Z+2	; 0x02
    7724:	53 81       	ldd	r21, Z+3	; 0x03
    7726:	84 e0       	ldi	r24, 0x04	; 4
    7728:	90 e0       	ldi	r25, 0x00	; 0
    772a:	0a c0       	rjmp	.+20     	; 0x7740 <vfprintf+0x200>
    772c:	f5 01       	movw	r30, r10
    772e:	80 81       	ld	r24, Z
    7730:	91 81       	ldd	r25, Z+1	; 0x01
    7732:	9c 01       	movw	r18, r24
    7734:	44 27       	eor	r20, r20
    7736:	37 fd       	sbrc	r19, 7
    7738:	40 95       	com	r20
    773a:	54 2f       	mov	r21, r20
    773c:	82 e0       	ldi	r24, 0x02	; 2
    773e:	90 e0       	ldi	r25, 0x00	; 0
    7740:	a8 0e       	add	r10, r24
    7742:	b9 1e       	adc	r11, r25
    7744:	9f e6       	ldi	r25, 0x6F	; 111
    7746:	f9 22       	and	r15, r25
    7748:	57 ff       	sbrs	r21, 7
    774a:	09 c0       	rjmp	.+18     	; 0x775e <vfprintf+0x21e>
    774c:	50 95       	com	r21
    774e:	40 95       	com	r20
    7750:	30 95       	com	r19
    7752:	21 95       	neg	r18
    7754:	3f 4f       	sbci	r19, 0xFF	; 255
    7756:	4f 4f       	sbci	r20, 0xFF	; 255
    7758:	5f 4f       	sbci	r21, 0xFF	; 255
    775a:	e0 e8       	ldi	r30, 0x80	; 128
    775c:	fe 2a       	or	r15, r30
    775e:	ca 01       	movw	r24, r20
    7760:	b9 01       	movw	r22, r18
    7762:	a1 01       	movw	r20, r2
    7764:	2a e0       	ldi	r18, 0x0A	; 10
    7766:	30 e0       	ldi	r19, 0x00	; 0
    7768:	0e 94 bf 3c 	call	0x797e	; 0x797e <__ultoa_invert>
    776c:	d8 2e       	mov	r13, r24
    776e:	d2 18       	sub	r13, r2
    7770:	40 c0       	rjmp	.+128    	; 0x77f2 <vfprintf+0x2b2>
    7772:	95 37       	cpi	r25, 0x75	; 117
    7774:	29 f4       	brne	.+10     	; 0x7780 <vfprintf+0x240>
    7776:	1f 2d       	mov	r17, r15
    7778:	1f 7e       	andi	r17, 0xEF	; 239
    777a:	2a e0       	ldi	r18, 0x0A	; 10
    777c:	30 e0       	ldi	r19, 0x00	; 0
    777e:	1d c0       	rjmp	.+58     	; 0x77ba <vfprintf+0x27a>
    7780:	1f 2d       	mov	r17, r15
    7782:	19 7f       	andi	r17, 0xF9	; 249
    7784:	9f 36       	cpi	r25, 0x6F	; 111
    7786:	61 f0       	breq	.+24     	; 0x77a0 <vfprintf+0x260>
    7788:	90 37       	cpi	r25, 0x70	; 112
    778a:	20 f4       	brcc	.+8      	; 0x7794 <vfprintf+0x254>
    778c:	98 35       	cpi	r25, 0x58	; 88
    778e:	09 f0       	breq	.+2      	; 0x7792 <vfprintf+0x252>
    7790:	ac c0       	rjmp	.+344    	; 0x78ea <vfprintf+0x3aa>
    7792:	0f c0       	rjmp	.+30     	; 0x77b2 <vfprintf+0x272>
    7794:	90 37       	cpi	r25, 0x70	; 112
    7796:	39 f0       	breq	.+14     	; 0x77a6 <vfprintf+0x266>
    7798:	98 37       	cpi	r25, 0x78	; 120
    779a:	09 f0       	breq	.+2      	; 0x779e <vfprintf+0x25e>
    779c:	a6 c0       	rjmp	.+332    	; 0x78ea <vfprintf+0x3aa>
    779e:	04 c0       	rjmp	.+8      	; 0x77a8 <vfprintf+0x268>
    77a0:	28 e0       	ldi	r18, 0x08	; 8
    77a2:	30 e0       	ldi	r19, 0x00	; 0
    77a4:	0a c0       	rjmp	.+20     	; 0x77ba <vfprintf+0x27a>
    77a6:	10 61       	ori	r17, 0x10	; 16
    77a8:	14 fd       	sbrc	r17, 4
    77aa:	14 60       	ori	r17, 0x04	; 4
    77ac:	20 e1       	ldi	r18, 0x10	; 16
    77ae:	30 e0       	ldi	r19, 0x00	; 0
    77b0:	04 c0       	rjmp	.+8      	; 0x77ba <vfprintf+0x27a>
    77b2:	14 fd       	sbrc	r17, 4
    77b4:	16 60       	ori	r17, 0x06	; 6
    77b6:	20 e1       	ldi	r18, 0x10	; 16
    77b8:	32 e0       	ldi	r19, 0x02	; 2
    77ba:	17 ff       	sbrs	r17, 7
    77bc:	08 c0       	rjmp	.+16     	; 0x77ce <vfprintf+0x28e>
    77be:	f5 01       	movw	r30, r10
    77c0:	60 81       	ld	r22, Z
    77c2:	71 81       	ldd	r23, Z+1	; 0x01
    77c4:	82 81       	ldd	r24, Z+2	; 0x02
    77c6:	93 81       	ldd	r25, Z+3	; 0x03
    77c8:	44 e0       	ldi	r20, 0x04	; 4
    77ca:	50 e0       	ldi	r21, 0x00	; 0
    77cc:	08 c0       	rjmp	.+16     	; 0x77de <vfprintf+0x29e>
    77ce:	f5 01       	movw	r30, r10
    77d0:	80 81       	ld	r24, Z
    77d2:	91 81       	ldd	r25, Z+1	; 0x01
    77d4:	bc 01       	movw	r22, r24
    77d6:	80 e0       	ldi	r24, 0x00	; 0
    77d8:	90 e0       	ldi	r25, 0x00	; 0
    77da:	42 e0       	ldi	r20, 0x02	; 2
    77dc:	50 e0       	ldi	r21, 0x00	; 0
    77de:	a4 0e       	add	r10, r20
    77e0:	b5 1e       	adc	r11, r21
    77e2:	a1 01       	movw	r20, r2
    77e4:	0e 94 bf 3c 	call	0x797e	; 0x797e <__ultoa_invert>
    77e8:	d8 2e       	mov	r13, r24
    77ea:	d2 18       	sub	r13, r2
    77ec:	8f e7       	ldi	r24, 0x7F	; 127
    77ee:	f8 2e       	mov	r15, r24
    77f0:	f1 22       	and	r15, r17
    77f2:	f6 fe       	sbrs	r15, 6
    77f4:	0b c0       	rjmp	.+22     	; 0x780c <vfprintf+0x2cc>
    77f6:	5e ef       	ldi	r21, 0xFE	; 254
    77f8:	f5 22       	and	r15, r21
    77fa:	d9 14       	cp	r13, r9
    77fc:	38 f4       	brcc	.+14     	; 0x780c <vfprintf+0x2cc>
    77fe:	f4 fe       	sbrs	r15, 4
    7800:	07 c0       	rjmp	.+14     	; 0x7810 <vfprintf+0x2d0>
    7802:	f2 fc       	sbrc	r15, 2
    7804:	05 c0       	rjmp	.+10     	; 0x7810 <vfprintf+0x2d0>
    7806:	8f ee       	ldi	r24, 0xEF	; 239
    7808:	f8 22       	and	r15, r24
    780a:	02 c0       	rjmp	.+4      	; 0x7810 <vfprintf+0x2d0>
    780c:	1d 2d       	mov	r17, r13
    780e:	01 c0       	rjmp	.+2      	; 0x7812 <vfprintf+0x2d2>
    7810:	19 2d       	mov	r17, r9
    7812:	f4 fe       	sbrs	r15, 4
    7814:	0d c0       	rjmp	.+26     	; 0x7830 <vfprintf+0x2f0>
    7816:	fe 01       	movw	r30, r28
    7818:	ed 0d       	add	r30, r13
    781a:	f1 1d       	adc	r31, r1
    781c:	80 81       	ld	r24, Z
    781e:	80 33       	cpi	r24, 0x30	; 48
    7820:	19 f4       	brne	.+6      	; 0x7828 <vfprintf+0x2e8>
    7822:	99 ee       	ldi	r25, 0xE9	; 233
    7824:	f9 22       	and	r15, r25
    7826:	08 c0       	rjmp	.+16     	; 0x7838 <vfprintf+0x2f8>
    7828:	1f 5f       	subi	r17, 0xFF	; 255
    782a:	f2 fe       	sbrs	r15, 2
    782c:	05 c0       	rjmp	.+10     	; 0x7838 <vfprintf+0x2f8>
    782e:	03 c0       	rjmp	.+6      	; 0x7836 <vfprintf+0x2f6>
    7830:	8f 2d       	mov	r24, r15
    7832:	86 78       	andi	r24, 0x86	; 134
    7834:	09 f0       	breq	.+2      	; 0x7838 <vfprintf+0x2f8>
    7836:	1f 5f       	subi	r17, 0xFF	; 255
    7838:	0f 2d       	mov	r16, r15
    783a:	f3 fc       	sbrc	r15, 3
    783c:	14 c0       	rjmp	.+40     	; 0x7866 <vfprintf+0x326>
    783e:	f0 fe       	sbrs	r15, 0
    7840:	0f c0       	rjmp	.+30     	; 0x7860 <vfprintf+0x320>
    7842:	1e 15       	cp	r17, r14
    7844:	10 f0       	brcs	.+4      	; 0x784a <vfprintf+0x30a>
    7846:	9d 2c       	mov	r9, r13
    7848:	0b c0       	rjmp	.+22     	; 0x7860 <vfprintf+0x320>
    784a:	9d 2c       	mov	r9, r13
    784c:	9e 0c       	add	r9, r14
    784e:	91 1a       	sub	r9, r17
    7850:	1e 2d       	mov	r17, r14
    7852:	06 c0       	rjmp	.+12     	; 0x7860 <vfprintf+0x320>
    7854:	80 e2       	ldi	r24, 0x20	; 32
    7856:	90 e0       	ldi	r25, 0x00	; 0
    7858:	b3 01       	movw	r22, r6
    785a:	0e 94 93 3c 	call	0x7926	; 0x7926 <fputc>
    785e:	1f 5f       	subi	r17, 0xFF	; 255
    7860:	1e 15       	cp	r17, r14
    7862:	c0 f3       	brcs	.-16     	; 0x7854 <vfprintf+0x314>
    7864:	04 c0       	rjmp	.+8      	; 0x786e <vfprintf+0x32e>
    7866:	1e 15       	cp	r17, r14
    7868:	10 f4       	brcc	.+4      	; 0x786e <vfprintf+0x32e>
    786a:	e1 1a       	sub	r14, r17
    786c:	01 c0       	rjmp	.+2      	; 0x7870 <vfprintf+0x330>
    786e:	ee 24       	eor	r14, r14
    7870:	04 ff       	sbrs	r16, 4
    7872:	0f c0       	rjmp	.+30     	; 0x7892 <vfprintf+0x352>
    7874:	80 e3       	ldi	r24, 0x30	; 48
    7876:	90 e0       	ldi	r25, 0x00	; 0
    7878:	b3 01       	movw	r22, r6
    787a:	0e 94 93 3c 	call	0x7926	; 0x7926 <fputc>
    787e:	02 ff       	sbrs	r16, 2
    7880:	1d c0       	rjmp	.+58     	; 0x78bc <vfprintf+0x37c>
    7882:	01 fd       	sbrc	r16, 1
    7884:	03 c0       	rjmp	.+6      	; 0x788c <vfprintf+0x34c>
    7886:	88 e7       	ldi	r24, 0x78	; 120
    7888:	90 e0       	ldi	r25, 0x00	; 0
    788a:	0e c0       	rjmp	.+28     	; 0x78a8 <vfprintf+0x368>
    788c:	88 e5       	ldi	r24, 0x58	; 88
    788e:	90 e0       	ldi	r25, 0x00	; 0
    7890:	0b c0       	rjmp	.+22     	; 0x78a8 <vfprintf+0x368>
    7892:	80 2f       	mov	r24, r16
    7894:	86 78       	andi	r24, 0x86	; 134
    7896:	91 f0       	breq	.+36     	; 0x78bc <vfprintf+0x37c>
    7898:	01 ff       	sbrs	r16, 1
    789a:	02 c0       	rjmp	.+4      	; 0x78a0 <vfprintf+0x360>
    789c:	8b e2       	ldi	r24, 0x2B	; 43
    789e:	01 c0       	rjmp	.+2      	; 0x78a2 <vfprintf+0x362>
    78a0:	80 e2       	ldi	r24, 0x20	; 32
    78a2:	f7 fc       	sbrc	r15, 7
    78a4:	8d e2       	ldi	r24, 0x2D	; 45
    78a6:	90 e0       	ldi	r25, 0x00	; 0
    78a8:	b3 01       	movw	r22, r6
    78aa:	0e 94 93 3c 	call	0x7926	; 0x7926 <fputc>
    78ae:	06 c0       	rjmp	.+12     	; 0x78bc <vfprintf+0x37c>
    78b0:	80 e3       	ldi	r24, 0x30	; 48
    78b2:	90 e0       	ldi	r25, 0x00	; 0
    78b4:	b3 01       	movw	r22, r6
    78b6:	0e 94 93 3c 	call	0x7926	; 0x7926 <fputc>
    78ba:	9a 94       	dec	r9
    78bc:	d9 14       	cp	r13, r9
    78be:	c0 f3       	brcs	.-16     	; 0x78b0 <vfprintf+0x370>
    78c0:	da 94       	dec	r13
    78c2:	f1 01       	movw	r30, r2
    78c4:	ed 0d       	add	r30, r13
    78c6:	f1 1d       	adc	r31, r1
    78c8:	80 81       	ld	r24, Z
    78ca:	90 e0       	ldi	r25, 0x00	; 0
    78cc:	b3 01       	movw	r22, r6
    78ce:	0e 94 93 3c 	call	0x7926	; 0x7926 <fputc>
    78d2:	dd 20       	and	r13, r13
    78d4:	a9 f7       	brne	.-22     	; 0x78c0 <vfprintf+0x380>
    78d6:	06 c0       	rjmp	.+12     	; 0x78e4 <vfprintf+0x3a4>
    78d8:	80 e2       	ldi	r24, 0x20	; 32
    78da:	90 e0       	ldi	r25, 0x00	; 0
    78dc:	b3 01       	movw	r22, r6
    78de:	0e 94 93 3c 	call	0x7926	; 0x7926 <fputc>
    78e2:	ea 94       	dec	r14
    78e4:	ee 20       	and	r14, r14
    78e6:	c1 f7       	brne	.-16     	; 0x78d8 <vfprintf+0x398>
    78e8:	43 ce       	rjmp	.-890    	; 0x7570 <vfprintf+0x30>
    78ea:	f3 01       	movw	r30, r6
    78ec:	66 81       	ldd	r22, Z+6	; 0x06
    78ee:	77 81       	ldd	r23, Z+7	; 0x07
    78f0:	cb 01       	movw	r24, r22
    78f2:	2b 96       	adiw	r28, 0x0b	; 11
    78f4:	e2 e1       	ldi	r30, 0x12	; 18
    78f6:	0c 94 61 3a 	jmp	0x74c2	; 0x74c2 <__epilogue_restores__>

000078fa <strnlen_P>:
    78fa:	fc 01       	movw	r30, r24
    78fc:	05 90       	lpm	r0, Z+
    78fe:	61 50       	subi	r22, 0x01	; 1
    7900:	70 40       	sbci	r23, 0x00	; 0
    7902:	01 10       	cpse	r0, r1
    7904:	d8 f7       	brcc	.-10     	; 0x78fc <strnlen_P+0x2>
    7906:	80 95       	com	r24
    7908:	90 95       	com	r25
    790a:	8e 0f       	add	r24, r30
    790c:	9f 1f       	adc	r25, r31
    790e:	08 95       	ret

00007910 <strnlen>:
    7910:	fc 01       	movw	r30, r24
    7912:	61 50       	subi	r22, 0x01	; 1
    7914:	70 40       	sbci	r23, 0x00	; 0
    7916:	01 90       	ld	r0, Z+
    7918:	01 10       	cpse	r0, r1
    791a:	d8 f7       	brcc	.-10     	; 0x7912 <strnlen+0x2>
    791c:	80 95       	com	r24
    791e:	90 95       	com	r25
    7920:	8e 0f       	add	r24, r30
    7922:	9f 1f       	adc	r25, r31
    7924:	08 95       	ret

00007926 <fputc>:
    7926:	0f 93       	push	r16
    7928:	1f 93       	push	r17
    792a:	cf 93       	push	r28
    792c:	df 93       	push	r29
    792e:	8c 01       	movw	r16, r24
    7930:	eb 01       	movw	r28, r22
    7932:	8b 81       	ldd	r24, Y+3	; 0x03
    7934:	81 ff       	sbrs	r24, 1
    7936:	1b c0       	rjmp	.+54     	; 0x796e <fputc+0x48>
    7938:	82 ff       	sbrs	r24, 2
    793a:	0d c0       	rjmp	.+26     	; 0x7956 <fputc+0x30>
    793c:	2e 81       	ldd	r18, Y+6	; 0x06
    793e:	3f 81       	ldd	r19, Y+7	; 0x07
    7940:	8c 81       	ldd	r24, Y+4	; 0x04
    7942:	9d 81       	ldd	r25, Y+5	; 0x05
    7944:	28 17       	cp	r18, r24
    7946:	39 07       	cpc	r19, r25
    7948:	64 f4       	brge	.+24     	; 0x7962 <fputc+0x3c>
    794a:	e8 81       	ld	r30, Y
    794c:	f9 81       	ldd	r31, Y+1	; 0x01
    794e:	01 93       	st	Z+, r16
    7950:	f9 83       	std	Y+1, r31	; 0x01
    7952:	e8 83       	st	Y, r30
    7954:	06 c0       	rjmp	.+12     	; 0x7962 <fputc+0x3c>
    7956:	e8 85       	ldd	r30, Y+8	; 0x08
    7958:	f9 85       	ldd	r31, Y+9	; 0x09
    795a:	80 2f       	mov	r24, r16
    795c:	09 95       	icall
    795e:	89 2b       	or	r24, r25
    7960:	31 f4       	brne	.+12     	; 0x796e <fputc+0x48>
    7962:	8e 81       	ldd	r24, Y+6	; 0x06
    7964:	9f 81       	ldd	r25, Y+7	; 0x07
    7966:	01 96       	adiw	r24, 0x01	; 1
    7968:	9f 83       	std	Y+7, r25	; 0x07
    796a:	8e 83       	std	Y+6, r24	; 0x06
    796c:	02 c0       	rjmp	.+4      	; 0x7972 <fputc+0x4c>
    796e:	0f ef       	ldi	r16, 0xFF	; 255
    7970:	1f ef       	ldi	r17, 0xFF	; 255
    7972:	c8 01       	movw	r24, r16
    7974:	df 91       	pop	r29
    7976:	cf 91       	pop	r28
    7978:	1f 91       	pop	r17
    797a:	0f 91       	pop	r16
    797c:	08 95       	ret

0000797e <__ultoa_invert>:
    797e:	fa 01       	movw	r30, r20
    7980:	aa 27       	eor	r26, r26
    7982:	28 30       	cpi	r18, 0x08	; 8
    7984:	51 f1       	breq	.+84     	; 0x79da <__ultoa_invert+0x5c>
    7986:	20 31       	cpi	r18, 0x10	; 16
    7988:	81 f1       	breq	.+96     	; 0x79ea <__ultoa_invert+0x6c>
    798a:	e8 94       	clt
    798c:	6f 93       	push	r22
    798e:	6e 7f       	andi	r22, 0xFE	; 254
    7990:	6e 5f       	subi	r22, 0xFE	; 254
    7992:	7f 4f       	sbci	r23, 0xFF	; 255
    7994:	8f 4f       	sbci	r24, 0xFF	; 255
    7996:	9f 4f       	sbci	r25, 0xFF	; 255
    7998:	af 4f       	sbci	r26, 0xFF	; 255
    799a:	b1 e0       	ldi	r27, 0x01	; 1
    799c:	3e d0       	rcall	.+124    	; 0x7a1a <__ultoa_invert+0x9c>
    799e:	b4 e0       	ldi	r27, 0x04	; 4
    79a0:	3c d0       	rcall	.+120    	; 0x7a1a <__ultoa_invert+0x9c>
    79a2:	67 0f       	add	r22, r23
    79a4:	78 1f       	adc	r23, r24
    79a6:	89 1f       	adc	r24, r25
    79a8:	9a 1f       	adc	r25, r26
    79aa:	a1 1d       	adc	r26, r1
    79ac:	68 0f       	add	r22, r24
    79ae:	79 1f       	adc	r23, r25
    79b0:	8a 1f       	adc	r24, r26
    79b2:	91 1d       	adc	r25, r1
    79b4:	a1 1d       	adc	r26, r1
    79b6:	6a 0f       	add	r22, r26
    79b8:	71 1d       	adc	r23, r1
    79ba:	81 1d       	adc	r24, r1
    79bc:	91 1d       	adc	r25, r1
    79be:	a1 1d       	adc	r26, r1
    79c0:	20 d0       	rcall	.+64     	; 0x7a02 <__ultoa_invert+0x84>
    79c2:	09 f4       	brne	.+2      	; 0x79c6 <__ultoa_invert+0x48>
    79c4:	68 94       	set
    79c6:	3f 91       	pop	r19
    79c8:	2a e0       	ldi	r18, 0x0A	; 10
    79ca:	26 9f       	mul	r18, r22
    79cc:	11 24       	eor	r1, r1
    79ce:	30 19       	sub	r19, r0
    79d0:	30 5d       	subi	r19, 0xD0	; 208
    79d2:	31 93       	st	Z+, r19
    79d4:	de f6       	brtc	.-74     	; 0x798c <__ultoa_invert+0xe>
    79d6:	cf 01       	movw	r24, r30
    79d8:	08 95       	ret
    79da:	46 2f       	mov	r20, r22
    79dc:	47 70       	andi	r20, 0x07	; 7
    79de:	40 5d       	subi	r20, 0xD0	; 208
    79e0:	41 93       	st	Z+, r20
    79e2:	b3 e0       	ldi	r27, 0x03	; 3
    79e4:	0f d0       	rcall	.+30     	; 0x7a04 <__ultoa_invert+0x86>
    79e6:	c9 f7       	brne	.-14     	; 0x79da <__ultoa_invert+0x5c>
    79e8:	f6 cf       	rjmp	.-20     	; 0x79d6 <__ultoa_invert+0x58>
    79ea:	46 2f       	mov	r20, r22
    79ec:	4f 70       	andi	r20, 0x0F	; 15
    79ee:	40 5d       	subi	r20, 0xD0	; 208
    79f0:	4a 33       	cpi	r20, 0x3A	; 58
    79f2:	18 f0       	brcs	.+6      	; 0x79fa <__ultoa_invert+0x7c>
    79f4:	49 5d       	subi	r20, 0xD9	; 217
    79f6:	31 fd       	sbrc	r19, 1
    79f8:	40 52       	subi	r20, 0x20	; 32
    79fa:	41 93       	st	Z+, r20
    79fc:	02 d0       	rcall	.+4      	; 0x7a02 <__ultoa_invert+0x84>
    79fe:	a9 f7       	brne	.-22     	; 0x79ea <__ultoa_invert+0x6c>
    7a00:	ea cf       	rjmp	.-44     	; 0x79d6 <__ultoa_invert+0x58>
    7a02:	b4 e0       	ldi	r27, 0x04	; 4
    7a04:	a6 95       	lsr	r26
    7a06:	97 95       	ror	r25
    7a08:	87 95       	ror	r24
    7a0a:	77 95       	ror	r23
    7a0c:	67 95       	ror	r22
    7a0e:	ba 95       	dec	r27
    7a10:	c9 f7       	brne	.-14     	; 0x7a04 <__ultoa_invert+0x86>
    7a12:	00 97       	sbiw	r24, 0x00	; 0
    7a14:	61 05       	cpc	r22, r1
    7a16:	71 05       	cpc	r23, r1
    7a18:	08 95       	ret
    7a1a:	9b 01       	movw	r18, r22
    7a1c:	ac 01       	movw	r20, r24
    7a1e:	0a 2e       	mov	r0, r26
    7a20:	06 94       	lsr	r0
    7a22:	57 95       	ror	r21
    7a24:	47 95       	ror	r20
    7a26:	37 95       	ror	r19
    7a28:	27 95       	ror	r18
    7a2a:	ba 95       	dec	r27
    7a2c:	c9 f7       	brne	.-14     	; 0x7a20 <__ultoa_invert+0xa2>
    7a2e:	62 0f       	add	r22, r18
    7a30:	73 1f       	adc	r23, r19
    7a32:	84 1f       	adc	r24, r20
    7a34:	95 1f       	adc	r25, r21
    7a36:	a0 1d       	adc	r26, r0
    7a38:	08 95       	ret

00007a3a <_exit>:
    7a3a:	f8 94       	cli

00007a3c <__stop_program>:
    7a3c:	ff cf       	rjmp	.-2      	; 0x7a3c <__stop_program>
