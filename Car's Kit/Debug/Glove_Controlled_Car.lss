
Glove_Controlled_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00004e96  00004f2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008001a2  008001a2  0000506c  2**0
                  ALLOC
  3 .stab         00004308  00000000  00000000  0000506c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000280b  00000000  00000000  00009374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000bb7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000bd1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000bf11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000e31c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000f6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010878  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00010d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001169c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__vector_11>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__vector_13>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e6 e9       	ldi	r30, 0x96	; 150
     162:	fe e4       	ldi	r31, 0x4E	; 78
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a2 3a       	cpi	r26, 0xA2	; 162
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a2 ea       	ldi	r26, 0xA2	; 162
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a6 3b       	cpi	r26, 0xB6	; 182
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 cb 09 	call	0x1396	; 0x1396 <main>
     184:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 16 22 	jmp	0x442c	; 0x442c <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	aa e9       	ldi	r26, 0x9A	; 154
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 22 22 	jmp	0x4444	; 0x4444 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 3e 22 	jmp	0x447c	; 0x447c <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 22 22 	jmp	0x4444	; 0x4444 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 3e 22 	jmp	0x447c	; 0x447c <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 16 22 	jmp	0x442c	; 0x442c <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8a e9       	ldi	r24, 0x9A	; 154
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 1e 22 	jmp	0x443c	; 0x443c <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6a e9       	ldi	r22, 0x9A	; 154
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 3a 22 	jmp	0x4474	; 0x4474 <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 22 22 	jmp	0x4444	; 0x4444 <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 3e 22 	jmp	0x447c	; 0x447c <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 22 22 	jmp	0x4444	; 0x4444 <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 3e 22 	jmp	0x447c	; 0x447c <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 22 22 	jmp	0x4444	; 0x4444 <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 3e 22 	jmp	0x447c	; 0x447c <__epilogue_restores__+0x18>

000009a4 <__fixsfsi>:
     9a4:	ac e0       	ldi	r26, 0x0C	; 12
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 26 22 	jmp	0x444c	; 0x444c <__prologue_saves__+0x20>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	be 01       	movw	r22, r28
     9be:	6b 5f       	subi	r22, 0xFB	; 251
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	61 f1       	breq	.+88     	; 0xa24 <__fixsfsi+0x80>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f1       	brcs	.+84     	; 0xa24 <__fixsfsi+0x80>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__fixsfsi+0x38>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	88 23       	and	r24, r24
     9d8:	51 f1       	breq	.+84     	; 0xa2e <__fixsfsi+0x8a>
     9da:	2e c0       	rjmp	.+92     	; 0xa38 <__fixsfsi+0x94>
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	37 fd       	sbrc	r19, 7
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__fixsfsi+0x80>
     9e4:	6e 81       	ldd	r22, Y+6	; 0x06
     9e6:	2f 31       	cpi	r18, 0x1F	; 31
     9e8:	31 05       	cpc	r19, r1
     9ea:	1c f0       	brlt	.+6      	; 0x9f2 <__fixsfsi+0x4e>
     9ec:	66 23       	and	r22, r22
     9ee:	f9 f0       	breq	.+62     	; 0xa2e <__fixsfsi+0x8a>
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <__fixsfsi+0x94>
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	29 85       	ldd	r18, Y+9	; 0x09
     9fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     a00:	5c 85       	ldd	r21, Y+12	; 0x0c
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fixsfsi+0x68>
     a04:	56 95       	lsr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	8a 95       	dec	r24
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__fixsfsi+0x60>
     a10:	66 23       	and	r22, r22
     a12:	b1 f0       	breq	.+44     	; 0xa40 <__fixsfsi+0x9c>
     a14:	50 95       	com	r21
     a16:	40 95       	com	r20
     a18:	30 95       	com	r19
     a1a:	21 95       	neg	r18
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__fixsfsi+0x9c>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <__fixsfsi+0x9c>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f e7       	ldi	r21, 0x7F	; 127
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__fixsfsi+0x9c>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e8       	ldi	r21, 0x80	; 128
     a40:	b9 01       	movw	r22, r18
     a42:	ca 01       	movw	r24, r20
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 42 22 	jmp	0x4484	; 0x4484 <__epilogue_restores__+0x20>

00000a4c <__floatunsisf>:
     a4c:	a8 e0       	ldi	r26, 0x08	; 8
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	ec e2       	ldi	r30, 0x2C	; 44
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	0c 94 1e 22 	jmp	0x443c	; 0x443c <__prologue_saves__+0x10>
     a58:	7b 01       	movw	r14, r22
     a5a:	8c 01       	movw	r16, r24
     a5c:	61 15       	cp	r22, r1
     a5e:	71 05       	cpc	r23, r1
     a60:	81 05       	cpc	r24, r1
     a62:	91 05       	cpc	r25, r1
     a64:	19 f4       	brne	.+6      	; 0xa6c <__floatunsisf+0x20>
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	60 c0       	rjmp	.+192    	; 0xb2c <__floatunsisf+0xe0>
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	c8 2e       	mov	r12, r24
     a74:	d1 2c       	mov	r13, r1
     a76:	dc 82       	std	Y+4, r13	; 0x04
     a78:	cb 82       	std	Y+3, r12	; 0x03
     a7a:	ed 82       	std	Y+5, r14	; 0x05
     a7c:	fe 82       	std	Y+6, r15	; 0x06
     a7e:	0f 83       	std	Y+7, r16	; 0x07
     a80:	18 87       	std	Y+8, r17	; 0x08
     a82:	c8 01       	movw	r24, r16
     a84:	b7 01       	movw	r22, r14
     a86:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__clzsi2>
     a8a:	fc 01       	movw	r30, r24
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	f7 ff       	sbrs	r31, 7
     a90:	3b c0       	rjmp	.+118    	; 0xb08 <__floatunsisf+0xbc>
     a92:	22 27       	eor	r18, r18
     a94:	33 27       	eor	r19, r19
     a96:	2e 1b       	sub	r18, r30
     a98:	3f 0b       	sbc	r19, r31
     a9a:	57 01       	movw	r10, r14
     a9c:	68 01       	movw	r12, r16
     a9e:	02 2e       	mov	r0, r18
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__floatunsisf+0x5e>
     aa2:	d6 94       	lsr	r13
     aa4:	c7 94       	ror	r12
     aa6:	b7 94       	ror	r11
     aa8:	a7 94       	ror	r10
     aaa:	0a 94       	dec	r0
     aac:	d2 f7       	brpl	.-12     	; 0xaa2 <__floatunsisf+0x56>
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__floatunsisf+0x7c>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	2a 95       	dec	r18
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__floatunsisf+0x74>
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	a1 09       	sbc	r26, r1
     ad0:	b1 09       	sbc	r27, r1
     ad2:	8e 21       	and	r24, r14
     ad4:	9f 21       	and	r25, r15
     ad6:	a0 23       	and	r26, r16
     ad8:	b1 23       	and	r27, r17
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	a1 05       	cpc	r26, r1
     ade:	b1 05       	cpc	r27, r1
     ae0:	21 f0       	breq	.+8      	; 0xaea <__floatunsisf+0x9e>
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	4a 29       	or	r20, r10
     aec:	5b 29       	or	r21, r11
     aee:	6c 29       	or	r22, r12
     af0:	7d 29       	or	r23, r13
     af2:	4d 83       	std	Y+5, r20	; 0x05
     af4:	5e 83       	std	Y+6, r21	; 0x06
     af6:	6f 83       	std	Y+7, r22	; 0x07
     af8:	78 87       	std	Y+8, r23	; 0x08
     afa:	8e e1       	ldi	r24, 0x1E	; 30
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	8e 1b       	sub	r24, r30
     b00:	9f 0b       	sbc	r25, r31
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	12 c0       	rjmp	.+36     	; 0xb2c <__floatunsisf+0xe0>
     b08:	30 97       	sbiw	r30, 0x00	; 0
     b0a:	81 f0       	breq	.+32     	; 0xb2c <__floatunsisf+0xe0>
     b0c:	0e 2e       	mov	r0, r30
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__floatunsisf+0xcc>
     b10:	ee 0c       	add	r14, r14
     b12:	ff 1c       	adc	r15, r15
     b14:	00 1f       	adc	r16, r16
     b16:	11 1f       	adc	r17, r17
     b18:	0a 94       	dec	r0
     b1a:	d2 f7       	brpl	.-12     	; 0xb10 <__floatunsisf+0xc4>
     b1c:	ed 82       	std	Y+5, r14	; 0x05
     b1e:	fe 82       	std	Y+6, r15	; 0x06
     b20:	0f 83       	std	Y+7, r16	; 0x07
     b22:	18 87       	std	Y+8, r17	; 0x08
     b24:	ce 1a       	sub	r12, r30
     b26:	df 0a       	sbc	r13, r31
     b28:	dc 82       	std	Y+4, r13	; 0x04
     b2a:	cb 82       	std	Y+3, r12	; 0x03
     b2c:	1a 82       	std	Y+2, r1	; 0x02
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     b36:	28 96       	adiw	r28, 0x08	; 8
     b38:	ea e0       	ldi	r30, 0x0A	; 10
     b3a:	0c 94 3a 22 	jmp	0x4474	; 0x4474 <__epilogue_restores__+0x10>

00000b3e <__clzsi2>:
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	7b 01       	movw	r14, r22
     b48:	8c 01       	movw	r16, r24
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	e8 16       	cp	r14, r24
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	f8 06       	cpc	r15, r24
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 07       	cpc	r16, r24
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	18 07       	cpc	r17, r24
     b5a:	88 f4       	brcc	.+34     	; 0xb7e <__clzsi2+0x40>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	e8 16       	cp	r14, r24
     b60:	f1 04       	cpc	r15, r1
     b62:	01 05       	cpc	r16, r1
     b64:	11 05       	cpc	r17, r1
     b66:	31 f0       	breq	.+12     	; 0xb74 <__clzsi2+0x36>
     b68:	28 f0       	brcs	.+10     	; 0xb74 <__clzsi2+0x36>
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	17 c0       	rjmp	.+46     	; 0xba2 <__clzsi2+0x64>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <__clzsi2+0x64>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	e8 16       	cp	r14, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	f8 06       	cpc	r15, r24
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	08 07       	cpc	r16, r24
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	18 07       	cpc	r17, r24
     b8e:	28 f0       	brcs	.+10     	; 0xb9a <__clzsi2+0x5c>
     b90:	88 e1       	ldi	r24, 0x18	; 24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__clzsi2+0x64>
     b9a:	80 e1       	ldi	r24, 0x10	; 16
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	20 e2       	ldi	r18, 0x20	; 32
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	28 1b       	sub	r18, r24
     bac:	39 0b       	sbc	r19, r25
     bae:	4a 0b       	sbc	r20, r26
     bb0:	5b 0b       	sbc	r21, r27
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__clzsi2+0x7e>
     bb4:	16 95       	lsr	r17
     bb6:	07 95       	ror	r16
     bb8:	f7 94       	ror	r15
     bba:	e7 94       	ror	r14
     bbc:	8a 95       	dec	r24
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__clzsi2+0x76>
     bc0:	f7 01       	movw	r30, r14
     bc2:	ee 55       	subi	r30, 0x5E	; 94
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	80 81       	ld	r24, Z
     bc8:	28 1b       	sub	r18, r24
     bca:	31 09       	sbc	r19, r1
     bcc:	41 09       	sbc	r20, r1
     bce:	51 09       	sbc	r21, r1
     bd0:	c9 01       	movw	r24, r18
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	08 95       	ret

00000bdc <__pack_f>:
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	fc 01       	movw	r30, r24
     be8:	e4 80       	ldd	r14, Z+4	; 0x04
     bea:	f5 80       	ldd	r15, Z+5	; 0x05
     bec:	06 81       	ldd	r16, Z+6	; 0x06
     bee:	17 81       	ldd	r17, Z+7	; 0x07
     bf0:	d1 80       	ldd	r13, Z+1	; 0x01
     bf2:	80 81       	ld	r24, Z
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	48 f4       	brcc	.+18     	; 0xc0a <__pack_f+0x2e>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e1       	ldi	r26, 0x10	; 16
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e8 2a       	or	r14, r24
     c02:	f9 2a       	or	r15, r25
     c04:	0a 2b       	or	r16, r26
     c06:	1b 2b       	or	r17, r27
     c08:	a5 c0       	rjmp	.+330    	; 0xd54 <__pack_f+0x178>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	09 f4       	brne	.+2      	; 0xc10 <__pack_f+0x34>
     c0e:	9f c0       	rjmp	.+318    	; 0xd4e <__pack_f+0x172>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	21 f4       	brne	.+8      	; 0xc1c <__pack_f+0x40>
     c14:	ee 24       	eor	r14, r14
     c16:	ff 24       	eor	r15, r15
     c18:	87 01       	movw	r16, r14
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <__pack_f+0x4a>
     c1c:	e1 14       	cp	r14, r1
     c1e:	f1 04       	cpc	r15, r1
     c20:	01 05       	cpc	r16, r1
     c22:	11 05       	cpc	r17, r1
     c24:	19 f4       	brne	.+6      	; 0xc2c <__pack_f+0x50>
     c26:	e0 e0       	ldi	r30, 0x00	; 0
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	96 c0       	rjmp	.+300    	; 0xd58 <__pack_f+0x17c>
     c2c:	62 81       	ldd	r22, Z+2	; 0x02
     c2e:	73 81       	ldd	r23, Z+3	; 0x03
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	62 38       	cpi	r22, 0x82	; 130
     c34:	79 07       	cpc	r23, r25
     c36:	0c f0       	brlt	.+2      	; 0xc3a <__pack_f+0x5e>
     c38:	5b c0       	rjmp	.+182    	; 0xcf0 <__pack_f+0x114>
     c3a:	22 e8       	ldi	r18, 0x82	; 130
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	26 1b       	sub	r18, r22
     c40:	37 0b       	sbc	r19, r23
     c42:	2a 31       	cpi	r18, 0x1A	; 26
     c44:	31 05       	cpc	r19, r1
     c46:	2c f0       	brlt	.+10     	; 0xc52 <__pack_f+0x76>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	2a c0       	rjmp	.+84     	; 0xca6 <__pack_f+0xca>
     c52:	b8 01       	movw	r22, r16
     c54:	a7 01       	movw	r20, r14
     c56:	02 2e       	mov	r0, r18
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__pack_f+0x86>
     c5a:	76 95       	lsr	r23
     c5c:	67 95       	ror	r22
     c5e:	57 95       	ror	r21
     c60:	47 95       	ror	r20
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <__pack_f+0x7e>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__pack_f+0x9c>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	2a 95       	dec	r18
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__pack_f+0x94>
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	a1 09       	sbc	r26, r1
     c80:	b1 09       	sbc	r27, r1
     c82:	8e 21       	and	r24, r14
     c84:	9f 21       	and	r25, r15
     c86:	a0 23       	and	r26, r16
     c88:	b1 23       	and	r27, r17
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	a1 05       	cpc	r26, r1
     c8e:	b1 05       	cpc	r27, r1
     c90:	21 f0       	breq	.+8      	; 0xc9a <__pack_f+0xbe>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	9a 01       	movw	r18, r20
     c9c:	ab 01       	movw	r20, r22
     c9e:	28 2b       	or	r18, r24
     ca0:	39 2b       	or	r19, r25
     ca2:	4a 2b       	or	r20, r26
     ca4:	5b 2b       	or	r21, r27
     ca6:	da 01       	movw	r26, r20
     ca8:	c9 01       	movw	r24, r18
     caa:	8f 77       	andi	r24, 0x7F	; 127
     cac:	90 70       	andi	r25, 0x00	; 0
     cae:	a0 70       	andi	r26, 0x00	; 0
     cb0:	b0 70       	andi	r27, 0x00	; 0
     cb2:	80 34       	cpi	r24, 0x40	; 64
     cb4:	91 05       	cpc	r25, r1
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	39 f4       	brne	.+14     	; 0xcca <__pack_f+0xee>
     cbc:	27 ff       	sbrs	r18, 7
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <__pack_f+0xf6>
     cc0:	20 5c       	subi	r18, 0xC0	; 192
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	4f 4f       	sbci	r20, 0xFF	; 255
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__pack_f+0xf6>
     cca:	21 5c       	subi	r18, 0xC1	; 193
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	4f 4f       	sbci	r20, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	e0 e0       	ldi	r30, 0x00	; 0
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	3a 07       	cpc	r19, r26
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	4a 07       	cpc	r20, r26
     ce0:	a0 e4       	ldi	r26, 0x40	; 64
     ce2:	5a 07       	cpc	r21, r26
     ce4:	10 f0       	brcs	.+4      	; 0xcea <__pack_f+0x10e>
     ce6:	e1 e0       	ldi	r30, 0x01	; 1
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	79 01       	movw	r14, r18
     cec:	8a 01       	movw	r16, r20
     cee:	27 c0       	rjmp	.+78     	; 0xd3e <__pack_f+0x162>
     cf0:	60 38       	cpi	r22, 0x80	; 128
     cf2:	71 05       	cpc	r23, r1
     cf4:	64 f5       	brge	.+88     	; 0xd4e <__pack_f+0x172>
     cf6:	fb 01       	movw	r30, r22
     cf8:	e1 58       	subi	r30, 0x81	; 129
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	d8 01       	movw	r26, r16
     cfe:	c7 01       	movw	r24, r14
     d00:	8f 77       	andi	r24, 0x7F	; 127
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	a0 70       	andi	r26, 0x00	; 0
     d06:	b0 70       	andi	r27, 0x00	; 0
     d08:	80 34       	cpi	r24, 0x40	; 64
     d0a:	91 05       	cpc	r25, r1
     d0c:	a1 05       	cpc	r26, r1
     d0e:	b1 05       	cpc	r27, r1
     d10:	39 f4       	brne	.+14     	; 0xd20 <__pack_f+0x144>
     d12:	e7 fe       	sbrs	r14, 7
     d14:	0d c0       	rjmp	.+26     	; 0xd30 <__pack_f+0x154>
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__pack_f+0x14c>
     d20:	8f e3       	ldi	r24, 0x3F	; 63
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 0e       	add	r14, r24
     d2a:	f9 1e       	adc	r15, r25
     d2c:	0a 1f       	adc	r16, r26
     d2e:	1b 1f       	adc	r17, r27
     d30:	17 ff       	sbrs	r17, 7
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <__pack_f+0x162>
     d34:	16 95       	lsr	r17
     d36:	07 95       	ror	r16
     d38:	f7 94       	ror	r15
     d3a:	e7 94       	ror	r14
     d3c:	31 96       	adiw	r30, 0x01	; 1
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	16 95       	lsr	r17
     d42:	07 95       	ror	r16
     d44:	f7 94       	ror	r15
     d46:	e7 94       	ror	r14
     d48:	8a 95       	dec	r24
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__pack_f+0x164>
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <__pack_f+0x17c>
     d4e:	ee 24       	eor	r14, r14
     d50:	ff 24       	eor	r15, r15
     d52:	87 01       	movw	r16, r14
     d54:	ef ef       	ldi	r30, 0xFF	; 255
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	6e 2f       	mov	r22, r30
     d5a:	67 95       	ror	r22
     d5c:	66 27       	eor	r22, r22
     d5e:	67 95       	ror	r22
     d60:	90 2f       	mov	r25, r16
     d62:	9f 77       	andi	r25, 0x7F	; 127
     d64:	d7 94       	ror	r13
     d66:	dd 24       	eor	r13, r13
     d68:	d7 94       	ror	r13
     d6a:	8e 2f       	mov	r24, r30
     d6c:	86 95       	lsr	r24
     d6e:	49 2f       	mov	r20, r25
     d70:	46 2b       	or	r20, r22
     d72:	58 2f       	mov	r21, r24
     d74:	5d 29       	or	r21, r13
     d76:	b7 01       	movw	r22, r14
     d78:	ca 01       	movw	r24, r20
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	08 95       	ret

00000d86 <__unpack_f>:
     d86:	fc 01       	movw	r30, r24
     d88:	db 01       	movw	r26, r22
     d8a:	40 81       	ld	r20, Z
     d8c:	51 81       	ldd	r21, Z+1	; 0x01
     d8e:	22 81       	ldd	r18, Z+2	; 0x02
     d90:	62 2f       	mov	r22, r18
     d92:	6f 77       	andi	r22, 0x7F	; 127
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	22 1f       	adc	r18, r18
     d98:	22 27       	eor	r18, r18
     d9a:	22 1f       	adc	r18, r18
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	89 2f       	mov	r24, r25
     da0:	88 0f       	add	r24, r24
     da2:	82 2b       	or	r24, r18
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	99 1f       	adc	r25, r25
     daa:	99 27       	eor	r25, r25
     dac:	99 1f       	adc	r25, r25
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	9c 93       	st	X, r25
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	a9 f5       	brne	.+106    	; 0xe24 <__unpack_f+0x9e>
     dba:	41 15       	cp	r20, r1
     dbc:	51 05       	cpc	r21, r1
     dbe:	61 05       	cpc	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <__unpack_f+0x42>
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	37 c0       	rjmp	.+110    	; 0xe36 <__unpack_f+0xb0>
     dc8:	82 e8       	ldi	r24, 0x82	; 130
     dca:	9f ef       	ldi	r25, 0xFF	; 255
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	9c 93       	st	X, r25
     dd0:	8e 93       	st	-X, r24
     dd2:	12 97       	sbiw	r26, 0x02	; 2
     dd4:	9a 01       	movw	r18, r20
     dd6:	ab 01       	movw	r20, r22
     dd8:	67 e0       	ldi	r22, 0x07	; 7
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	44 1f       	adc	r20, r20
     de0:	55 1f       	adc	r21, r21
     de2:	6a 95       	dec	r22
     de4:	d1 f7       	brne	.-12     	; 0xdda <__unpack_f+0x54>
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	8c 93       	st	X, r24
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <__unpack_f+0x80>
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	44 1f       	adc	r20, r20
     df2:	55 1f       	adc	r21, r21
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	8d 91       	ld	r24, X+
     df8:	9c 91       	ld	r25, X
     dfa:	13 97       	sbiw	r26, 0x03	; 3
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	9c 93       	st	X, r25
     e02:	8e 93       	st	-X, r24
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	20 30       	cpi	r18, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	38 07       	cpc	r19, r24
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	48 07       	cpc	r20, r24
     e10:	80 e4       	ldi	r24, 0x40	; 64
     e12:	58 07       	cpc	r21, r24
     e14:	58 f3       	brcs	.-42     	; 0xdec <__unpack_f+0x66>
     e16:	14 96       	adiw	r26, 0x04	; 4
     e18:	2d 93       	st	X+, r18
     e1a:	3d 93       	st	X+, r19
     e1c:	4d 93       	st	X+, r20
     e1e:	5c 93       	st	X, r21
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	08 95       	ret
     e24:	2f 3f       	cpi	r18, 0xFF	; 255
     e26:	31 05       	cpc	r19, r1
     e28:	79 f4       	brne	.+30     	; 0xe48 <__unpack_f+0xc2>
     e2a:	41 15       	cp	r20, r1
     e2c:	51 05       	cpc	r21, r1
     e2e:	61 05       	cpc	r22, r1
     e30:	71 05       	cpc	r23, r1
     e32:	19 f4       	brne	.+6      	; 0xe3a <__unpack_f+0xb4>
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	8c 93       	st	X, r24
     e38:	08 95       	ret
     e3a:	64 ff       	sbrs	r22, 4
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <__unpack_f+0xbe>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	8c 93       	st	X, r24
     e42:	12 c0       	rjmp	.+36     	; 0xe68 <__unpack_f+0xe2>
     e44:	1c 92       	st	X, r1
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <__unpack_f+0xe2>
     e48:	2f 57       	subi	r18, 0x7F	; 127
     e4a:	30 40       	sbci	r19, 0x00	; 0
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	3c 93       	st	X, r19
     e50:	2e 93       	st	-X, r18
     e52:	12 97       	sbiw	r26, 0x02	; 2
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	8c 93       	st	X, r24
     e58:	87 e0       	ldi	r24, 0x07	; 7
     e5a:	44 0f       	add	r20, r20
     e5c:	55 1f       	adc	r21, r21
     e5e:	66 1f       	adc	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	8a 95       	dec	r24
     e64:	d1 f7       	brne	.-12     	; 0xe5a <__unpack_f+0xd4>
     e66:	70 64       	ori	r23, 0x40	; 64
     e68:	14 96       	adiw	r26, 0x04	; 4
     e6a:	4d 93       	st	X+, r20
     e6c:	5d 93       	st	X+, r21
     e6e:	6d 93       	st	X+, r22
     e70:	7c 93       	st	X, r23
     e72:	17 97       	sbiw	r26, 0x07	; 7
     e74:	08 95       	ret

00000e76 <__fpcmp_parts_f>:
     e76:	1f 93       	push	r17
     e78:	dc 01       	movw	r26, r24
     e7a:	fb 01       	movw	r30, r22
     e7c:	9c 91       	ld	r25, X
     e7e:	92 30       	cpi	r25, 0x02	; 2
     e80:	08 f4       	brcc	.+2      	; 0xe84 <__fpcmp_parts_f+0xe>
     e82:	47 c0       	rjmp	.+142    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e84:	80 81       	ld	r24, Z
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	08 f4       	brcc	.+2      	; 0xe8c <__fpcmp_parts_f+0x16>
     e8a:	43 c0       	rjmp	.+134    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e8c:	94 30       	cpi	r25, 0x04	; 4
     e8e:	51 f4       	brne	.+20     	; 0xea4 <__fpcmp_parts_f+0x2e>
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	1c 91       	ld	r17, X
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	99 f5       	brne	.+102    	; 0xefe <__fpcmp_parts_f+0x88>
     e98:	81 81       	ldd	r24, Z+1	; 0x01
     e9a:	68 2f       	mov	r22, r24
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	61 1b       	sub	r22, r17
     ea0:	71 09       	sbc	r23, r1
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <__fpcmp_parts_f+0xac>
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <__fpcmp_parts_f+0x3a>
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <__fpcmp_parts_f+0x42>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	b9 f1       	breq	.+110    	; 0xf1e <__fpcmp_parts_f+0xa8>
     eb0:	81 81       	ldd	r24, Z+1	; 0x01
     eb2:	88 23       	and	r24, r24
     eb4:	89 f1       	breq	.+98     	; 0xf18 <__fpcmp_parts_f+0xa2>
     eb6:	2d c0       	rjmp	.+90     	; 0xf12 <__fpcmp_parts_f+0x9c>
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	1c 91       	ld	r17, X
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	f1 f0       	breq	.+60     	; 0xefe <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	18 17       	cp	r17, r24
     ec6:	d9 f4       	brne	.+54     	; 0xefe <__fpcmp_parts_f+0x88>
     ec8:	12 96       	adiw	r26, 0x02	; 2
     eca:	2d 91       	ld	r18, X+
     ecc:	3c 91       	ld	r19, X
     ece:	13 97       	sbiw	r26, 0x03	; 3
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	82 17       	cp	r24, r18
     ed6:	93 07       	cpc	r25, r19
     ed8:	94 f0       	brlt	.+36     	; 0xefe <__fpcmp_parts_f+0x88>
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	bc f0       	brlt	.+46     	; 0xf0e <__fpcmp_parts_f+0x98>
     ee0:	14 96       	adiw	r26, 0x04	; 4
     ee2:	8d 91       	ld	r24, X+
     ee4:	9d 91       	ld	r25, X+
     ee6:	0d 90       	ld	r0, X+
     ee8:	bc 91       	ld	r27, X
     eea:	a0 2d       	mov	r26, r0
     eec:	24 81       	ldd	r18, Z+4	; 0x04
     eee:	35 81       	ldd	r19, Z+5	; 0x05
     ef0:	46 81       	ldd	r20, Z+6	; 0x06
     ef2:	57 81       	ldd	r21, Z+7	; 0x07
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	4a 07       	cpc	r20, r26
     efa:	5b 07       	cpc	r21, r27
     efc:	18 f4       	brcc	.+6      	; 0xf04 <__fpcmp_parts_f+0x8e>
     efe:	11 23       	and	r17, r17
     f00:	41 f0       	breq	.+16     	; 0xf12 <__fpcmp_parts_f+0x9c>
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <__fpcmp_parts_f+0xa2>
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	a4 07       	cpc	r26, r20
     f0a:	b5 07       	cpc	r27, r21
     f0c:	40 f4       	brcc	.+16     	; 0xf1e <__fpcmp_parts_f+0xa8>
     f0e:	11 23       	and	r17, r17
     f10:	19 f0       	breq	.+6      	; 0xf18 <__fpcmp_parts_f+0xa2>
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <__fpcmp_parts_f+0xac>
     f18:	6f ef       	ldi	r22, 0xFF	; 255
     f1a:	7f ef       	ldi	r23, 0xFF	; 255
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <__fpcmp_parts_f+0xac>
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	cb 01       	movw	r24, r22
     f24:	1f 91       	pop	r17
     f26:	08 95       	ret

00000f28 <Forward>:
#define BRAKE						'x'
#define RIGHT						'd'
#define LEFT						'a'

void Forward(void)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	Forward_fullSpeed();
     f30:	0e 94 a0 07 	call	0xf40	; 0xf40 <Forward_fullSpeed>
	DC_Motor_voidAdjustSpeed(50);
     f34:	82 e3       	ldi	r24, 0x32	; 50
     f36:	0e 94 0b 10 	call	0x2016	; 0x2016 <DC_Motor_voidAdjustSpeed>
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <Forward_fullSpeed>:

void Forward_fullSpeed(void)
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
	DC_Motor_voidStart(MOTOR_A, CW);
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DC_Motor_voidStart>
	DC_Motor_voidStart(MOTOR_B, CW);
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DC_Motor_voidStart>
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <Backward>:

void Backward(void)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
	DC_Motor_voidStart(MOTOR_A, CCW);
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DC_Motor_voidStart>
	DC_Motor_voidStart(MOTOR_B, CCW);
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DC_Motor_voidStart>
}
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <Brake>:

void Brake(void)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	2e 97       	sbiw	r28, 0x0e	; 14
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
	DC_Motor_voidBrake(MOTOR_A);
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	0e 94 1f 10 	call	0x203e	; 0x203e <DC_Motor_voidBrake>
	DC_Motor_voidBrake(MOTOR_B);
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	0e 94 1f 10 	call	0x203e	; 0x203e <DC_Motor_voidBrake>
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	aa e7       	ldi	r26, 0x7A	; 122
     fa2:	b4 e4       	ldi	r27, 0x44	; 68
     fa4:	8b 87       	std	Y+11, r24	; 0x0b
     fa6:	9c 87       	std	Y+12, r25	; 0x0c
     fa8:	ad 87       	std	Y+13, r26	; 0x0d
     faa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fac:	6b 85       	ldd	r22, Y+11	; 0x0b
     fae:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	4a e7       	ldi	r20, 0x7A	; 122
     fba:	55 e4       	ldi	r21, 0x45	; 69
     fbc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	8f 83       	std	Y+7, r24	; 0x07
     fc6:	98 87       	std	Y+8, r25	; 0x08
     fc8:	a9 87       	std	Y+9, r26	; 0x09
     fca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	78 85       	ldd	r23, Y+8	; 0x08
     fd0:	89 85       	ldd	r24, Y+9	; 0x09
     fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e8       	ldi	r20, 0x80	; 128
     fda:	5f e3       	ldi	r21, 0x3F	; 63
     fdc:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
     fe0:	88 23       	and	r24, r24
     fe2:	2c f4       	brge	.+10     	; 0xfee <Brake+0x72>
		__ticks = 1;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9e 83       	std	Y+6, r25	; 0x06
     fea:	8d 83       	std	Y+5, r24	; 0x05
     fec:	3f c0       	rjmp	.+126    	; 0x106c <Brake+0xf0>
	else if (__tmp > 65535)
     fee:	6f 81       	ldd	r22, Y+7	; 0x07
     ff0:	78 85       	ldd	r23, Y+8	; 0x08
     ff2:	89 85       	ldd	r24, Y+9	; 0x09
     ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	3f ef       	ldi	r19, 0xFF	; 255
     ffa:	4f e7       	ldi	r20, 0x7F	; 127
     ffc:	57 e4       	ldi	r21, 0x47	; 71
     ffe:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1002:	18 16       	cp	r1, r24
    1004:	4c f5       	brge	.+82     	; 0x1058 <Brake+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1006:	6b 85       	ldd	r22, Y+11	; 0x0b
    1008:	7c 85       	ldd	r23, Y+12	; 0x0c
    100a:	8d 85       	ldd	r24, Y+13	; 0x0d
    100c:	9e 85       	ldd	r25, Y+14	; 0x0e
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e2       	ldi	r20, 0x20	; 32
    1014:	51 e4       	ldi	r21, 0x41	; 65
    1016:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	bc 01       	movw	r22, r24
    1020:	cd 01       	movw	r24, r26
    1022:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	9e 83       	std	Y+6, r25	; 0x06
    102c:	8d 83       	std	Y+5, r24	; 0x05
    102e:	0f c0       	rjmp	.+30     	; 0x104e <Brake+0xd2>
    1030:	80 e9       	ldi	r24, 0x90	; 144
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <Brake+0xc0>
    1040:	9c 83       	std	Y+4, r25	; 0x04
    1042:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	9e 83       	std	Y+6, r25	; 0x06
    104c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	69 f7       	brne	.-38     	; 0x1030 <Brake+0xb4>
    1056:	14 c0       	rjmp	.+40     	; 0x1080 <Brake+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1058:	6f 81       	ldd	r22, Y+7	; 0x07
    105a:	78 85       	ldd	r23, Y+8	; 0x08
    105c:	89 85       	ldd	r24, Y+9	; 0x09
    105e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1060:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <Brake+0xfc>
    107c:	9a 83       	std	Y+2, r25	; 0x02
    107e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);

	DC_Motor_voidStop(MOTOR_A);
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <DC_Motor_voidStop>
	DC_Motor_voidStop(MOTOR_B);
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <DC_Motor_voidStop>
}
    108c:	2e 96       	adiw	r28, 0x0e	; 14
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <Right>:

void Right(void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	2e 97       	sbiw	r28, 0x0e	; 14
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
	DC_Motor_voidStart(MOTOR_A, CCW);
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	61 e0       	ldi	r22, 0x01	; 1
    10b6:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DC_Motor_voidStart>
	DC_Motor_voidStart(MOTOR_B, CW);
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DC_Motor_voidStart>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a1 ee       	ldi	r26, 0xE1	; 225
    10c8:	b3 e4       	ldi	r27, 0x43	; 67
    10ca:	8b 87       	std	Y+11, r24	; 0x0b
    10cc:	9c 87       	std	Y+12, r25	; 0x0c
    10ce:	ad 87       	std	Y+13, r26	; 0x0d
    10d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	4a e7       	ldi	r20, 0x7A	; 122
    10e0:	55 e4       	ldi	r21, 0x45	; 69
    10e2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	8f 83       	std	Y+7, r24	; 0x07
    10ec:	98 87       	std	Y+8, r25	; 0x08
    10ee:	a9 87       	std	Y+9, r26	; 0x09
    10f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10f2:	6f 81       	ldd	r22, Y+7	; 0x07
    10f4:	78 85       	ldd	r23, Y+8	; 0x08
    10f6:	89 85       	ldd	r24, Y+9	; 0x09
    10f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e8       	ldi	r20, 0x80	; 128
    1100:	5f e3       	ldi	r21, 0x3F	; 63
    1102:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1106:	88 23       	and	r24, r24
    1108:	2c f4       	brge	.+10     	; 0x1114 <Right+0x76>
		__ticks = 1;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	9e 83       	std	Y+6, r25	; 0x06
    1110:	8d 83       	std	Y+5, r24	; 0x05
    1112:	3f c0       	rjmp	.+126    	; 0x1192 <Right+0xf4>
	else if (__tmp > 65535)
    1114:	6f 81       	ldd	r22, Y+7	; 0x07
    1116:	78 85       	ldd	r23, Y+8	; 0x08
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	9a 85       	ldd	r25, Y+10	; 0x0a
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	3f ef       	ldi	r19, 0xFF	; 255
    1120:	4f e7       	ldi	r20, 0x7F	; 127
    1122:	57 e4       	ldi	r21, 0x47	; 71
    1124:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1128:	18 16       	cp	r1, r24
    112a:	4c f5       	brge	.+82     	; 0x117e <Right+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    112c:	6b 85       	ldd	r22, Y+11	; 0x0b
    112e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1130:	8d 85       	ldd	r24, Y+13	; 0x0d
    1132:	9e 85       	ldd	r25, Y+14	; 0x0e
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e2       	ldi	r20, 0x20	; 32
    113a:	51 e4       	ldi	r21, 0x41	; 65
    113c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	bc 01       	movw	r22, r24
    1146:	cd 01       	movw	r24, r26
    1148:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9e 83       	std	Y+6, r25	; 0x06
    1152:	8d 83       	std	Y+5, r24	; 0x05
    1154:	0f c0       	rjmp	.+30     	; 0x1174 <Right+0xd6>
    1156:	80 e9       	ldi	r24, 0x90	; 144
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	9c 83       	std	Y+4, r25	; 0x04
    115c:	8b 83       	std	Y+3, r24	; 0x03
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <Right+0xc4>
    1166:	9c 83       	std	Y+4, r25	; 0x04
    1168:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	9e 83       	std	Y+6, r25	; 0x06
    1172:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1174:	8d 81       	ldd	r24, Y+5	; 0x05
    1176:	9e 81       	ldd	r25, Y+6	; 0x06
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	69 f7       	brne	.-38     	; 0x1156 <Right+0xb8>
    117c:	14 c0       	rjmp	.+40     	; 0x11a6 <Right+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117e:	6f 81       	ldd	r22, Y+7	; 0x07
    1180:	78 85       	ldd	r23, Y+8	; 0x08
    1182:	89 85       	ldd	r24, Y+9	; 0x09
    1184:	9a 85       	ldd	r25, Y+10	; 0x0a
    1186:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	9e 83       	std	Y+6, r25	; 0x06
    1190:	8d 83       	std	Y+5, r24	; 0x05
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	9a 83       	std	Y+2, r25	; 0x02
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <Right+0x100>
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(450);

	Brake();
    11a6:	0e 94 be 07 	call	0xf7c	; 0xf7c <Brake>
	//Forward_fullSpeed();
}
    11aa:	2e 96       	adiw	r28, 0x0e	; 14
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <Left>:

void Left(void)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	2e 97       	sbiw	r28, 0x0e	; 14
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
	DC_Motor_voidStart(MOTOR_A, CW);
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DC_Motor_voidStart>
	DC_Motor_voidStart(MOTOR_B, CCW);
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DC_Motor_voidStart>
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e8       	ldi	r25, 0x80	; 128
    11e4:	ab e3       	ldi	r26, 0x3B	; 59
    11e6:	b4 e4       	ldi	r27, 0x44	; 68
    11e8:	8b 87       	std	Y+11, r24	; 0x0b
    11ea:	9c 87       	std	Y+12, r25	; 0x0c
    11ec:	ad 87       	std	Y+13, r26	; 0x0d
    11ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	4a e7       	ldi	r20, 0x7A	; 122
    11fe:	55 e4       	ldi	r21, 0x45	; 69
    1200:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	8f 83       	std	Y+7, r24	; 0x07
    120a:	98 87       	std	Y+8, r25	; 0x08
    120c:	a9 87       	std	Y+9, r26	; 0x09
    120e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1210:	6f 81       	ldd	r22, Y+7	; 0x07
    1212:	78 85       	ldd	r23, Y+8	; 0x08
    1214:	89 85       	ldd	r24, Y+9	; 0x09
    1216:	9a 85       	ldd	r25, Y+10	; 0x0a
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e8       	ldi	r20, 0x80	; 128
    121e:	5f e3       	ldi	r21, 0x3F	; 63
    1220:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1224:	88 23       	and	r24, r24
    1226:	2c f4       	brge	.+10     	; 0x1232 <Left+0x76>
		__ticks = 1;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	9e 83       	std	Y+6, r25	; 0x06
    122e:	8d 83       	std	Y+5, r24	; 0x05
    1230:	3f c0       	rjmp	.+126    	; 0x12b0 <Left+0xf4>
	else if (__tmp > 65535)
    1232:	6f 81       	ldd	r22, Y+7	; 0x07
    1234:	78 85       	ldd	r23, Y+8	; 0x08
    1236:	89 85       	ldd	r24, Y+9	; 0x09
    1238:	9a 85       	ldd	r25, Y+10	; 0x0a
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	3f ef       	ldi	r19, 0xFF	; 255
    123e:	4f e7       	ldi	r20, 0x7F	; 127
    1240:	57 e4       	ldi	r21, 0x47	; 71
    1242:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1246:	18 16       	cp	r1, r24
    1248:	4c f5       	brge	.+82     	; 0x129c <Left+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124a:	6b 85       	ldd	r22, Y+11	; 0x0b
    124c:	7c 85       	ldd	r23, Y+12	; 0x0c
    124e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1250:	9e 85       	ldd	r25, Y+14	; 0x0e
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e2       	ldi	r20, 0x20	; 32
    1258:	51 e4       	ldi	r21, 0x41	; 65
    125a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	9e 83       	std	Y+6, r25	; 0x06
    1270:	8d 83       	std	Y+5, r24	; 0x05
    1272:	0f c0       	rjmp	.+30     	; 0x1292 <Left+0xd6>
    1274:	80 e9       	ldi	r24, 0x90	; 144
    1276:	91 e0       	ldi	r25, 0x01	; 1
    1278:	9c 83       	std	Y+4, r25	; 0x04
    127a:	8b 83       	std	Y+3, r24	; 0x03
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	f1 f7       	brne	.-4      	; 0x1280 <Left+0xc4>
    1284:	9c 83       	std	Y+4, r25	; 0x04
    1286:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	9e 81       	ldd	r25, Y+6	; 0x06
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	9e 83       	std	Y+6, r25	; 0x06
    1290:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	69 f7       	brne	.-38     	; 0x1274 <Left+0xb8>
    129a:	14 c0       	rjmp	.+40     	; 0x12c4 <Left+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129c:	6f 81       	ldd	r22, Y+7	; 0x07
    129e:	78 85       	ldd	r23, Y+8	; 0x08
    12a0:	89 85       	ldd	r24, Y+9	; 0x09
    12a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	9e 81       	ldd	r25, Y+6	; 0x06
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <Left+0x100>
    12c0:	9a 83       	std	Y+2, r25	; 0x02
    12c2:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(750);

	Brake();
    12c4:	0e 94 be 07 	call	0xf7c	; 0xf7c <Brake>
	//Forward_fullSpeed();
}
    12c8:	2e 96       	adiw	r28, 0x0e	; 14
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <__vector_13>:

uint8_t recievedCommand;

ISR(USART_RXC_vect)
{
    12da:	1f 92       	push	r1
    12dc:	0f 92       	push	r0
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	0f 92       	push	r0
    12e2:	11 24       	eor	r1, r1
    12e4:	2f 93       	push	r18
    12e6:	3f 93       	push	r19
    12e8:	4f 93       	push	r20
    12ea:	5f 93       	push	r21
    12ec:	6f 93       	push	r22
    12ee:	7f 93       	push	r23
    12f0:	8f 93       	push	r24
    12f2:	9f 93       	push	r25
    12f4:	af 93       	push	r26
    12f6:	bf 93       	push	r27
    12f8:	ef 93       	push	r30
    12fa:	ff 93       	push	r31
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <__vector_13+0x28>
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	recievedCommand = UDR_REG;
    1306:	ec e2       	ldi	r30, 0x2C	; 44
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	80 93 a3 01 	sts	0x01A3, r24
	LCD_voidSetCursor(1,0);
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidSetCursor>
	LCD_voidDispStr("UART RX:         ");
    1318:	80 e6       	ldi	r24, 0x60	; 96
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_voidDispStr>
	LCD_voidSetCursor(1, 9);
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	69 e0       	ldi	r22, 0x09	; 9
    1324:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidSetCursor>
	LCD_voidDispChar(recievedCommand);
    1328:	80 91 a3 01 	lds	r24, 0x01A3
    132c:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <LCD_voidDispChar>

	switch (recievedCommand)
    1330:	80 91 a3 01 	lds	r24, 0x01A3
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3a 83       	std	Y+2, r19	; 0x02
    133a:	29 83       	std	Y+1, r18	; 0x01
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	9a 81       	ldd	r25, Y+2	; 0x02
    1340:	84 36       	cpi	r24, 0x64	; 100
    1342:	91 05       	cpc	r25, r1
    1344:	71 f0       	breq	.+28     	; 0x1362 <__vector_13+0x88>
    1346:	29 81       	ldd	r18, Y+1	; 0x01
    1348:	3a 81       	ldd	r19, Y+2	; 0x02
    134a:	28 37       	cpi	r18, 0x78	; 120
    134c:	31 05       	cpc	r19, r1
    134e:	31 f0       	breq	.+12     	; 0x135c <__vector_13+0x82>
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	9a 81       	ldd	r25, Y+2	; 0x02
    1354:	81 36       	cpi	r24, 0x61	; 97
    1356:	91 05       	cpc	r25, r1
    1358:	39 f0       	breq	.+14     	; 0x1368 <__vector_13+0x8e>
    135a:	08 c0       	rjmp	.+16     	; 0x136c <__vector_13+0x92>
	{
	case BRAKE:
		Brake();
    135c:	0e 94 be 07 	call	0xf7c	; 0xf7c <Brake>
    1360:	05 c0       	rjmp	.+10     	; 0x136c <__vector_13+0x92>
		break;

	case RIGHT:
		Right();
    1362:	0e 94 4f 08 	call	0x109e	; 0x109e <Right>
    1366:	02 c0       	rjmp	.+4      	; 0x136c <__vector_13+0x92>
		break;

	case LEFT:
		Left();
    1368:	0e 94 de 08 	call	0x11bc	; 0x11bc <Left>
		break;

	default: break;
	}
}
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	ff 91       	pop	r31
    1376:	ef 91       	pop	r30
    1378:	bf 91       	pop	r27
    137a:	af 91       	pop	r26
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	7f 91       	pop	r23
    1382:	6f 91       	pop	r22
    1384:	5f 91       	pop	r21
    1386:	4f 91       	pop	r20
    1388:	3f 91       	pop	r19
    138a:	2f 91       	pop	r18
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f 90       	pop	r0
    1392:	1f 90       	pop	r1
    1394:	18 95       	reti

00001396 <main>:

int main(void)
{
    1396:	ef 92       	push	r14
    1398:	0f 93       	push	r16
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <main+0xa>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
	UART_voidInit(9600, RTX, DATABITS_8, STOPBITS_1, NO_PARITY);
    13a4:	60 e8       	ldi	r22, 0x80	; 128
    13a6:	75 e2       	ldi	r23, 0x25	; 37
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	42 e0       	ldi	r20, 0x02	; 2
    13ae:	23 e0       	ldi	r18, 0x03	; 3
    13b0:	00 e0       	ldi	r16, 0x00	; 0
    13b2:	ee 24       	eor	r14, r14
    13b4:	0e 94 53 10 	call	0x20a6	; 0x20a6 <UART_voidInit>
	UART_voidEnableRecieveInt();
    13b8:	0e 94 a0 10 	call	0x2140	; 0x2140 <UART_voidEnableRecieveInt>

	UART_voidSendStr("UART Initialized.\r\n");
    13bc:	82 e7       	ldi	r24, 0x72	; 114
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 ca 10 	call	0x2194	; 0x2194 <UART_voidSendStr>

	LCD_voidInit();
    13c4:	0e 94 41 0c 	call	0x1882	; 0x1882 <LCD_voidInit>
	LCD_voidDispStr("LCD Initialized.");
    13c8:	86 e8       	ldi	r24, 0x86	; 134
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_voidDispStr>

	DC_Motor_voidInit();
    13d0:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <DC_Motor_voidInit>

	while (True)
	{
		switch (recievedCommand)
    13d4:	80 91 a3 01 	lds	r24, 0x01A3
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3a 83       	std	Y+2, r19	; 0x02
    13de:	29 83       	std	Y+1, r18	; 0x01
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	83 37       	cpi	r24, 0x73	; 115
    13e6:	91 05       	cpc	r25, r1
    13e8:	81 f0       	breq	.+32     	; 0x140a <main+0x74>
    13ea:	29 81       	ldd	r18, Y+1	; 0x01
    13ec:	3a 81       	ldd	r19, Y+2	; 0x02
    13ee:	27 37       	cpi	r18, 0x77	; 119
    13f0:	31 05       	cpc	r19, r1
    13f2:	41 f0       	breq	.+16     	; 0x1404 <main+0x6e>
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	81 37       	cpi	r24, 0x71	; 113
    13fa:	91 05       	cpc	r25, r1
    13fc:	59 f7       	brne	.-42     	; 0x13d4 <main+0x3e>
		{
		case FORWARD:
			Forward();
    13fe:	0e 94 94 07 	call	0xf28	; 0xf28 <Forward>
    1402:	e8 cf       	rjmp	.-48     	; 0x13d4 <main+0x3e>
			break;

		case FORWARD_FULL_SPEED:
			Forward_fullSpeed();
    1404:	0e 94 a0 07 	call	0xf40	; 0xf40 <Forward_fullSpeed>
    1408:	e5 cf       	rjmp	.-54     	; 0x13d4 <main+0x3e>
			break;

		case BACKWARD:
			Backward();
    140a:	0e 94 af 07 	call	0xf5e	; 0xf5e <Backward>
    140e:	e2 cf       	rjmp	.-60     	; 0x13d4 <main+0x3e>

00001410 <MG995_Init>:

#define MAX_DUTYCYCLE			floor((MAX_DUTYCYLCE_ms * FREQUENCY / 10))
#define MIN_DUTYCYCLE			ceil((MIN_DUTYCYCLE_ms * FREQUENCY / 10))

void MG995_Init(void)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
	TIMER_PWM_Init(TIMER1);
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <TIMER_PWM_Init>
	TIMER_PWM1_SetFrequency(FREQUENCY);
    141e:	62 e3       	ldi	r22, 0x32	; 50
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <TIMER_PWM1_SetFrequency>
	ADC_voidInit(ADC_AVCC);
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	0e 94 62 20 	call	0x40c4	; 0x40c4 <ADC_voidInit>
}
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <MG995_SetAngle>:

void MG995_SetAngle(uint8_t loc_angle)
{
    1436:	af 92       	push	r10
    1438:	bf 92       	push	r11
    143a:	cf 92       	push	r12
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <MG995_SetAngle+0x16>
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	8a 83       	std	Y+2, r24	; 0x02
	if (loc_angle >= MIN_ANGLE && loc_angle <= MAX_ANGLE)
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	85 3b       	cpi	r24, 0xB5	; 181
    1456:	08 f0       	brcs	.+2      	; 0x145a <MG995_SetAngle+0x24>
    1458:	45 c0       	rjmp	.+138    	; 0x14e4 <MG995_SetAngle+0xae>
	{
		#if	(ROTATION_MODE == NORMAL)
		uint8_t MG995_dutyCycle = MAX_DUTYCYCLE - MAP(loc_angle, MIN_ANGLE, MAX_ANGLE, MIN_DUTYCYCLE, MAX_DUTYCYCLE);
		#elif (ROTATION_MODE == REVERSE)
		uint8_t MG995_dutyCycle = MAP(loc_angle, MIN_ANGLE, MAX_ANGLE, MIN_DUTYCYCLE, MAX_DUTYCYCLE);
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a0 e0       	ldi	r26, 0x00	; 0
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	bc 01       	movw	r22, r24
    1466:	cd 01       	movw	r24, r26
    1468:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    146c:	9b 01       	movw	r18, r22
    146e:	ac 01       	movw	r20, r24
    1470:	00 d0       	rcall	.+0      	; 0x1472 <MG995_SetAngle+0x3c>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <MG995_SetAngle+0x3e>
    1474:	ed b7       	in	r30, 0x3d	; 61
    1476:	fe b7       	in	r31, 0x3e	; 62
    1478:	31 96       	adiw	r30, 0x01	; 1
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	a0 e4       	ldi	r26, 0x40	; 64
    1480:	b1 e4       	ldi	r27, 0x41	; 65
    1482:	80 83       	st	Z, r24
    1484:	91 83       	std	Z+1, r25	; 0x01
    1486:	a2 83       	std	Z+2, r26	; 0x02
    1488:	b3 83       	std	Z+3, r27	; 0x03
    148a:	ca 01       	movw	r24, r20
    148c:	b9 01       	movw	r22, r18
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	0f 2e       	mov	r0, r31
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	ef 2e       	mov	r14, r31
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	ff 2e       	mov	r15, r31
    14a0:	f4 e3       	ldi	r31, 0x34	; 52
    14a2:	0f 2f       	mov	r16, r31
    14a4:	f3 e4       	ldi	r31, 0x43	; 67
    14a6:	1f 2f       	mov	r17, r31
    14a8:	f0 2d       	mov	r31, r0
    14aa:	0f 2e       	mov	r0, r31
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	af 2e       	mov	r10, r31
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	bf 2e       	mov	r11, r31
    14b4:	f0 e4       	ldi	r31, 0x40	; 64
    14b6:	cf 2e       	mov	r12, r31
    14b8:	f0 e4       	ldi	r31, 0x40	; 64
    14ba:	df 2e       	mov	r13, r31
    14bc:	f0 2d       	mov	r31, r0
    14be:	0e 94 37 21 	call	0x426e	; 0x426e <MAP>
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	bc 01       	movw	r22, r24
    14d0:	cd 01       	movw	r24, r26
    14d2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	89 83       	std	Y+1, r24	; 0x01
		#else
			#error "Please configure ROTATION_MODE in MG995_Configurations.h"
		#endif

		TIMER_PWM_SetDutyCycle(TIMER1, MG995_dutyCycle);
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	69 81       	ldd	r22, Y+1	; 0x01
    14e0:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <TIMER_PWM_SetDutyCycle>

	} else return;
}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	ff 90       	pop	r15
    14f2:	ef 90       	pop	r14
    14f4:	df 90       	pop	r13
    14f6:	cf 90       	pop	r12
    14f8:	bf 90       	pop	r11
    14fa:	af 90       	pop	r10
    14fc:	08 95       	ret

000014fe <MG995_SetAngleFromADC>:

void MG995_SetAngleFromADC(ADC_Channel_t channel)
{
    14fe:	af 92       	push	r10
    1500:	bf 92       	push	r11
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	00 d0       	rcall	.+0      	; 0x1514 <MG995_SetAngleFromADC+0x16>
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	8a 83       	std	Y+2, r24	; 0x02
	#if	(ROTATION_MODE == NORMAL)
	uint8_t MG995_dutyCycle = MAX_DUTYCYCLE - MAP(ADC_u16ReadSteps(channel), 0, 1023, MIN_DUTYCYCLE, MAX_DUTYCYCLE);
	#elif (ROTATION_MODE == REVERSE)
	uint8_t MG995_dutyCycle = MAP(ADC_u16ReadSteps(channel), 0, 1023, MIN_DUTYCYCLE, MAX_DUTYCYCLE);
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	0e 94 8f 20 	call	0x411e	; 0x411e <ADC_u16ReadSteps>
    1520:	cc 01       	movw	r24, r24
    1522:	a0 e0       	ldi	r26, 0x00	; 0
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    152e:	9b 01       	movw	r18, r22
    1530:	ac 01       	movw	r20, r24
    1532:	00 d0       	rcall	.+0      	; 0x1534 <MG995_SetAngleFromADC+0x36>
    1534:	00 d0       	rcall	.+0      	; 0x1536 <MG995_SetAngleFromADC+0x38>
    1536:	ed b7       	in	r30, 0x3d	; 61
    1538:	fe b7       	in	r31, 0x3e	; 62
    153a:	31 96       	adiw	r30, 0x01	; 1
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	a0 e4       	ldi	r26, 0x40	; 64
    1542:	b1 e4       	ldi	r27, 0x41	; 65
    1544:	80 83       	st	Z, r24
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	a2 83       	std	Z+2, r26	; 0x02
    154a:	b3 83       	std	Z+3, r27	; 0x03
    154c:	ca 01       	movw	r24, r20
    154e:	b9 01       	movw	r22, r18
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e0       	ldi	r20, 0x00	; 0
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	0f 2e       	mov	r0, r31
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	ef 2e       	mov	r14, r31
    155e:	f0 ec       	ldi	r31, 0xC0	; 192
    1560:	ff 2e       	mov	r15, r31
    1562:	ff e7       	ldi	r31, 0x7F	; 127
    1564:	0f 2f       	mov	r16, r31
    1566:	f4 e4       	ldi	r31, 0x44	; 68
    1568:	1f 2f       	mov	r17, r31
    156a:	f0 2d       	mov	r31, r0
    156c:	0f 2e       	mov	r0, r31
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	af 2e       	mov	r10, r31
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	bf 2e       	mov	r11, r31
    1576:	f0 e4       	ldi	r31, 0x40	; 64
    1578:	cf 2e       	mov	r12, r31
    157a:	f0 e4       	ldi	r31, 0x40	; 64
    157c:	df 2e       	mov	r13, r31
    157e:	f0 2d       	mov	r31, r0
    1580:	0e 94 37 21 	call	0x426e	; 0x426e <MAP>
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	bc 01       	movw	r22, r24
    1592:	cd 01       	movw	r24, r26
    1594:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	89 83       	std	Y+1, r24	; 0x01
	#else
		#error "Please configure ROTATION_MODE in MG995_Configurations.h"
	#endif

	TIMER_PWM_SetDutyCycle(TIMER1, MG995_dutyCycle);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	69 81       	ldd	r22, Y+1	; 0x01
    15a2:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <TIMER_PWM_SetDutyCycle>
}
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	df 90       	pop	r13
    15b8:	cf 90       	pop	r12
    15ba:	bf 90       	pop	r11
    15bc:	af 90       	pop	r10
    15be:	08 95       	ret

000015c0 <MG995_Start>:

void MG995_Start(void)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	TIMER_PWM_Start(TIMER1);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	0e 94 24 16 	call	0x2c48	; 0x2c48 <TIMER_PWM_Start>
}
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <MG995_Stop>:
void MG995_Stop(void)
{
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
	TIMER_PWM_Stop(TIMER1);
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <TIMER_PWM_Stop>
}
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <enablePulse>:
};

*/

static void enablePulse(void)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	a6 97       	sbiw	r28, 0x26	; 38
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
	DIO_voidWrite(DIO_PIN3, DIO_PORTB, DIO_HIGH);
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	41 e0       	ldi	r20, 0x01	; 1
    1602:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a0 e8       	ldi	r26, 0x80	; 128
    160c:	bf e3       	ldi	r27, 0x3F	; 63
    160e:	8b a3       	std	Y+35, r24	; 0x23
    1610:	9c a3       	std	Y+36, r25	; 0x24
    1612:	ad a3       	std	Y+37, r26	; 0x25
    1614:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1616:	6b a1       	ldd	r22, Y+35	; 0x23
    1618:	7c a1       	ldd	r23, Y+36	; 0x24
    161a:	8d a1       	ldd	r24, Y+37	; 0x25
    161c:	9e a1       	ldd	r25, Y+38	; 0x26
    161e:	2b ea       	ldi	r18, 0xAB	; 171
    1620:	3a ea       	ldi	r19, 0xAA	; 170
    1622:	4a ea       	ldi	r20, 0xAA	; 170
    1624:	50 e4       	ldi	r21, 0x40	; 64
    1626:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	8f 8f       	std	Y+31, r24	; 0x1f
    1630:	98 a3       	std	Y+32, r25	; 0x20
    1632:	a9 a3       	std	Y+33, r26	; 0x21
    1634:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1636:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1638:	78 a1       	ldd	r23, Y+32	; 0x20
    163a:	89 a1       	ldd	r24, Y+33	; 0x21
    163c:	9a a1       	ldd	r25, Y+34	; 0x22
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e8       	ldi	r20, 0x80	; 128
    1644:	5f e3       	ldi	r21, 0x3F	; 63
    1646:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    164a:	88 23       	and	r24, r24
    164c:	1c f4       	brge	.+6      	; 0x1654 <enablePulse+0x6c>
		__ticks = 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	8e 8f       	std	Y+30, r24	; 0x1e
    1652:	91 c0       	rjmp	.+290    	; 0x1776 <enablePulse+0x18e>
	else if (__tmp > 255)
    1654:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1656:	78 a1       	ldd	r23, Y+32	; 0x20
    1658:	89 a1       	ldd	r24, Y+33	; 0x21
    165a:	9a a1       	ldd	r25, Y+34	; 0x22
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	4f e7       	ldi	r20, 0x7F	; 127
    1662:	53 e4       	ldi	r21, 0x43	; 67
    1664:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1668:	18 16       	cp	r1, r24
    166a:	0c f0       	brlt	.+2      	; 0x166e <enablePulse+0x86>
    166c:	7b c0       	rjmp	.+246    	; 0x1764 <enablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    166e:	6b a1       	ldd	r22, Y+35	; 0x23
    1670:	7c a1       	ldd	r23, Y+36	; 0x24
    1672:	8d a1       	ldd	r24, Y+37	; 0x25
    1674:	9e a1       	ldd	r25, Y+38	; 0x26
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	4a e7       	ldi	r20, 0x7A	; 122
    167c:	54 e4       	ldi	r21, 0x44	; 68
    167e:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	8a 8f       	std	Y+26, r24	; 0x1a
    1688:	9b 8f       	std	Y+27, r25	; 0x1b
    168a:	ac 8f       	std	Y+28, r26	; 0x1c
    168c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1690:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1692:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1694:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	4a e7       	ldi	r20, 0x7A	; 122
    169c:	55 e4       	ldi	r21, 0x45	; 69
    169e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	8e 8b       	std	Y+22, r24	; 0x16
    16a8:	9f 8b       	std	Y+23, r25	; 0x17
    16aa:	a8 8f       	std	Y+24, r26	; 0x18
    16ac:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    16ae:	6e 89       	ldd	r22, Y+22	; 0x16
    16b0:	7f 89       	ldd	r23, Y+23	; 0x17
    16b2:	88 8d       	ldd	r24, Y+24	; 0x18
    16b4:	99 8d       	ldd	r25, Y+25	; 0x19
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e8       	ldi	r20, 0x80	; 128
    16bc:	5f e3       	ldi	r21, 0x3F	; 63
    16be:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    16c2:	88 23       	and	r24, r24
    16c4:	2c f4       	brge	.+10     	; 0x16d0 <enablePulse+0xe8>
		__ticks = 1;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	9d 8b       	std	Y+21, r25	; 0x15
    16cc:	8c 8b       	std	Y+20, r24	; 0x14
    16ce:	3f c0       	rjmp	.+126    	; 0x174e <enablePulse+0x166>
	else if (__tmp > 65535)
    16d0:	6e 89       	ldd	r22, Y+22	; 0x16
    16d2:	7f 89       	ldd	r23, Y+23	; 0x17
    16d4:	88 8d       	ldd	r24, Y+24	; 0x18
    16d6:	99 8d       	ldd	r25, Y+25	; 0x19
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	3f ef       	ldi	r19, 0xFF	; 255
    16dc:	4f e7       	ldi	r20, 0x7F	; 127
    16de:	57 e4       	ldi	r21, 0x47	; 71
    16e0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    16e4:	18 16       	cp	r1, r24
    16e6:	4c f5       	brge	.+82     	; 0x173a <enablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    16ea:	7b 8d       	ldd	r23, Y+27	; 0x1b
    16ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e2       	ldi	r20, 0x20	; 32
    16f6:	51 e4       	ldi	r21, 0x41	; 65
    16f8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	bc 01       	movw	r22, r24
    1702:	cd 01       	movw	r24, r26
    1704:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	9d 8b       	std	Y+21, r25	; 0x15
    170e:	8c 8b       	std	Y+20, r24	; 0x14
    1710:	0f c0       	rjmp	.+30     	; 0x1730 <enablePulse+0x148>
    1712:	80 e9       	ldi	r24, 0x90	; 144
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	9b 8b       	std	Y+19, r25	; 0x13
    1718:	8a 8b       	std	Y+18, r24	; 0x12
    171a:	8a 89       	ldd	r24, Y+18	; 0x12
    171c:	9b 89       	ldd	r25, Y+19	; 0x13
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	f1 f7       	brne	.-4      	; 0x171e <enablePulse+0x136>
    1722:	9b 8b       	std	Y+19, r25	; 0x13
    1724:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1726:	8c 89       	ldd	r24, Y+20	; 0x14
    1728:	9d 89       	ldd	r25, Y+21	; 0x15
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	9d 8b       	std	Y+21, r25	; 0x15
    172e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1730:	8c 89       	ldd	r24, Y+20	; 0x14
    1732:	9d 89       	ldd	r25, Y+21	; 0x15
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	69 f7       	brne	.-38     	; 0x1712 <enablePulse+0x12a>
    1738:	24 c0       	rjmp	.+72     	; 0x1782 <enablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173a:	6e 89       	ldd	r22, Y+22	; 0x16
    173c:	7f 89       	ldd	r23, Y+23	; 0x17
    173e:	88 8d       	ldd	r24, Y+24	; 0x18
    1740:	99 8d       	ldd	r25, Y+25	; 0x19
    1742:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	9d 8b       	std	Y+21, r25	; 0x15
    174c:	8c 8b       	std	Y+20, r24	; 0x14
    174e:	8c 89       	ldd	r24, Y+20	; 0x14
    1750:	9d 89       	ldd	r25, Y+21	; 0x15
    1752:	99 8b       	std	Y+17, r25	; 0x11
    1754:	88 8b       	std	Y+16, r24	; 0x10
    1756:	88 89       	ldd	r24, Y+16	; 0x10
    1758:	99 89       	ldd	r25, Y+17	; 0x11
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <enablePulse+0x172>
    175e:	99 8b       	std	Y+17, r25	; 0x11
    1760:	88 8b       	std	Y+16, r24	; 0x10
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <enablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1764:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1766:	78 a1       	ldd	r23, Y+32	; 0x20
    1768:	89 a1       	ldd	r24, Y+33	; 0x21
    176a:	9a a1       	ldd	r25, Y+34	; 0x22
    176c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	8e 8f       	std	Y+30, r24	; 0x1e
    1776:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1778:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    177a:	8f 85       	ldd	r24, Y+15	; 0x0f
    177c:	8a 95       	dec	r24
    177e:	f1 f7       	brne	.-4      	; 0x177c <enablePulse+0x194>
    1780:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);	// 1 microsecond delay

	DIO_voidWrite(DIO_PIN3, DIO_PORTB, DIO_LOW);
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	61 e0       	ldi	r22, 0x01	; 1
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a0 e0       	ldi	r26, 0x00	; 0
    1792:	b0 e4       	ldi	r27, 0x40	; 64
    1794:	8b 87       	std	Y+11, r24	; 0x0b
    1796:	9c 87       	std	Y+12, r25	; 0x0c
    1798:	ad 87       	std	Y+13, r26	; 0x0d
    179a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179c:	6b 85       	ldd	r22, Y+11	; 0x0b
    179e:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	4a e7       	ldi	r20, 0x7A	; 122
    17aa:	55 e4       	ldi	r21, 0x45	; 69
    17ac:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	8f 83       	std	Y+7, r24	; 0x07
    17b6:	98 87       	std	Y+8, r25	; 0x08
    17b8:	a9 87       	std	Y+9, r26	; 0x09
    17ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17bc:	6f 81       	ldd	r22, Y+7	; 0x07
    17be:	78 85       	ldd	r23, Y+8	; 0x08
    17c0:	89 85       	ldd	r24, Y+9	; 0x09
    17c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	5f e3       	ldi	r21, 0x3F	; 63
    17cc:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    17d0:	88 23       	and	r24, r24
    17d2:	2c f4       	brge	.+10     	; 0x17de <enablePulse+0x1f6>
		__ticks = 1;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8d 83       	std	Y+5, r24	; 0x05
    17dc:	3f c0       	rjmp	.+126    	; 0x185c <enablePulse+0x274>
	else if (__tmp > 65535)
    17de:	6f 81       	ldd	r22, Y+7	; 0x07
    17e0:	78 85       	ldd	r23, Y+8	; 0x08
    17e2:	89 85       	ldd	r24, Y+9	; 0x09
    17e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	3f ef       	ldi	r19, 0xFF	; 255
    17ea:	4f e7       	ldi	r20, 0x7F	; 127
    17ec:	57 e4       	ldi	r21, 0x47	; 71
    17ee:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    17f2:	18 16       	cp	r1, r24
    17f4:	4c f5       	brge	.+82     	; 0x1848 <enablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e2       	ldi	r20, 0x20	; 32
    1804:	51 e4       	ldi	r21, 0x41	; 65
    1806:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	bc 01       	movw	r22, r24
    1810:	cd 01       	movw	r24, r26
    1812:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
    181e:	0f c0       	rjmp	.+30     	; 0x183e <enablePulse+0x256>
    1820:	80 e9       	ldi	r24, 0x90	; 144
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	9c 83       	std	Y+4, r25	; 0x04
    1826:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	f1 f7       	brne	.-4      	; 0x182c <enablePulse+0x244>
    1830:	9c 83       	std	Y+4, r25	; 0x04
    1832:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183e:	8d 81       	ldd	r24, Y+5	; 0x05
    1840:	9e 81       	ldd	r25, Y+6	; 0x06
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	69 f7       	brne	.-38     	; 0x1820 <enablePulse+0x238>
    1846:	14 c0       	rjmp	.+40     	; 0x1870 <enablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	9e 83       	std	Y+6, r25	; 0x06
    185a:	8d 83       	std	Y+5, r24	; 0x05
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	9a 83       	std	Y+2, r25	; 0x02
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	9a 81       	ldd	r25, Y+2	; 0x02
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <enablePulse+0x280>
    186c:	9a 83       	std	Y+2, r25	; 0x02
    186e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);	// 2 millisecond delay for instruction execution
}
    1870:	a6 96       	adiw	r28, 0x26	; 38
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <LCD_voidInit>:

void LCD_voidInit(void)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	e4 97       	sbiw	r28, 0x34	; 52
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
	//D4
	DIO_voidConfig(DIO_PIN4, DIO_PORTA, DIO_OUTPUT);
    1896:	84 e0       	ldi	r24, 0x04	; 4
    1898:	60 e0       	ldi	r22, 0x00	; 0
    189a:	41 e0       	ldi	r20, 0x01	; 1
    189c:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>

	//D5
	DIO_voidConfig(DIO_PIN5, DIO_PORTA, DIO_OUTPUT);
    18a0:	85 e0       	ldi	r24, 0x05	; 5
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	41 e0       	ldi	r20, 0x01	; 1
    18a6:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>

	//D6
	DIO_voidConfig(DIO_PIN6, DIO_PORTA, DIO_OUTPUT);
    18aa:	86 e0       	ldi	r24, 0x06	; 6
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>

	//D7
	DIO_voidConfig(DIO_PIN7, DIO_PORTA, DIO_OUTPUT);
    18b4:	87 e0       	ldi	r24, 0x07	; 7
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	41 e0       	ldi	r20, 0x01	; 1
    18ba:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>

	//RS
	DIO_voidConfig(DIO_PIN1, DIO_PORTB, DIO_OUTPUT);
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	41 e0       	ldi	r20, 0x01	; 1
    18c4:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>

	//RW
	DIO_voidConfig(DIO_PIN2, DIO_PORTB, DIO_OUTPUT);
    18c8:	82 e0       	ldi	r24, 0x02	; 2
    18ca:	61 e0       	ldi	r22, 0x01	; 1
    18cc:	41 e0       	ldi	r20, 0x01	; 1
    18ce:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>

	//E
	DIO_voidConfig(DIO_PIN3, DIO_PORTB, DIO_OUTPUT);
    18d2:	83 e0       	ldi	r24, 0x03	; 3
    18d4:	61 e0       	ldi	r22, 0x01	; 1
    18d6:	41 e0       	ldi	r20, 0x01	; 1
    18d8:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>

	//Setting E to 0
	DIO_voidWrite(DIO_PIN3, DIO_PORTB, DIO_LOW);
    18dc:	83 e0       	ldi	r24, 0x03	; 3
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>

	//Setting RW to Write mode
	DIO_voidWrite(DIO_PIN2, DIO_PORTB, DIO_LOW);
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e7       	ldi	r26, 0x70	; 112
    18f6:	b1 e4       	ldi	r27, 0x41	; 65
    18f8:	89 ab       	std	Y+49, r24	; 0x31
    18fa:	9a ab       	std	Y+50, r25	; 0x32
    18fc:	ab ab       	std	Y+51, r26	; 0x33
    18fe:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	69 a9       	ldd	r22, Y+49	; 0x31
    1902:	7a a9       	ldd	r23, Y+50	; 0x32
    1904:	8b a9       	ldd	r24, Y+51	; 0x33
    1906:	9c a9       	ldd	r25, Y+52	; 0x34
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a e7       	ldi	r20, 0x7A	; 122
    190e:	55 e4       	ldi	r21, 0x45	; 69
    1910:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	8d a7       	std	Y+45, r24	; 0x2d
    191a:	9e a7       	std	Y+46, r25	; 0x2e
    191c:	af a7       	std	Y+47, r26	; 0x2f
    191e:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1920:	6d a5       	ldd	r22, Y+45	; 0x2d
    1922:	7e a5       	ldd	r23, Y+46	; 0x2e
    1924:	8f a5       	ldd	r24, Y+47	; 0x2f
    1926:	98 a9       	ldd	r25, Y+48	; 0x30
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <LCD_voidInit+0xc0>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9c a7       	std	Y+44, r25	; 0x2c
    193e:	8b a7       	std	Y+43, r24	; 0x2b
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <LCD_voidInit+0x13e>
	else if (__tmp > 65535)
    1942:	6d a5       	ldd	r22, Y+45	; 0x2d
    1944:	7e a5       	ldd	r23, Y+46	; 0x2e
    1946:	8f a5       	ldd	r24, Y+47	; 0x2f
    1948:	98 a9       	ldd	r25, Y+48	; 0x30
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f5       	brge	.+82     	; 0x19ac <LCD_voidInit+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	69 a9       	ldd	r22, Y+49	; 0x31
    195c:	7a a9       	ldd	r23, Y+50	; 0x32
    195e:	8b a9       	ldd	r24, Y+51	; 0x33
    1960:	9c a9       	ldd	r25, Y+52	; 0x34
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9c a7       	std	Y+44, r25	; 0x2c
    1980:	8b a7       	std	Y+43, r24	; 0x2b
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <LCD_voidInit+0x120>
    1984:	80 e9       	ldi	r24, 0x90	; 144
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	9a a7       	std	Y+42, r25	; 0x2a
    198a:	89 a7       	std	Y+41, r24	; 0x29
    198c:	89 a5       	ldd	r24, Y+41	; 0x29
    198e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_voidInit+0x10e>
    1994:	9a a7       	std	Y+42, r25	; 0x2a
    1996:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	8b a5       	ldd	r24, Y+43	; 0x2b
    199a:	9c a5       	ldd	r25, Y+44	; 0x2c
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9c a7       	std	Y+44, r25	; 0x2c
    19a0:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    19a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	69 f7       	brne	.-38     	; 0x1984 <LCD_voidInit+0x102>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <LCD_voidInit+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	6d a5       	ldd	r22, Y+45	; 0x2d
    19ae:	7e a5       	ldd	r23, Y+46	; 0x2e
    19b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b2:	98 a9       	ldd	r25, Y+48	; 0x30
    19b4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9c a7       	std	Y+44, r25	; 0x2c
    19be:	8b a7       	std	Y+43, r24	; 0x2b
    19c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    19c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    19c4:	98 a7       	std	Y+40, r25	; 0x28
    19c6:	8f a3       	std	Y+39, r24	; 0x27
    19c8:	8f a1       	ldd	r24, Y+39	; 0x27
    19ca:	98 a5       	ldd	r25, Y+40	; 0x28
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_voidInit+0x14a>
    19d0:	98 a7       	std	Y+40, r25	; 0x28
    19d2:	8f a3       	std	Y+39, r24	; 0x27

	// Initialization sequence
	_delay_ms(15);
	LCD_voidCmd(0x03);
    19d4:	83 e0       	ldi	r24, 0x03	; 3
    19d6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_voidCmd>
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	a0 ea       	ldi	r26, 0xA0	; 160
    19e0:	b0 e4       	ldi	r27, 0x40	; 64
    19e2:	8b a3       	std	Y+35, r24	; 0x23
    19e4:	9c a3       	std	Y+36, r25	; 0x24
    19e6:	ad a3       	std	Y+37, r26	; 0x25
    19e8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ea:	6b a1       	ldd	r22, Y+35	; 0x23
    19ec:	7c a1       	ldd	r23, Y+36	; 0x24
    19ee:	8d a1       	ldd	r24, Y+37	; 0x25
    19f0:	9e a1       	ldd	r25, Y+38	; 0x26
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	4a e7       	ldi	r20, 0x7A	; 122
    19f8:	55 e4       	ldi	r21, 0x45	; 69
    19fa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	8f 8f       	std	Y+31, r24	; 0x1f
    1a04:	98 a3       	std	Y+32, r25	; 0x20
    1a06:	a9 a3       	std	Y+33, r26	; 0x21
    1a08:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1a0a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a0c:	78 a1       	ldd	r23, Y+32	; 0x20
    1a0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a10:	9a a1       	ldd	r25, Y+34	; 0x22
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e8       	ldi	r20, 0x80	; 128
    1a18:	5f e3       	ldi	r21, 0x3F	; 63
    1a1a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1a1e:	88 23       	and	r24, r24
    1a20:	2c f4       	brge	.+10     	; 0x1a2c <LCD_voidInit+0x1aa>
		__ticks = 1;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	9e 8f       	std	Y+30, r25	; 0x1e
    1a28:	8d 8f       	std	Y+29, r24	; 0x1d
    1a2a:	3f c0       	rjmp	.+126    	; 0x1aaa <LCD_voidInit+0x228>
	else if (__tmp > 65535)
    1a2c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a2e:	78 a1       	ldd	r23, Y+32	; 0x20
    1a30:	89 a1       	ldd	r24, Y+33	; 0x21
    1a32:	9a a1       	ldd	r25, Y+34	; 0x22
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	3f ef       	ldi	r19, 0xFF	; 255
    1a38:	4f e7       	ldi	r20, 0x7F	; 127
    1a3a:	57 e4       	ldi	r21, 0x47	; 71
    1a3c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1a40:	18 16       	cp	r1, r24
    1a42:	4c f5       	brge	.+82     	; 0x1a96 <LCD_voidInit+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a44:	6b a1       	ldd	r22, Y+35	; 0x23
    1a46:	7c a1       	ldd	r23, Y+36	; 0x24
    1a48:	8d a1       	ldd	r24, Y+37	; 0x25
    1a4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e2       	ldi	r20, 0x20	; 32
    1a52:	51 e4       	ldi	r21, 0x41	; 65
    1a54:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	cd 01       	movw	r24, r26
    1a60:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9e 8f       	std	Y+30, r25	; 0x1e
    1a6a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a6c:	0f c0       	rjmp	.+30     	; 0x1a8c <LCD_voidInit+0x20a>
    1a6e:	80 e9       	ldi	r24, 0x90	; 144
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	9c 8f       	std	Y+28, r25	; 0x1c
    1a74:	8b 8f       	std	Y+27, r24	; 0x1b
    1a76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_voidInit+0x1f8>
    1a7e:	9c 8f       	std	Y+28, r25	; 0x1c
    1a80:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	9e 8f       	std	Y+30, r25	; 0x1e
    1a8a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	69 f7       	brne	.-38     	; 0x1a6e <LCD_voidInit+0x1ec>
    1a94:	14 c0       	rjmp	.+40     	; 0x1abe <LCD_voidInit+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a96:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a98:	78 a1       	ldd	r23, Y+32	; 0x20
    1a9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a9e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9e 8f       	std	Y+30, r25	; 0x1e
    1aa8:	8d 8f       	std	Y+29, r24	; 0x1d
    1aaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aae:	9a 8f       	std	Y+26, r25	; 0x1a
    1ab0:	89 8f       	std	Y+25, r24	; 0x19
    1ab2:	89 8d       	ldd	r24, Y+25	; 0x19
    1ab4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_voidInit+0x234>
    1aba:	9a 8f       	std	Y+26, r25	; 0x1a
    1abc:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	LCD_voidCmd(0x03);
    1abe:	83 e0       	ldi	r24, 0x03	; 3
    1ac0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_voidCmd>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a8 ec       	ldi	r26, 0xC8	; 200
    1aca:	b2 e4       	ldi	r27, 0x42	; 66
    1acc:	8d 8b       	std	Y+21, r24	; 0x15
    1ace:	9e 8b       	std	Y+22, r25	; 0x16
    1ad0:	af 8b       	std	Y+23, r26	; 0x17
    1ad2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ad4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ad8:	8f 89       	ldd	r24, Y+23	; 0x17
    1ada:	98 8d       	ldd	r25, Y+24	; 0x18
    1adc:	2b ea       	ldi	r18, 0xAB	; 171
    1ade:	3a ea       	ldi	r19, 0xAA	; 170
    1ae0:	4a ea       	ldi	r20, 0xAA	; 170
    1ae2:	50 e4       	ldi	r21, 0x40	; 64
    1ae4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	89 8b       	std	Y+17, r24	; 0x11
    1aee:	9a 8b       	std	Y+18, r25	; 0x12
    1af0:	ab 8b       	std	Y+19, r26	; 0x13
    1af2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1af4:	69 89       	ldd	r22, Y+17	; 0x11
    1af6:	7a 89       	ldd	r23, Y+18	; 0x12
    1af8:	8b 89       	ldd	r24, Y+19	; 0x13
    1afa:	9c 89       	ldd	r25, Y+20	; 0x14
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e8       	ldi	r20, 0x80	; 128
    1b02:	5f e3       	ldi	r21, 0x3F	; 63
    1b04:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1b08:	88 23       	and	r24, r24
    1b0a:	1c f4       	brge	.+6      	; 0x1b12 <LCD_voidInit+0x290>
		__ticks = 1;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	88 8b       	std	Y+16, r24	; 0x10
    1b10:	91 c0       	rjmp	.+290    	; 0x1c34 <LCD_voidInit+0x3b2>
	else if (__tmp > 255)
    1b12:	69 89       	ldd	r22, Y+17	; 0x11
    1b14:	7a 89       	ldd	r23, Y+18	; 0x12
    1b16:	8b 89       	ldd	r24, Y+19	; 0x13
    1b18:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4f e7       	ldi	r20, 0x7F	; 127
    1b20:	53 e4       	ldi	r21, 0x43	; 67
    1b22:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1b26:	18 16       	cp	r1, r24
    1b28:	0c f0       	brlt	.+2      	; 0x1b2c <LCD_voidInit+0x2aa>
    1b2a:	7b c0       	rjmp	.+246    	; 0x1c22 <LCD_voidInit+0x3a0>
	{
		_delay_ms(__us / 1000.0);
    1b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b30:	8f 89       	ldd	r24, Y+23	; 0x17
    1b32:	98 8d       	ldd	r25, Y+24	; 0x18
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	4a e7       	ldi	r20, 0x7A	; 122
    1b3a:	54 e4       	ldi	r21, 0x44	; 68
    1b3c:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	8c 87       	std	Y+12, r24	; 0x0c
    1b46:	9d 87       	std	Y+13, r25	; 0x0d
    1b48:	ae 87       	std	Y+14, r26	; 0x0e
    1b4a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b50:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b52:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	4a e7       	ldi	r20, 0x7A	; 122
    1b5a:	55 e4       	ldi	r21, 0x45	; 69
    1b5c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	88 87       	std	Y+8, r24	; 0x08
    1b66:	99 87       	std	Y+9, r25	; 0x09
    1b68:	aa 87       	std	Y+10, r26	; 0x0a
    1b6a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b6c:	68 85       	ldd	r22, Y+8	; 0x08
    1b6e:	79 85       	ldd	r23, Y+9	; 0x09
    1b70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e8       	ldi	r20, 0x80	; 128
    1b7a:	5f e3       	ldi	r21, 0x3F	; 63
    1b7c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1b80:	88 23       	and	r24, r24
    1b82:	2c f4       	brge	.+10     	; 0x1b8e <LCD_voidInit+0x30c>
		__ticks = 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9f 83       	std	Y+7, r25	; 0x07
    1b8a:	8e 83       	std	Y+6, r24	; 0x06
    1b8c:	3f c0       	rjmp	.+126    	; 0x1c0c <LCD_voidInit+0x38a>
	else if (__tmp > 65535)
    1b8e:	68 85       	ldd	r22, Y+8	; 0x08
    1b90:	79 85       	ldd	r23, Y+9	; 0x09
    1b92:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b94:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	3f ef       	ldi	r19, 0xFF	; 255
    1b9a:	4f e7       	ldi	r20, 0x7F	; 127
    1b9c:	57 e4       	ldi	r21, 0x47	; 71
    1b9e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1ba2:	18 16       	cp	r1, r24
    1ba4:	4c f5       	brge	.+82     	; 0x1bf8 <LCD_voidInit+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ba8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1baa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bac:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e2       	ldi	r20, 0x20	; 32
    1bb4:	51 e4       	ldi	r21, 0x41	; 65
    1bb6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	cd 01       	movw	r24, r26
    1bc2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9f 83       	std	Y+7, r25	; 0x07
    1bcc:	8e 83       	std	Y+6, r24	; 0x06
    1bce:	0f c0       	rjmp	.+30     	; 0x1bee <LCD_voidInit+0x36c>
    1bd0:	80 e9       	ldi	r24, 0x90	; 144
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	9d 83       	std	Y+5, r25	; 0x05
    1bd6:	8c 83       	std	Y+4, r24	; 0x04
    1bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bda:	9d 81       	ldd	r25, Y+5	; 0x05
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_voidInit+0x35a>
    1be0:	9d 83       	std	Y+5, r25	; 0x05
    1be2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be4:	8e 81       	ldd	r24, Y+6	; 0x06
    1be6:	9f 81       	ldd	r25, Y+7	; 0x07
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	9f 83       	std	Y+7, r25	; 0x07
    1bec:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bee:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	69 f7       	brne	.-38     	; 0x1bd0 <LCD_voidInit+0x34e>
    1bf6:	24 c0       	rjmp	.+72     	; 0x1c40 <LCD_voidInit+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf8:	68 85       	ldd	r22, Y+8	; 0x08
    1bfa:	79 85       	ldd	r23, Y+9	; 0x09
    1bfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bfe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c00:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9f 83       	std	Y+7, r25	; 0x07
    1c0a:	8e 83       	std	Y+6, r24	; 0x06
    1c0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c10:	9b 83       	std	Y+3, r25	; 0x03
    1c12:	8a 83       	std	Y+2, r24	; 0x02
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	9b 81       	ldd	r25, Y+3	; 0x03
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD_voidInit+0x396>
    1c1c:	9b 83       	std	Y+3, r25	; 0x03
    1c1e:	8a 83       	std	Y+2, r24	; 0x02
    1c20:	0f c0       	rjmp	.+30     	; 0x1c40 <LCD_voidInit+0x3be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c22:	69 89       	ldd	r22, Y+17	; 0x11
    1c24:	7a 89       	ldd	r23, Y+18	; 0x12
    1c26:	8b 89       	ldd	r24, Y+19	; 0x13
    1c28:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	88 8b       	std	Y+16, r24	; 0x10
    1c34:	88 89       	ldd	r24, Y+16	; 0x10
    1c36:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	8a 95       	dec	r24
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <LCD_voidInit+0x3b8>
    1c3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	LCD_voidCmd(0x03);
    1c40:	83 e0       	ldi	r24, 0x03	; 3
    1c42:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_voidCmd>
	LCD_voidCmd(0x02);
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_voidCmd>

	LCD_voidCmd(LCD_4BIT_MODE);
    1c4c:	88 e2       	ldi	r24, 0x28	; 40
    1c4e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_voidCmd>
	LCD_voidCmd(LCD_CLEAR);
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_voidCmd>
	LCD_voidCmd(LCD_CURSOR_OFF);
    1c58:	8c e0       	ldi	r24, 0x0C	; 12
    1c5a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_voidCmd>
}
    1c5e:	e4 96       	adiw	r28, 0x34	; 52
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <LCD_voidDispChar>:

void LCD_voidDispChar(uint8_t character)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <LCD_voidDispChar+0x6>
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t loc_msb = (character & 0xF0);
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	80 7f       	andi	r24, 0xF0	; 240
    1c82:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t loc_lsb = (character << 4);
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	82 95       	swap	r24
    1c88:	80 7f       	andi	r24, 0xF0	; 240
    1c8a:	89 83       	std	Y+1, r24	; 0x01

	//Setting RS to Display mode
	DIO_voidWrite(DIO_PIN1, DIO_PORTB, DIO_HIGH);
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	61 e0       	ldi	r22, 0x01	; 1
    1c90:	41 e0       	ldi	r20, 0x01	; 1
    1c92:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>

	//Sending the MS 4 bytes
	DIO_voidWritePort(loc_msb, LCD_MASK, DIO_PORTA);
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	6f e0       	ldi	r22, 0x0F	; 15
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <DIO_voidWritePort>

	// Sending an Enable pulse
	enablePulse();
    1ca0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <enablePulse>

	// Sending the LS 4 bytes
	DIO_voidWritePort(loc_lsb, LCD_MASK, DIO_PORTA);
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	6f e0       	ldi	r22, 0x0F	; 15
    1ca8:	40 e0       	ldi	r20, 0x00	; 0
    1caa:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <DIO_voidWritePort>
	enablePulse();
    1cae:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <enablePulse>
}
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <LCD_voidDispStr>:

void LCD_voidDispStr(uint8_t str[])
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <LCD_voidDispStr+0x6>
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <LCD_voidDispStr+0x8>
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	9c 83       	std	Y+4, r25	; 0x04
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < 32; i++)
    1cce:	1a 82       	std	Y+2, r1	; 0x02
    1cd0:	19 82       	std	Y+1, r1	; 0x01
    1cd2:	22 c0       	rjmp	.+68     	; 0x1d18 <LCD_voidDispStr+0x5a>
	{
		if (str[i] != '\0')
    1cd4:	29 81       	ldd	r18, Y+1	; 0x01
    1cd6:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	fc 01       	movw	r30, r24
    1cde:	e2 0f       	add	r30, r18
    1ce0:	f3 1f       	adc	r31, r19
    1ce2:	80 81       	ld	r24, Z
    1ce4:	88 23       	and	r24, r24
    1ce6:	e9 f0       	breq	.+58     	; 0x1d22 <LCD_voidDispStr+0x64>
		{
			if (i == 16)
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	80 31       	cpi	r24, 0x10	; 16
    1cee:	91 05       	cpc	r25, r1
    1cf0:	21 f4       	brne	.+8      	; 0x1cfa <LCD_voidDispStr+0x3c>
				LCD_voidSetCursor(1,0);
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidSetCursor>

			LCD_voidDispChar(str[i]);
    1cfa:	29 81       	ldd	r18, Y+1	; 0x01
    1cfc:	3a 81       	ldd	r19, Y+2	; 0x02
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	fc 01       	movw	r30, r24
    1d04:	e2 0f       	add	r30, r18
    1d06:	f3 1f       	adc	r31, r19
    1d08:	80 81       	ld	r24, Z
    1d0a:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <LCD_voidDispChar>
	enablePulse();
}

void LCD_voidDispStr(uint8_t str[])
{
	for (int i = 0; i < 32; i++)
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	9a 83       	std	Y+2, r25	; 0x02
    1d16:	89 83       	std	Y+1, r24	; 0x01
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1c:	80 32       	cpi	r24, 0x20	; 32
    1d1e:	91 05       	cpc	r25, r1
    1d20:	cc f2       	brlt	.-78     	; 0x1cd4 <LCD_voidDispStr+0x16>
		else
		{
			break;
		}
	}
}
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <LCD_voidDispInt>:

void LCD_voidDispInt(uint32_t number)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	2e 97       	sbiw	r28, 0x0e	; 14
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	6b 87       	std	Y+11, r22	; 0x0b
    1d46:	7c 87       	std	Y+12, r23	; 0x0c
    1d48:	8d 87       	std	Y+13, r24	; 0x0d
    1d4a:	9e 87       	std	Y+14, r25	; 0x0e
	uint8_t buffer[10];
	sprintf(buffer, "%d", number);
    1d4c:	8d b7       	in	r24, 0x3d	; 61
    1d4e:	9e b7       	in	r25, 0x3e	; 62
    1d50:	08 97       	sbiw	r24, 0x08	; 8
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	9e bf       	out	0x3e, r25	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	8d bf       	out	0x3d, r24	; 61
    1d5c:	ed b7       	in	r30, 0x3d	; 61
    1d5e:	fe b7       	in	r31, 0x3e	; 62
    1d60:	31 96       	adiw	r30, 0x01	; 1
    1d62:	ce 01       	movw	r24, r28
    1d64:	01 96       	adiw	r24, 0x01	; 1
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	80 83       	st	Z, r24
    1d6a:	87 e9       	ldi	r24, 0x97	; 151
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	93 83       	std	Z+3, r25	; 0x03
    1d70:	82 83       	std	Z+2, r24	; 0x02
    1d72:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d74:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d76:	ad 85       	ldd	r26, Y+13	; 0x0d
    1d78:	be 85       	ldd	r27, Y+14	; 0x0e
    1d7a:	84 83       	std	Z+4, r24	; 0x04
    1d7c:	95 83       	std	Z+5, r25	; 0x05
    1d7e:	a6 83       	std	Z+6, r26	; 0x06
    1d80:	b7 83       	std	Z+7, r27	; 0x07
    1d82:	0e 94 6e 22 	call	0x44dc	; 0x44dc <sprintf>
    1d86:	8d b7       	in	r24, 0x3d	; 61
    1d88:	9e b7       	in	r25, 0x3e	; 62
    1d8a:	08 96       	adiw	r24, 0x08	; 8
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	9e bf       	out	0x3e, r25	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	8d bf       	out	0x3d, r24	; 61

	LCD_voidDispStr(buffer);
    1d96:	ce 01       	movw	r24, r28
    1d98:	01 96       	adiw	r24, 0x01	; 1
    1d9a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_voidDispStr>
}
    1d9e:	2e 96       	adiw	r28, 0x0e	; 14
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <LCD_voidDispFloat>:

void LCD_voidDispFloat(f64 number)
{
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	63 97       	sbiw	r28, 0x13	; 19
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	68 8b       	std	Y+16, r22	; 0x10
    1dca:	79 8b       	std	Y+17, r23	; 0x11
    1dcc:	8a 8b       	std	Y+18, r24	; 0x12
    1dce:	9b 8b       	std	Y+19, r25	; 0x13
	uint8_t buffer[15];
	dtostrf(number, 7, 2, buffer);
    1dd0:	88 89       	ldd	r24, Y+16	; 0x10
    1dd2:	99 89       	ldd	r25, Y+17	; 0x11
    1dd4:	aa 89       	ldd	r26, Y+18	; 0x12
    1dd6:	bb 89       	ldd	r27, Y+19	; 0x13
    1dd8:	bc 01       	movw	r22, r24
    1dda:	cd 01       	movw	r24, r26
    1ddc:	47 e0       	ldi	r20, 0x07	; 7
    1dde:	22 e0       	ldi	r18, 0x02	; 2
    1de0:	fe 01       	movw	r30, r28
    1de2:	31 96       	adiw	r30, 0x01	; 1
    1de4:	8f 01       	movw	r16, r30
    1de6:	0e 94 4d 22 	call	0x449a	; 0x449a <dtostrf>
	LCD_voidDispStr(buffer);
    1dea:	ce 01       	movw	r24, r28
    1dec:	01 96       	adiw	r24, 0x01	; 1
    1dee:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_voidDispStr>
}
    1df2:	63 96       	adiw	r28, 0x13	; 19
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	1f 91       	pop	r17
    1e04:	0f 91       	pop	r16
    1e06:	08 95       	ret

00001e08 <LCD_voidCmd>:

void LCD_voidCmd(LCD_Cmd_t command)
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	00 d0       	rcall	.+0      	; 0x1e0e <LCD_voidCmd+0x6>
    1e0e:	0f 92       	push	r0
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t loc_msb = (command & ~LCD_MASK);
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	80 7f       	andi	r24, 0xF0	; 240
    1e1a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t loc_lsb = (command << 4);
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	82 95       	swap	r24
    1e20:	80 7f       	andi	r24, 0xF0	; 240
    1e22:	89 83       	std	Y+1, r24	; 0x01

	//Setting RS to Command mode
	DIO_voidWrite(DIO_PIN1, DIO_PORTB, DIO_LOW);
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	61 e0       	ldi	r22, 0x01	; 1
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>

	//Sending the MS 4 bytes
	DIO_voidWritePort(loc_msb, LCD_MASK, DIO_PORTA);
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	6f e0       	ldi	r22, 0x0F	; 15
    1e32:	40 e0       	ldi	r20, 0x00	; 0
    1e34:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <DIO_voidWritePort>

	// Sending an Enable pulse and waiting for 2 milliseconds
	enablePulse();
    1e38:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <enablePulse>

	// Sending the LS 4 bytes
	DIO_voidWritePort(loc_lsb, LCD_MASK, DIO_PORTA);
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	6f e0       	ldi	r22, 0x0F	; 15
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <DIO_voidWritePort>
	enablePulse();
    1e46:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <enablePulse>
}
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <LCD_voidSetCursor>:

void LCD_voidSetCursor(uint8_t row, uint8_t col)
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <LCD_voidSetCursor+0x6>
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <LCD_voidSetCursor+0x8>
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	3c 83       	std	Y+4, r19	; 0x04
    1e6e:	2b 83       	std	Y+3, r18	; 0x03
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	31 f0       	breq	.+12     	; 0x1e84 <LCD_voidSetCursor+0x2e>
    1e78:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7c:	21 30       	cpi	r18, 0x01	; 1
    1e7e:	31 05       	cpc	r19, r1
    1e80:	31 f0       	breq	.+12     	; 0x1e8e <LCD_voidSetCursor+0x38>
    1e82:	09 c0       	rjmp	.+18     	; 0x1e96 <LCD_voidSetCursor+0x40>
	{
	case 0:
		LCD_voidCmd(0x80 + col);
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	80 58       	subi	r24, 0x80	; 128
    1e88:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_voidCmd>
    1e8c:	04 c0       	rjmp	.+8      	; 0x1e96 <LCD_voidSetCursor+0x40>
		break;

	case 1:
		LCD_voidCmd(0xC0 + col);
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	80 54       	subi	r24, 0x40	; 64
    1e92:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_voidCmd>
		break;
	}
}
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <DC_Motor_voidInit>:
 */

#include "DC_Motor.h"

void DC_Motor_voidInit(void)
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
	// Configure Motor pins as output
//	DIO_voidConfig(DIO_PIN4, DIO_PORTD, DIO_OUTPUT);
//	DIO_voidConfig(DIO_PIN5, DIO_PORTD, DIO_OUTPUT);

	DIO_voidConfig(DIO_PIN3, DIO_PORTC, DIO_OUTPUT);
    1eac:	83 e0       	ldi	r24, 0x03	; 3
    1eae:	62 e0       	ldi	r22, 0x02	; 2
    1eb0:	41 e0       	ldi	r20, 0x01	; 1
    1eb2:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>
	DIO_voidConfig(DIO_PIN4, DIO_PORTC, DIO_OUTPUT);
    1eb6:	84 e0       	ldi	r24, 0x04	; 4
    1eb8:	62 e0       	ldi	r22, 0x02	; 2
    1eba:	41 e0       	ldi	r20, 0x01	; 1
    1ebc:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>
	DIO_voidConfig(DIO_PIN5, DIO_PORTC, DIO_OUTPUT);
    1ec0:	85 e0       	ldi	r24, 0x05	; 5
    1ec2:	62 e0       	ldi	r22, 0x02	; 2
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>
	DIO_voidConfig(DIO_PIN6, DIO_PORTC, DIO_OUTPUT);
    1eca:	86 e0       	ldi	r24, 0x06	; 6
    1ecc:	62 e0       	ldi	r22, 0x02	; 2
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>

	// Make sure the motor is not rotating
//	DIO_voidWrite(DIO_PIN4, DIO_PORTD, DIO_LOW);
//	DIO_voidWrite(DIO_PIN5, DIO_PORTD, DIO_LOW);

	TIMER_PWM_Init(TIMER1);
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <TIMER_PWM_Init>
}
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <DC_Motor_voidStart>:

void DC_Motor_voidStart(DC_Motor_Id_t motorId, DC_Motor_Direction_t direction)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <DC_Motor_voidStart+0x6>
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <DC_Motor_voidStart+0x8>
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	6a 83       	std	Y+2, r22	; 0x02
	switch(motorId)
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	3c 83       	std	Y+4, r19	; 0x04
    1ef8:	2b 83       	std	Y+3, r18	; 0x03
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	31 f0       	breq	.+12     	; 0x1f0e <DC_Motor_voidStart+0x2e>
    1f02:	2b 81       	ldd	r18, Y+3	; 0x03
    1f04:	3c 81       	ldd	r19, Y+4	; 0x04
    1f06:	21 30       	cpi	r18, 0x01	; 1
    1f08:	31 05       	cpc	r19, r1
    1f0a:	09 f1       	breq	.+66     	; 0x1f4e <DC_Motor_voidStart+0x6e>
    1f0c:	3f c0       	rjmp	.+126    	; 0x1f8c <DC_Motor_voidStart+0xac>
	{
	case MOTOR_A:

		if (direction == CW)
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	88 23       	and	r24, r24
    1f12:	59 f4       	brne	.+22     	; 0x1f2a <DC_Motor_voidStart+0x4a>
		{
			// set IN1 and clear IN2 then enable ENA
			DIO_voidWrite(DIO_PIN3, DIO_PORTC, DIO_LOW);
    1f14:	83 e0       	ldi	r24, 0x03	; 3
    1f16:	62 e0       	ldi	r22, 0x02	; 2
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
			DIO_voidWrite(DIO_PIN4, DIO_PORTC, DIO_HIGH);
    1f1e:	84 e0       	ldi	r24, 0x04	; 4
    1f20:	62 e0       	ldi	r22, 0x02	; 2
    1f22:	41 e0       	ldi	r20, 0x01	; 1
    1f24:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
    1f28:	0a c0       	rjmp	.+20     	; 0x1f3e <DC_Motor_voidStart+0x5e>
		}
		else
		{
			// Set IN2 and clear IN1 then enable ENA
			DIO_voidWrite(DIO_PIN4, DIO_PORTC, DIO_LOW);
    1f2a:	84 e0       	ldi	r24, 0x04	; 4
    1f2c:	62 e0       	ldi	r22, 0x02	; 2
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
			DIO_voidWrite(DIO_PIN3, DIO_PORTC, DIO_HIGH);
    1f34:	83 e0       	ldi	r24, 0x03	; 3
    1f36:	62 e0       	ldi	r22, 0x02	; 2
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
		}

		//DIO_voidWrite(DIO_PIN4, DIO_PORTD, DIO_HIGH);
		TIMER_PWM_SetDutyCycle(TIMER1, 99);
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	63 e6       	ldi	r22, 0x63	; 99
    1f42:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <TIMER_PWM_SetDutyCycle>
		TIMER_Start(TIMER1);
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	0e 94 94 14 	call	0x2928	; 0x2928 <TIMER_Start>
    1f4c:	1f c0       	rjmp	.+62     	; 0x1f8c <DC_Motor_voidStart+0xac>
		break;

	case MOTOR_B:

		if (direction == CW)
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	88 23       	and	r24, r24
    1f52:	59 f4       	brne	.+22     	; 0x1f6a <DC_Motor_voidStart+0x8a>
		{
			// set IN3 and clear IN4 then enable ENB
			DIO_voidWrite(DIO_PIN6, DIO_PORTC, DIO_LOW);
    1f54:	86 e0       	ldi	r24, 0x06	; 6
    1f56:	62 e0       	ldi	r22, 0x02	; 2
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
			DIO_voidWrite(DIO_PIN5, DIO_PORTC, DIO_HIGH);
    1f5e:	85 e0       	ldi	r24, 0x05	; 5
    1f60:	62 e0       	ldi	r22, 0x02	; 2
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
    1f68:	0a c0       	rjmp	.+20     	; 0x1f7e <DC_Motor_voidStart+0x9e>
		}
		else
		{
			// Set IN4 and clear IN3 then enable ENB
			DIO_voidWrite(DIO_PIN5, DIO_PORTC, DIO_LOW);
    1f6a:	85 e0       	ldi	r24, 0x05	; 5
    1f6c:	62 e0       	ldi	r22, 0x02	; 2
    1f6e:	40 e0       	ldi	r20, 0x00	; 0
    1f70:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
			DIO_voidWrite(DIO_PIN6, DIO_PORTC, DIO_HIGH);
    1f74:	86 e0       	ldi	r24, 0x06	; 6
    1f76:	62 e0       	ldi	r22, 0x02	; 2
    1f78:	41 e0       	ldi	r20, 0x01	; 1
    1f7a:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
		}

		//DIO_voidWrite(DIO_PIN4, DIO_PORTD, DIO_HIGH);
		TIMER_PWM_SetDutyCycle(TIMER1, 99);
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	63 e6       	ldi	r22, 0x63	; 99
    1f82:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <TIMER_PWM_SetDutyCycle>
		TIMER_Start(TIMER1);
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	0e 94 94 14 	call	0x2928	; 0x2928 <TIMER_Start>
		break;

	default: break;
	}
}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <DC_Motor_voidStop>:

void DC_Motor_voidStop(DC_Motor_Id_t motorId)
{
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <DC_Motor_voidStop+0x6>
    1fa0:	0f 92       	push	r0
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	89 83       	std	Y+1, r24	; 0x01
	switch (motorId)
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	3b 83       	std	Y+3, r19	; 0x03
    1fb0:	2a 83       	std	Y+2, r18	; 0x02
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	31 f0       	breq	.+12     	; 0x1fc6 <DC_Motor_voidStop+0x2c>
    1fba:	2a 81       	ldd	r18, Y+2	; 0x02
    1fbc:	3b 81       	ldd	r19, Y+3	; 0x03
    1fbe:	21 30       	cpi	r18, 0x01	; 1
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	89 f0       	breq	.+34     	; 0x1fe6 <DC_Motor_voidStop+0x4c>
    1fc4:	1f c0       	rjmp	.+62     	; 0x2004 <DC_Motor_voidStop+0x6a>
	{
	case MOTOR_A:

		// Clear ENA and wait for motor A to stop
		DIO_voidWrite(DIO_PIN4, DIO_PORTD, DIO_LOW);
    1fc6:	84 e0       	ldi	r24, 0x04	; 4
    1fc8:	63 e0       	ldi	r22, 0x03	; 3
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
		DIO_voidWrite(DIO_PIN3, DIO_PORTC, DIO_LOW);
    1fd0:	83 e0       	ldi	r24, 0x03	; 3
    1fd2:	62 e0       	ldi	r22, 0x02	; 2
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
		DIO_voidWrite(DIO_PIN4, DIO_PORTC, DIO_LOW);
    1fda:	84 e0       	ldi	r24, 0x04	; 4
    1fdc:	62 e0       	ldi	r22, 0x02	; 2
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
    1fe4:	0f c0       	rjmp	.+30     	; 0x2004 <DC_Motor_voidStop+0x6a>
		break;

	case MOTOR_B:

		// Clear ENB and wait for motor B to stop
		DIO_voidWrite(DIO_PIN4, DIO_PORTD, DIO_LOW);
    1fe6:	84 e0       	ldi	r24, 0x04	; 4
    1fe8:	63 e0       	ldi	r22, 0x03	; 3
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
		DIO_voidWrite(DIO_PIN5, DIO_PORTC, DIO_LOW);
    1ff0:	85 e0       	ldi	r24, 0x05	; 5
    1ff2:	62 e0       	ldi	r22, 0x02	; 2
    1ff4:	40 e0       	ldi	r20, 0x00	; 0
    1ff6:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
		DIO_voidWrite(DIO_PIN6, DIO_PORTC, DIO_LOW);
    1ffa:	86 e0       	ldi	r24, 0x06	; 6
    1ffc:	62 e0       	ldi	r22, 0x02	; 2
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
		break;

	default: break;
	}
	TIMER_PWM_Stop(TIMER1);
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <TIMER_PWM_Stop>
}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <DC_Motor_voidAdjustSpeed>:

void DC_Motor_voidAdjustSpeed(uint8_t dutyCycle)
{
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	0f 92       	push	r0
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	89 83       	std	Y+1, r24	; 0x01
	TIMER_Stop(TIMER1);
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	0e 94 db 14 	call	0x29b6	; 0x29b6 <TIMER_Stop>
	TIMER_PWM_SetDutyCycle(TIMER1, dutyCycle);
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	69 81       	ldd	r22, Y+1	; 0x01
    202c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <TIMER_PWM_SetDutyCycle>
	TIMER_PWM_Start(TIMER1);
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	0e 94 24 16 	call	0x2c48	; 0x2c48 <TIMER_PWM_Start>
}
    2036:	0f 90       	pop	r0
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <DC_Motor_voidBrake>:

void DC_Motor_voidBrake(DC_Motor_Id_t motorId)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	00 d0       	rcall	.+0      	; 0x2044 <DC_Motor_voidBrake+0x6>
    2044:	0f 92       	push	r0
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	89 83       	std	Y+1, r24	; 0x01
	switch (motorId)
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	3b 83       	std	Y+3, r19	; 0x03
    2054:	2a 83       	std	Y+2, r18	; 0x02
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	9b 81       	ldd	r25, Y+3	; 0x03
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	31 f0       	breq	.+12     	; 0x206a <DC_Motor_voidBrake+0x2c>
    205e:	2a 81       	ldd	r18, Y+2	; 0x02
    2060:	3b 81       	ldd	r19, Y+3	; 0x03
    2062:	21 30       	cpi	r18, 0x01	; 1
    2064:	31 05       	cpc	r19, r1
    2066:	61 f0       	breq	.+24     	; 0x2080 <DC_Motor_voidBrake+0x42>
    2068:	15 c0       	rjmp	.+42     	; 0x2094 <DC_Motor_voidBrake+0x56>
	{
	case MOTOR_A:
		DIO_voidWrite(DIO_PIN3, DIO_PORTC, DIO_HIGH);
    206a:	83 e0       	ldi	r24, 0x03	; 3
    206c:	62 e0       	ldi	r22, 0x02	; 2
    206e:	41 e0       	ldi	r20, 0x01	; 1
    2070:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
		DIO_voidWrite(DIO_PIN4, DIO_PORTC, DIO_HIGH);
    2074:	84 e0       	ldi	r24, 0x04	; 4
    2076:	62 e0       	ldi	r22, 0x02	; 2
    2078:	41 e0       	ldi	r20, 0x01	; 1
    207a:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
    207e:	0a c0       	rjmp	.+20     	; 0x2094 <DC_Motor_voidBrake+0x56>

		break;

	case MOTOR_B:
		DIO_voidWrite(DIO_PIN5, DIO_PORTC, DIO_HIGH);
    2080:	85 e0       	ldi	r24, 0x05	; 5
    2082:	62 e0       	ldi	r22, 0x02	; 2
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>
		DIO_voidWrite(DIO_PIN6, DIO_PORTC, DIO_HIGH);
    208a:	86 e0       	ldi	r24, 0x06	; 6
    208c:	62 e0       	ldi	r22, 0x02	; 2
    208e:	41 e0       	ldi	r20, 0x01	; 1
    2090:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <DIO_voidWrite>

		break;

	default: break;
	}
	TIMER_PWM_Stop(TIMER1);
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <TIMER_PWM_Stop>
}
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <UART_voidInit>:
 *      Author: 4hmed
 */
#include "UART.h"

void UART_voidInit(uint32_t baudrate, UART_mode_t mode, UART_databits_t databits, UART_stopbits_t stopbits, UART_Parity_t parity)
{
    20a6:	ef 92       	push	r14
    20a8:	0f 93       	push	r16
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	2a 97       	sbiw	r28, 0x0a	; 10
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	69 83       	std	Y+1, r22	; 0x01
    20c0:	7a 83       	std	Y+2, r23	; 0x02
    20c2:	8b 83       	std	Y+3, r24	; 0x03
    20c4:	9c 83       	std	Y+4, r25	; 0x04
    20c6:	4d 83       	std	Y+5, r20	; 0x05
    20c8:	2e 83       	std	Y+6, r18	; 0x06
    20ca:	0f 83       	std	Y+7, r16	; 0x07
    20cc:	e8 86       	std	Y+8, r14	; 0x08
	switch (mode)
    20ce:	8d 81       	ldd	r24, Y+5	; 0x05
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	3a 87       	std	Y+10, r19	; 0x0a
    20d6:	29 87       	std	Y+9, r18	; 0x09
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	91 05       	cpc	r25, r1
    20e0:	71 f0       	breq	.+28     	; 0x20fe <UART_voidInit+0x58>
    20e2:	29 85       	ldd	r18, Y+9	; 0x09
    20e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    20e6:	22 30       	cpi	r18, 0x02	; 2
    20e8:	31 05       	cpc	r19, r1
    20ea:	71 f0       	breq	.+28     	; 0x2108 <UART_voidInit+0x62>
    20ec:	89 85       	ldd	r24, Y+9	; 0x09
    20ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	71 f4       	brne	.+28     	; 0x2110 <UART_voidInit+0x6a>
	{
	case RX:
		enableReciever();
    20f4:	0e 94 52 13 	call	0x26a4	; 0x26a4 <enableReciever>
		disableTransmitter();
    20f8:	0e 94 37 13 	call	0x266e	; 0x266e <disableTransmitter>
    20fc:	09 c0       	rjmp	.+18     	; 0x2110 <UART_voidInit+0x6a>
		break;

	case TX:
		enableTransmitter();
    20fe:	0e 94 24 13 	call	0x2648	; 0x2648 <enableTransmitter>
		disableReciever();
    2102:	0e 94 65 13 	call	0x26ca	; 0x26ca <disableReciever>
    2106:	04 c0       	rjmp	.+8      	; 0x2110 <UART_voidInit+0x6a>
		break;

	case RTX:
		enableTransmitter();
    2108:	0e 94 24 13 	call	0x2648	; 0x2648 <enableTransmitter>
		enableReciever();
    210c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <enableReciever>
		break;
	}

	config(databits, stopbits, parity);
    2110:	8e 81       	ldd	r24, Y+6	; 0x06
    2112:	6f 81       	ldd	r22, Y+7	; 0x07
    2114:	48 85       	ldd	r20, Y+8	; 0x08
    2116:	0e 94 08 11 	call	0x2210	; 0x2210 <config>
	setBaudrate(baudrate);
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	ab 81       	ldd	r26, Y+3	; 0x03
    2120:	bc 81       	ldd	r27, Y+4	; 0x04
    2122:	bc 01       	movw	r22, r24
    2124:	cd 01       	movw	r24, r26
    2126:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setBaudrate>
}
    212a:	2a 96       	adiw	r28, 0x0a	; 10
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	0f 91       	pop	r16
    213c:	ef 90       	pop	r14
    213e:	08 95       	ret

00002140 <UART_voidEnableRecieveInt>:

void UART_voidEnableRecieveInt(void)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
	GINT_Enable();
    2148:	0e 94 98 1c 	call	0x3930	; 0x3930 <GINT_Enable>
	SET_BIT(UCSRB_RXCIE, UCSRB_REG);
    214c:	aa e2       	ldi	r26, 0x2A	; 42
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	ea e2       	ldi	r30, 0x2A	; 42
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	80 68       	ori	r24, 0x80	; 128
    2158:	8c 93       	st	X, r24
}
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	08 95       	ret

00002160 <UART_voidSendByte>:

void UART_voidSendByte(uint8_t byte)
{
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	0f 92       	push	r0
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	89 83       	std	Y+1, r24	; 0x01
	while(!CHECK_BIT(UCSRA_UDRE, UCSRA_REG));
    216c:	eb e2       	ldi	r30, 0x2B	; 43
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	82 95       	swap	r24
    2174:	86 95       	lsr	r24
    2176:	87 70       	andi	r24, 0x07	; 7
    2178:	88 2f       	mov	r24, r24
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	81 70       	andi	r24, 0x01	; 1
    217e:	90 70       	andi	r25, 0x00	; 0
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	a1 f3       	breq	.-24     	; 0x216c <UART_voidSendByte+0xc>
	UDR_REG = byte;
    2184:	ec e2       	ldi	r30, 0x2C	; 44
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	80 83       	st	Z, r24
}
    218c:	0f 90       	pop	r0
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <UART_voidSendStr>:

void UART_voidSendStr(uint8_t* str)
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	00 d0       	rcall	.+0      	; 0x219a <UART_voidSendStr+0x6>
    219a:	0f 92       	push	r0
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	9b 83       	std	Y+3, r25	; 0x03
    21a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    21a4:	19 82       	std	Y+1, r1	; 0x01
    21a6:	0e c0       	rjmp	.+28     	; 0x21c4 <UART_voidSendStr+0x30>
	while(str[i] != '\0')
	{
		UART_voidSendByte(str[i]);
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	9b 81       	ldd	r25, Y+3	; 0x03
    21b2:	fc 01       	movw	r30, r24
    21b4:	e2 0f       	add	r30, r18
    21b6:	f3 1f       	adc	r31, r19
    21b8:	80 81       	ld	r24, Z
    21ba:	0e 94 b0 10 	call	0x2160	; 0x2160 <UART_voidSendByte>
		i++;
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	8f 5f       	subi	r24, 0xFF	; 255
    21c2:	89 83       	std	Y+1, r24	; 0x01
}

void UART_voidSendStr(uint8_t* str)
{
	uint8_t i = 0;
	while(str[i] != '\0')
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	28 2f       	mov	r18, r24
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	9b 81       	ldd	r25, Y+3	; 0x03
    21ce:	fc 01       	movw	r30, r24
    21d0:	e2 0f       	add	r30, r18
    21d2:	f3 1f       	adc	r31, r19
    21d4:	80 81       	ld	r24, Z
    21d6:	88 23       	and	r24, r24
    21d8:	39 f7       	brne	.-50     	; 0x21a8 <UART_voidSendStr+0x14>
	{
		UART_voidSendByte(str[i]);
		i++;
	}
}
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <UART_voidRecieveByte>:

uint8_t UART_voidRecieveByte(void)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	0f 92       	push	r0
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
	if (CHECK_BIT(UCSRA_RXC, UCSRA_REG)) return (UDR_REG);
    21f0:	eb e2       	ldi	r30, 0x2B	; 43
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	88 23       	and	r24, r24
    21f8:	2c f4       	brge	.+10     	; 0x2204 <UART_voidRecieveByte+0x1e>
    21fa:	ec e2       	ldi	r30, 0x2C	; 44
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	01 c0       	rjmp	.+2      	; 0x2206 <UART_voidRecieveByte+0x20>
	else return 0;
    2204:	19 82       	std	Y+1, r1	; 0x01
    2206:	89 81       	ldd	r24, Y+1	; 0x01
}
    2208:	0f 90       	pop	r0
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <config>:

static void config(UART_databits_t databits, UART_stopbits_t stopbits, UART_Parity_t parity)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	69 97       	sbiw	r28, 0x19	; 25
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	6a 83       	std	Y+2, r22	; 0x02
    2228:	4b 83       	std	Y+3, r20	; 0x03
	switch (databits)
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	28 2f       	mov	r18, r24
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	39 8f       	std	Y+25, r19	; 0x19
    2232:	28 8f       	std	Y+24, r18	; 0x18
    2234:	88 8d       	ldd	r24, Y+24	; 0x18
    2236:	99 8d       	ldd	r25, Y+25	; 0x19
    2238:	82 30       	cpi	r24, 0x02	; 2
    223a:	91 05       	cpc	r25, r1
    223c:	09 f4       	brne	.+2      	; 0x2240 <config+0x30>
    223e:	df c0       	rjmp	.+446    	; 0x23fe <config+0x1ee>
    2240:	28 8d       	ldd	r18, Y+24	; 0x18
    2242:	39 8d       	ldd	r19, Y+25	; 0x19
    2244:	23 30       	cpi	r18, 0x03	; 3
    2246:	31 05       	cpc	r19, r1
    2248:	5c f4       	brge	.+22     	; 0x2260 <config+0x50>
    224a:	88 8d       	ldd	r24, Y+24	; 0x18
    224c:	99 8d       	ldd	r25, Y+25	; 0x19
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	a1 f0       	breq	.+40     	; 0x227a <config+0x6a>
    2252:	28 8d       	ldd	r18, Y+24	; 0x18
    2254:	39 8d       	ldd	r19, Y+25	; 0x19
    2256:	21 30       	cpi	r18, 0x01	; 1
    2258:	31 05       	cpc	r19, r1
    225a:	09 f4       	brne	.+2      	; 0x225e <config+0x4e>
    225c:	6f c0       	rjmp	.+222    	; 0x233c <config+0x12c>
    225e:	eb c1       	rjmp	.+982    	; 0x2636 <config+0x426>
    2260:	88 8d       	ldd	r24, Y+24	; 0x18
    2262:	99 8d       	ldd	r25, Y+25	; 0x19
    2264:	83 30       	cpi	r24, 0x03	; 3
    2266:	91 05       	cpc	r25, r1
    2268:	09 f4       	brne	.+2      	; 0x226c <config+0x5c>
    226a:	2a c1       	rjmp	.+596    	; 0x24c0 <config+0x2b0>
    226c:	28 8d       	ldd	r18, Y+24	; 0x18
    226e:	39 8d       	ldd	r19, Y+25	; 0x19
    2270:	24 30       	cpi	r18, 0x04	; 4
    2272:	31 05       	cpc	r19, r1
    2274:	09 f4       	brne	.+2      	; 0x2278 <config+0x68>
    2276:	7f c1       	rjmp	.+766    	; 0x2576 <config+0x366>
    2278:	de c1       	rjmp	.+956    	; 0x2636 <config+0x426>
	{
	case DATABITS_5:
		if (stopbits == STOPBITS_2)
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	81 30       	cpi	r24, 0x01	; 1
    227e:	79 f5       	brne	.+94     	; 0x22de <config+0xce>
		{
			switch (parity)
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	3f 8b       	std	Y+23, r19	; 0x17
    2288:	2e 8b       	std	Y+22, r18	; 0x16
    228a:	8e 89       	ldd	r24, Y+22	; 0x16
    228c:	9f 89       	ldd	r25, Y+23	; 0x17
    228e:	82 30       	cpi	r24, 0x02	; 2
    2290:	91 05       	cpc	r25, r1
    2292:	99 f0       	breq	.+38     	; 0x22ba <config+0xaa>
    2294:	2e 89       	ldd	r18, Y+22	; 0x16
    2296:	3f 89       	ldd	r19, Y+23	; 0x17
    2298:	23 30       	cpi	r18, 0x03	; 3
    229a:	31 05       	cpc	r19, r1
    229c:	b9 f0       	breq	.+46     	; 0x22cc <config+0xbc>
    229e:	8e 89       	ldd	r24, Y+22	; 0x16
    22a0:	9f 89       	ldd	r25, Y+23	; 0x17
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <config+0x98>
    22a6:	c7 c1       	rjmp	.+910    	; 0x2636 <config+0x426>
			{
			case NO_PARITY:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_USBS);
    22a8:	a0 e4       	ldi	r26, 0x40	; 64
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	e0 e4       	ldi	r30, 0x40	; 64
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	81 77       	andi	r24, 0x71	; 113
    22b4:	88 68       	ori	r24, 0x88	; 136
    22b6:	8c 93       	st	X, r24
    22b8:	be c1       	rjmp	.+892    	; 0x2636 <config+0x426>
				break;

			case EVEN:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_USBS);
    22ba:	a0 e4       	ldi	r26, 0x40	; 64
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e0 e4       	ldi	r30, 0x40	; 64
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	81 75       	andi	r24, 0x51	; 81
    22c6:	88 6a       	ori	r24, 0xA8	; 168
    22c8:	8c 93       	st	X, r24
    22ca:	b5 c1       	rjmp	.+874    	; 0x2636 <config+0x426>
				break;

			case ODD:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_UPM0) | (1 << UCSRC_USBS);
    22cc:	a0 e4       	ldi	r26, 0x40	; 64
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e0 e4       	ldi	r30, 0x40	; 64
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	81 74       	andi	r24, 0x41	; 65
    22d8:	88 6b       	ori	r24, 0xB8	; 184
    22da:	8c 93       	st	X, r24
    22dc:	ac c1       	rjmp	.+856    	; 0x2636 <config+0x426>
				break;
			}
		}
		else
		{
			switch (parity)
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	3d 8b       	std	Y+21, r19	; 0x15
    22e6:	2c 8b       	std	Y+20, r18	; 0x14
    22e8:	8c 89       	ldd	r24, Y+20	; 0x14
    22ea:	9d 89       	ldd	r25, Y+21	; 0x15
    22ec:	82 30       	cpi	r24, 0x02	; 2
    22ee:	91 05       	cpc	r25, r1
    22f0:	99 f0       	breq	.+38     	; 0x2318 <config+0x108>
    22f2:	2c 89       	ldd	r18, Y+20	; 0x14
    22f4:	3d 89       	ldd	r19, Y+21	; 0x15
    22f6:	23 30       	cpi	r18, 0x03	; 3
    22f8:	31 05       	cpc	r19, r1
    22fa:	b9 f0       	breq	.+46     	; 0x232a <config+0x11a>
    22fc:	8c 89       	ldd	r24, Y+20	; 0x14
    22fe:	9d 89       	ldd	r25, Y+21	; 0x15
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	09 f0       	breq	.+2      	; 0x2306 <config+0xf6>
    2304:	98 c1       	rjmp	.+816    	; 0x2636 <config+0x426>
			{
			case NO_PARITY:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL);
    2306:	a0 e4       	ldi	r26, 0x40	; 64
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e0 e4       	ldi	r30, 0x40	; 64
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	89 77       	andi	r24, 0x79	; 121
    2312:	80 68       	ori	r24, 0x80	; 128
    2314:	8c 93       	st	X, r24
    2316:	8f c1       	rjmp	.+798    	; 0x2636 <config+0x426>
				break;

			case EVEN:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1);
    2318:	a0 e4       	ldi	r26, 0x40	; 64
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e0 e4       	ldi	r30, 0x40	; 64
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	89 75       	andi	r24, 0x59	; 89
    2324:	80 6a       	ori	r24, 0xA0	; 160
    2326:	8c 93       	st	X, r24
    2328:	86 c1       	rjmp	.+780    	; 0x2636 <config+0x426>
				break;

			case ODD:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_UPM0);
    232a:	a0 e4       	ldi	r26, 0x40	; 64
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e0 e4       	ldi	r30, 0x40	; 64
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	89 74       	andi	r24, 0x49	; 73
    2336:	80 6b       	ori	r24, 0xB0	; 176
    2338:	8c 93       	st	X, r24
    233a:	7d c1       	rjmp	.+762    	; 0x2636 <config+0x426>
			}
		}
		break;

	case DATABITS_6:
		if (stopbits == STOPBITS_2)
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	81 30       	cpi	r24, 0x01	; 1
    2340:	79 f5       	brne	.+94     	; 0x23a0 <config+0x190>
		{
			switch (parity)
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	3b 8b       	std	Y+19, r19	; 0x13
    234a:	2a 8b       	std	Y+18, r18	; 0x12
    234c:	8a 89       	ldd	r24, Y+18	; 0x12
    234e:	9b 89       	ldd	r25, Y+19	; 0x13
    2350:	82 30       	cpi	r24, 0x02	; 2
    2352:	91 05       	cpc	r25, r1
    2354:	99 f0       	breq	.+38     	; 0x237c <config+0x16c>
    2356:	2a 89       	ldd	r18, Y+18	; 0x12
    2358:	3b 89       	ldd	r19, Y+19	; 0x13
    235a:	23 30       	cpi	r18, 0x03	; 3
    235c:	31 05       	cpc	r19, r1
    235e:	b9 f0       	breq	.+46     	; 0x238e <config+0x17e>
    2360:	8a 89       	ldd	r24, Y+18	; 0x12
    2362:	9b 89       	ldd	r25, Y+19	; 0x13
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	09 f0       	breq	.+2      	; 0x236a <config+0x15a>
    2368:	66 c1       	rjmp	.+716    	; 0x2636 <config+0x426>
			{
			case NO_PARITY:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_USBS) | (1 << UCSRC_UCSZ0);
    236a:	a0 e4       	ldi	r26, 0x40	; 64
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e0 e4       	ldi	r30, 0x40	; 64
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	81 77       	andi	r24, 0x71	; 113
    2376:	8a 68       	ori	r24, 0x8A	; 138
    2378:	8c 93       	st	X, r24
    237a:	5d c1       	rjmp	.+698    	; 0x2636 <config+0x426>
				break;

			case EVEN:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_USBS) | (1 << UCSRC_UCSZ0);
    237c:	a0 e4       	ldi	r26, 0x40	; 64
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e0 e4       	ldi	r30, 0x40	; 64
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	81 75       	andi	r24, 0x51	; 81
    2388:	8a 6a       	ori	r24, 0xAA	; 170
    238a:	8c 93       	st	X, r24
    238c:	54 c1       	rjmp	.+680    	; 0x2636 <config+0x426>
				break;

			case ODD:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_UPM0) | (1 << UCSRC_USBS) | (1 << UCSRC_UCSZ0);
    238e:	a0 e4       	ldi	r26, 0x40	; 64
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e0 e4       	ldi	r30, 0x40	; 64
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	81 74       	andi	r24, 0x41	; 65
    239a:	8a 6b       	ori	r24, 0xBA	; 186
    239c:	8c 93       	st	X, r24
    239e:	4b c1       	rjmp	.+662    	; 0x2636 <config+0x426>
				break;
			}
		}
		else
		{
			switch (parity)
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	39 8b       	std	Y+17, r19	; 0x11
    23a8:	28 8b       	std	Y+16, r18	; 0x10
    23aa:	88 89       	ldd	r24, Y+16	; 0x10
    23ac:	99 89       	ldd	r25, Y+17	; 0x11
    23ae:	82 30       	cpi	r24, 0x02	; 2
    23b0:	91 05       	cpc	r25, r1
    23b2:	99 f0       	breq	.+38     	; 0x23da <config+0x1ca>
    23b4:	28 89       	ldd	r18, Y+16	; 0x10
    23b6:	39 89       	ldd	r19, Y+17	; 0x11
    23b8:	23 30       	cpi	r18, 0x03	; 3
    23ba:	31 05       	cpc	r19, r1
    23bc:	b9 f0       	breq	.+46     	; 0x23ec <config+0x1dc>
    23be:	88 89       	ldd	r24, Y+16	; 0x10
    23c0:	99 89       	ldd	r25, Y+17	; 0x11
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	09 f0       	breq	.+2      	; 0x23c8 <config+0x1b8>
    23c6:	37 c1       	rjmp	.+622    	; 0x2636 <config+0x426>
			{
			case NO_PARITY:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UCSZ0);
    23c8:	a0 e4       	ldi	r26, 0x40	; 64
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	e0 e4       	ldi	r30, 0x40	; 64
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	89 77       	andi	r24, 0x79	; 121
    23d4:	82 68       	ori	r24, 0x82	; 130
    23d6:	8c 93       	st	X, r24
    23d8:	2e c1       	rjmp	.+604    	; 0x2636 <config+0x426>
				break;

			case EVEN:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_UCSZ0);
    23da:	a0 e4       	ldi	r26, 0x40	; 64
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e0 e4       	ldi	r30, 0x40	; 64
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	89 75       	andi	r24, 0x59	; 89
    23e6:	82 6a       	ori	r24, 0xA2	; 162
    23e8:	8c 93       	st	X, r24
    23ea:	25 c1       	rjmp	.+586    	; 0x2636 <config+0x426>
				break;

			case ODD:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_UPM0) | (1 << UCSRC_UCSZ0);
    23ec:	a0 e4       	ldi	r26, 0x40	; 64
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e0 e4       	ldi	r30, 0x40	; 64
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	89 74       	andi	r24, 0x49	; 73
    23f8:	82 6b       	ori	r24, 0xB2	; 178
    23fa:	8c 93       	st	X, r24
    23fc:	1c c1       	rjmp	.+568    	; 0x2636 <config+0x426>
			}
		}
		break;

	case DATABITS_7:
		if (stopbits == STOPBITS_2)
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	81 30       	cpi	r24, 0x01	; 1
    2402:	79 f5       	brne	.+94     	; 0x2462 <config+0x252>
		{
			switch (parity)
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	3f 87       	std	Y+15, r19	; 0x0f
    240c:	2e 87       	std	Y+14, r18	; 0x0e
    240e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2410:	9f 85       	ldd	r25, Y+15	; 0x0f
    2412:	82 30       	cpi	r24, 0x02	; 2
    2414:	91 05       	cpc	r25, r1
    2416:	99 f0       	breq	.+38     	; 0x243e <config+0x22e>
    2418:	2e 85       	ldd	r18, Y+14	; 0x0e
    241a:	3f 85       	ldd	r19, Y+15	; 0x0f
    241c:	23 30       	cpi	r18, 0x03	; 3
    241e:	31 05       	cpc	r19, r1
    2420:	b9 f0       	breq	.+46     	; 0x2450 <config+0x240>
    2422:	8e 85       	ldd	r24, Y+14	; 0x0e
    2424:	9f 85       	ldd	r25, Y+15	; 0x0f
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	09 f0       	breq	.+2      	; 0x242c <config+0x21c>
    242a:	05 c1       	rjmp	.+522    	; 0x2636 <config+0x426>
			{
			case NO_PARITY:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_USBS) | (1 << UCSRC_UCSZ1);
    242c:	a0 e4       	ldi	r26, 0x40	; 64
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e0 e4       	ldi	r30, 0x40	; 64
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	81 77       	andi	r24, 0x71	; 113
    2438:	8c 68       	ori	r24, 0x8C	; 140
    243a:	8c 93       	st	X, r24
    243c:	fc c0       	rjmp	.+504    	; 0x2636 <config+0x426>
				break;

			case EVEN:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_USBS) | (1 << UCSRC_UCSZ1);
    243e:	a0 e4       	ldi	r26, 0x40	; 64
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e0 e4       	ldi	r30, 0x40	; 64
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	81 75       	andi	r24, 0x51	; 81
    244a:	8c 6a       	ori	r24, 0xAC	; 172
    244c:	8c 93       	st	X, r24
    244e:	f3 c0       	rjmp	.+486    	; 0x2636 <config+0x426>
				break;

			case ODD:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_UPM0) | (1 << UCSRC_USBS) | (1 << UCSRC_UCSZ1);
    2450:	a0 e4       	ldi	r26, 0x40	; 64
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	e0 e4       	ldi	r30, 0x40	; 64
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	81 74       	andi	r24, 0x41	; 65
    245c:	8c 6b       	ori	r24, 0xBC	; 188
    245e:	8c 93       	st	X, r24
    2460:	ea c0       	rjmp	.+468    	; 0x2636 <config+0x426>
				break;
			}
		}
		else
		{
			switch (parity)
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	3d 87       	std	Y+13, r19	; 0x0d
    246a:	2c 87       	std	Y+12, r18	; 0x0c
    246c:	8c 85       	ldd	r24, Y+12	; 0x0c
    246e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2470:	82 30       	cpi	r24, 0x02	; 2
    2472:	91 05       	cpc	r25, r1
    2474:	99 f0       	breq	.+38     	; 0x249c <config+0x28c>
    2476:	2c 85       	ldd	r18, Y+12	; 0x0c
    2478:	3d 85       	ldd	r19, Y+13	; 0x0d
    247a:	23 30       	cpi	r18, 0x03	; 3
    247c:	31 05       	cpc	r19, r1
    247e:	b9 f0       	breq	.+46     	; 0x24ae <config+0x29e>
    2480:	8c 85       	ldd	r24, Y+12	; 0x0c
    2482:	9d 85       	ldd	r25, Y+13	; 0x0d
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	09 f0       	breq	.+2      	; 0x248a <config+0x27a>
    2488:	d6 c0       	rjmp	.+428    	; 0x2636 <config+0x426>
			{
			case NO_PARITY:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UCSZ1);
    248a:	a0 e4       	ldi	r26, 0x40	; 64
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e0 e4       	ldi	r30, 0x40	; 64
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	89 77       	andi	r24, 0x79	; 121
    2496:	84 68       	ori	r24, 0x84	; 132
    2498:	8c 93       	st	X, r24
    249a:	cd c0       	rjmp	.+410    	; 0x2636 <config+0x426>
				break;

			case EVEN:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_UCSZ1);
    249c:	a0 e4       	ldi	r26, 0x40	; 64
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e0 e4       	ldi	r30, 0x40	; 64
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	89 75       	andi	r24, 0x59	; 89
    24a8:	84 6a       	ori	r24, 0xA4	; 164
    24aa:	8c 93       	st	X, r24
    24ac:	c4 c0       	rjmp	.+392    	; 0x2636 <config+0x426>
				break;

			case ODD:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_UPM0) | (1 << UCSRC_UCSZ1);
    24ae:	a0 e4       	ldi	r26, 0x40	; 64
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	e0 e4       	ldi	r30, 0x40	; 64
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	89 74       	andi	r24, 0x49	; 73
    24ba:	84 6b       	ori	r24, 0xB4	; 180
    24bc:	8c 93       	st	X, r24
    24be:	bb c0       	rjmp	.+374    	; 0x2636 <config+0x426>
			}
		}
		break;

	case DATABITS_8:
		if (stopbits == STOPBITS_2)
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	81 30       	cpi	r24, 0x01	; 1
    24c4:	61 f5       	brne	.+88     	; 0x251e <config+0x30e>
		{
			switch (parity)
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	28 2f       	mov	r18, r24
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	3b 87       	std	Y+11, r19	; 0x0b
    24ce:	2a 87       	std	Y+10, r18	; 0x0a
    24d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    24d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    24d4:	82 30       	cpi	r24, 0x02	; 2
    24d6:	91 05       	cpc	r25, r1
    24d8:	91 f0       	breq	.+36     	; 0x24fe <config+0x2ee>
    24da:	2a 85       	ldd	r18, Y+10	; 0x0a
    24dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    24de:	23 30       	cpi	r18, 0x03	; 3
    24e0:	31 05       	cpc	r19, r1
    24e2:	a9 f0       	breq	.+42     	; 0x250e <config+0x2fe>
    24e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	09 f0       	breq	.+2      	; 0x24ee <config+0x2de>
    24ec:	a4 c0       	rjmp	.+328    	; 0x2636 <config+0x426>
			{
			case NO_PARITY:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_USBS) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);
    24ee:	a0 e4       	ldi	r26, 0x40	; 64
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	e0 e4       	ldi	r30, 0x40	; 64
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	8e 68       	ori	r24, 0x8E	; 142
    24fa:	8c 93       	st	X, r24
    24fc:	9c c0       	rjmp	.+312    	; 0x2636 <config+0x426>
				break;

			case EVEN:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_USBS) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);
    24fe:	a0 e4       	ldi	r26, 0x40	; 64
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e0 e4       	ldi	r30, 0x40	; 64
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	8e 6a       	ori	r24, 0xAE	; 174
    250a:	8c 93       	st	X, r24
    250c:	94 c0       	rjmp	.+296    	; 0x2636 <config+0x426>
				break;

			case ODD:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_UPM0) | (1 << UCSRC_USBS) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);
    250e:	a0 e4       	ldi	r26, 0x40	; 64
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	e0 e4       	ldi	r30, 0x40	; 64
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	8e 6b       	ori	r24, 0xBE	; 190
    251a:	8c 93       	st	X, r24
    251c:	8c c0       	rjmp	.+280    	; 0x2636 <config+0x426>
				break;
			}
		}
		else
		{
			switch (parity)
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	39 87       	std	Y+9, r19	; 0x09
    2526:	28 87       	std	Y+8, r18	; 0x08
    2528:	88 85       	ldd	r24, Y+8	; 0x08
    252a:	99 85       	ldd	r25, Y+9	; 0x09
    252c:	82 30       	cpi	r24, 0x02	; 2
    252e:	91 05       	cpc	r25, r1
    2530:	91 f0       	breq	.+36     	; 0x2556 <config+0x346>
    2532:	28 85       	ldd	r18, Y+8	; 0x08
    2534:	39 85       	ldd	r19, Y+9	; 0x09
    2536:	23 30       	cpi	r18, 0x03	; 3
    2538:	31 05       	cpc	r19, r1
    253a:	a9 f0       	breq	.+42     	; 0x2566 <config+0x356>
    253c:	88 85       	ldd	r24, Y+8	; 0x08
    253e:	99 85       	ldd	r25, Y+9	; 0x09
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	09 f0       	breq	.+2      	; 0x2546 <config+0x336>
    2544:	78 c0       	rjmp	.+240    	; 0x2636 <config+0x426>
			{
			case NO_PARITY:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);
    2546:	a0 e4       	ldi	r26, 0x40	; 64
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e0 e4       	ldi	r30, 0x40	; 64
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	86 68       	ori	r24, 0x86	; 134
    2552:	8c 93       	st	X, r24
    2554:	70 c0       	rjmp	.+224    	; 0x2636 <config+0x426>
				break;

			case EVEN:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);
    2556:	a0 e4       	ldi	r26, 0x40	; 64
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e0 e4       	ldi	r30, 0x40	; 64
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	86 6a       	ori	r24, 0xA6	; 166
    2562:	8c 93       	st	X, r24
    2564:	68 c0       	rjmp	.+208    	; 0x2636 <config+0x426>
				break;

			case ODD:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_UPM0) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);
    2566:	a0 e4       	ldi	r26, 0x40	; 64
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e0 e4       	ldi	r30, 0x40	; 64
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	86 6b       	ori	r24, 0xB6	; 182
    2572:	8c 93       	st	X, r24
    2574:	60 c0       	rjmp	.+192    	; 0x2636 <config+0x426>
		}
		break;

	case DATABITS_9:

		SET_BIT(UCSRB_UCSZ2, UCSRB_REG);
    2576:	aa e2       	ldi	r26, 0x2A	; 42
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	ea e2       	ldi	r30, 0x2A	; 42
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	84 60       	ori	r24, 0x04	; 4
    2582:	8c 93       	st	X, r24

		if (stopbits == STOPBITS_2)
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	81 30       	cpi	r24, 0x01	; 1
    2588:	61 f5       	brne	.+88     	; 0x25e2 <config+0x3d2>
		{
			switch (parity)
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	3f 83       	std	Y+7, r19	; 0x07
    2592:	2e 83       	std	Y+6, r18	; 0x06
    2594:	8e 81       	ldd	r24, Y+6	; 0x06
    2596:	9f 81       	ldd	r25, Y+7	; 0x07
    2598:	82 30       	cpi	r24, 0x02	; 2
    259a:	91 05       	cpc	r25, r1
    259c:	91 f0       	breq	.+36     	; 0x25c2 <config+0x3b2>
    259e:	2e 81       	ldd	r18, Y+6	; 0x06
    25a0:	3f 81       	ldd	r19, Y+7	; 0x07
    25a2:	23 30       	cpi	r18, 0x03	; 3
    25a4:	31 05       	cpc	r19, r1
    25a6:	a9 f0       	breq	.+42     	; 0x25d2 <config+0x3c2>
    25a8:	8e 81       	ldd	r24, Y+6	; 0x06
    25aa:	9f 81       	ldd	r25, Y+7	; 0x07
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	09 f0       	breq	.+2      	; 0x25b2 <config+0x3a2>
    25b0:	42 c0       	rjmp	.+132    	; 0x2636 <config+0x426>
			{
			case NO_PARITY:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_USBS) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);
    25b2:	a0 e4       	ldi	r26, 0x40	; 64
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e0 e4       	ldi	r30, 0x40	; 64
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	8e 68       	ori	r24, 0x8E	; 142
    25be:	8c 93       	st	X, r24
    25c0:	3a c0       	rjmp	.+116    	; 0x2636 <config+0x426>
				break;

			case EVEN:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_USBS) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);
    25c2:	a0 e4       	ldi	r26, 0x40	; 64
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e0 e4       	ldi	r30, 0x40	; 64
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	8e 6a       	ori	r24, 0xAE	; 174
    25ce:	8c 93       	st	X, r24
    25d0:	32 c0       	rjmp	.+100    	; 0x2636 <config+0x426>
				break;

			case ODD:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_UPM0) | (1 << UCSRC_USBS) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);
    25d2:	a0 e4       	ldi	r26, 0x40	; 64
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e0 e4       	ldi	r30, 0x40	; 64
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	8e 6b       	ori	r24, 0xBE	; 190
    25de:	8c 93       	st	X, r24
    25e0:	2a c0       	rjmp	.+84     	; 0x2636 <config+0x426>
				break;
			}
		}
		else
		{
			switch (parity)
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	3d 83       	std	Y+5, r19	; 0x05
    25ea:	2c 83       	std	Y+4, r18	; 0x04
    25ec:	8c 81       	ldd	r24, Y+4	; 0x04
    25ee:	9d 81       	ldd	r25, Y+5	; 0x05
    25f0:	82 30       	cpi	r24, 0x02	; 2
    25f2:	91 05       	cpc	r25, r1
    25f4:	89 f0       	breq	.+34     	; 0x2618 <config+0x408>
    25f6:	2c 81       	ldd	r18, Y+4	; 0x04
    25f8:	3d 81       	ldd	r19, Y+5	; 0x05
    25fa:	23 30       	cpi	r18, 0x03	; 3
    25fc:	31 05       	cpc	r19, r1
    25fe:	a1 f0       	breq	.+40     	; 0x2628 <config+0x418>
    2600:	8c 81       	ldd	r24, Y+4	; 0x04
    2602:	9d 81       	ldd	r25, Y+5	; 0x05
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	b9 f4       	brne	.+46     	; 0x2636 <config+0x426>
			{
			case NO_PARITY:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);
    2608:	a0 e4       	ldi	r26, 0x40	; 64
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	e0 e4       	ldi	r30, 0x40	; 64
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	86 68       	ori	r24, 0x86	; 134
    2614:	8c 93       	st	X, r24
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <config+0x426>
				break;

			case EVEN:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);
    2618:	a0 e4       	ldi	r26, 0x40	; 64
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e0 e4       	ldi	r30, 0x40	; 64
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	86 6a       	ori	r24, 0xA6	; 166
    2624:	8c 93       	st	X, r24
    2626:	07 c0       	rjmp	.+14     	; 0x2636 <config+0x426>
				break;

			case ODD:
				UCSRC_REG = (UCSRC_REG & 0xF9) | (1 << UCSRC_URSEL) | (1 << UCSRC_UPM1) | (1 << UCSRC_UPM0) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);
    2628:	a0 e4       	ldi	r26, 0x40	; 64
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	e0 e4       	ldi	r30, 0x40	; 64
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	86 6b       	ori	r24, 0xB6	; 182
    2634:	8c 93       	st	X, r24
				break;
			}
		}
		break;
	}
}
    2636:	69 96       	adiw	r28, 0x19	; 25
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <enableTransmitter>:

static void enableTransmitter(void)
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidConfig(DIO_PIN1, DIO_PORTD, DIO_OUTPUT);
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	63 e0       	ldi	r22, 0x03	; 3
    2654:	41 e0       	ldi	r20, 0x01	; 1
    2656:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>
	SET_BIT(UCSRB_TXEN, UCSRB_REG);
    265a:	aa e2       	ldi	r26, 0x2A	; 42
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	ea e2       	ldi	r30, 0x2A	; 42
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	88 60       	ori	r24, 0x08	; 8
    2666:	8c 93       	st	X, r24
}
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <disableTransmitter>:

static void disableTransmitter(void)
{
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
	while (!CHECK_BIT(UCSRA_TXC, UCSRA_REG));
    2676:	eb e2       	ldi	r30, 0x2B	; 43
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	82 95       	swap	r24
    267e:	86 95       	lsr	r24
    2680:	86 95       	lsr	r24
    2682:	83 70       	andi	r24, 0x03	; 3
    2684:	88 2f       	mov	r24, r24
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	81 70       	andi	r24, 0x01	; 1
    268a:	90 70       	andi	r25, 0x00	; 0
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	99 f3       	breq	.-26     	; 0x2676 <disableTransmitter+0x8>
	CLEAR_BIT(UCSRB_TXEN, UCSRB_REG);
    2690:	aa e2       	ldi	r26, 0x2A	; 42
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	ea e2       	ldi	r30, 0x2A	; 42
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	87 7f       	andi	r24, 0xF7	; 247
    269c:	8c 93       	st	X, r24
}
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <enableReciever>:

static void enableReciever(void)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
	DIO_voidConfig(DIO_PIN0, DIO_PORTD, DIO_INPUT);
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	63 e0       	ldi	r22, 0x03	; 3
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>
	SET_BIT(UCSRB_RXEN, UCSRB_REG);
    26b6:	aa e2       	ldi	r26, 0x2A	; 42
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	ea e2       	ldi	r30, 0x2A	; 42
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	80 61       	ori	r24, 0x10	; 16
    26c2:	8c 93       	st	X, r24
}
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	08 95       	ret

000026ca <disableReciever>:

static void disableReciever(void)
{
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
	while (!CHECK_BIT(UCSRA_RXC, UCSRA_REG));
    26d2:	eb e2       	ldi	r30, 0x2B	; 43
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	88 23       	and	r24, r24
    26da:	dc f7       	brge	.-10     	; 0x26d2 <disableReciever+0x8>
	CLEAR_BIT(UCSRB_RXEN, UCSRB_REG);
    26dc:	aa e2       	ldi	r26, 0x2A	; 42
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	ea e2       	ldi	r30, 0x2A	; 42
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	8f 7e       	andi	r24, 0xEF	; 239
    26e8:	8c 93       	st	X, r24
}
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	08 95       	ret

000026f0 <setBaudrate>:

static void setBaudrate(uint32_t baudrate)
{
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <setBaudrate+0xa>
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <setBaudrate+0xc>
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	69 83       	std	Y+1, r22	; 0x01
    2702:	7a 83       	std	Y+2, r23	; 0x02
    2704:	8b 83       	std	Y+3, r24	; 0x03
    2706:	9c 83       	std	Y+4, r25	; 0x04
	UBRRL_REG = ((FCPU/(16 * baudrate)) - 1);
    2708:	09 e2       	ldi	r16, 0x29	; 41
    270a:	10 e0       	ldi	r17, 0x00	; 0
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	9a 81       	ldd	r25, Y+2	; 0x02
    2710:	ab 81       	ldd	r26, Y+3	; 0x03
    2712:	bc 81       	ldd	r27, Y+4	; 0x04
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	aa 1f       	adc	r26, r26
    271a:	bb 1f       	adc	r27, r27
    271c:	88 0f       	add	r24, r24
    271e:	99 1f       	adc	r25, r25
    2720:	aa 1f       	adc	r26, r26
    2722:	bb 1f       	adc	r27, r27
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	aa 1f       	adc	r26, r26
    272a:	bb 1f       	adc	r27, r27
    272c:	88 0f       	add	r24, r24
    272e:	99 1f       	adc	r25, r25
    2730:	aa 1f       	adc	r26, r26
    2732:	bb 1f       	adc	r27, r27
    2734:	9c 01       	movw	r18, r24
    2736:	ad 01       	movw	r20, r26
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	94 e2       	ldi	r25, 0x24	; 36
    273c:	a4 ef       	ldi	r26, 0xF4	; 244
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	bc 01       	movw	r22, r24
    2742:	cd 01       	movw	r24, r26
    2744:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__udivmodsi4>
    2748:	da 01       	movw	r26, r20
    274a:	c9 01       	movw	r24, r18
    274c:	81 50       	subi	r24, 0x01	; 1
    274e:	f8 01       	movw	r30, r16
    2750:	80 83       	st	Z, r24
	UBRRH_REG = (((FCPU/(16 * baudrate)) - 1) >> 8);
    2752:	00 e4       	ldi	r16, 0x40	; 64
    2754:	10 e0       	ldi	r17, 0x00	; 0
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	9a 81       	ldd	r25, Y+2	; 0x02
    275a:	ab 81       	ldd	r26, Y+3	; 0x03
    275c:	bc 81       	ldd	r27, Y+4	; 0x04
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	aa 1f       	adc	r26, r26
    2764:	bb 1f       	adc	r27, r27
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	aa 1f       	adc	r26, r26
    276c:	bb 1f       	adc	r27, r27
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	aa 1f       	adc	r26, r26
    2774:	bb 1f       	adc	r27, r27
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	aa 1f       	adc	r26, r26
    277c:	bb 1f       	adc	r27, r27
    277e:	9c 01       	movw	r18, r24
    2780:	ad 01       	movw	r20, r26
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	94 e2       	ldi	r25, 0x24	; 36
    2786:	a4 ef       	ldi	r26, 0xF4	; 244
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__udivmodsi4>
    2792:	da 01       	movw	r26, r20
    2794:	c9 01       	movw	r24, r18
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	a1 09       	sbc	r26, r1
    279a:	b1 09       	sbc	r27, r1
    279c:	89 2f       	mov	r24, r25
    279e:	9a 2f       	mov	r25, r26
    27a0:	ab 2f       	mov	r26, r27
    27a2:	bb 27       	eor	r27, r27
    27a4:	f8 01       	movw	r30, r16
    27a6:	80 83       	st	Z, r24
}
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	1f 91       	pop	r17
    27b6:	0f 91       	pop	r16
    27b8:	08 95       	ret

000027ba <TIMER_Init>:
void (*CallBack0) (void);
void (*CallBack1) (void);
void (*CallBack2) (void);

void TIMER_Init(TIMER_Channel_t channel)
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	0f 92       	push	r0
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	89 83       	std	Y+1, r24	; 0x01
	GINT_Enable();
    27c6:	0e 94 98 1c 	call	0x3930	; 0x3930 <GINT_Enable>
	switch (channel)
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	88 2f       	mov	r24, r24
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	a9 f4       	brne	.+42     	; 0x27fe <TIMER_Init+0x44>
	{
	case TIMER0:
		#if (TIMER0_MODE == NORMAL)
			// Normal mode.
			CLEAR_BIT(TCCR0_WGM00, TCCR0_REG);
    27d4:	a3 e5       	ldi	r26, 0x53	; 83
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e3 e5       	ldi	r30, 0x53	; 83
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	8f 7b       	andi	r24, 0xBF	; 191
    27e0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0_WGM01, TCCR0_REG);
    27e2:	a3 e5       	ldi	r26, 0x53	; 83
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	e3 e5       	ldi	r30, 0x53	; 83
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	87 7f       	andi	r24, 0xF7	; 247
    27ee:	8c 93       	st	X, r24
			// Overflow interrupt.
			SET_BIT(TIMSK_TOIE0, TIMSK_REG);
    27f0:	a9 e5       	ldi	r26, 0x59	; 89
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	e9 e5       	ldi	r30, 0x59	; 89
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	81 60       	ori	r24, 0x01	; 1
    27fc:	8c 93       	st	X, r24
		break;

	case TIMER2:
		break;
	}
}
    27fe:	0f 90       	pop	r0
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <TIMER_SetTime>:

void TIMER_SetTime(TIMER_Channel_t channel, uint32_t desiredTime_ms)
{
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	2a 97       	sbiw	r28, 0x0a	; 10
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
    281a:	8e 83       	std	Y+6, r24	; 0x06
    281c:	4f 83       	std	Y+7, r20	; 0x07
    281e:	58 87       	std	Y+8, r21	; 0x08
    2820:	69 87       	std	Y+9, r22	; 0x09
    2822:	7a 87       	std	Y+10, r23	; 0x0a
	switch (channel)
    2824:	8e 81       	ldd	r24, Y+6	; 0x06
    2826:	88 2f       	mov	r24, r24
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	09 f0       	breq	.+2      	; 0x2830 <TIMER_SetTime+0x2a>
    282e:	73 c0       	rjmp	.+230    	; 0x2916 <TIMER_SetTime+0x110>
	{
	case TIMER0:;
			uint8_t tickTime = PRESCALER0 / FCPU_MHz; 					// in microseconds
    2830:	80 e4       	ldi	r24, 0x40	; 64
    2832:	8d 83       	std	Y+5, r24	; 0x05
			uint32_t totalTicks = (desiredTime_ms * 1000) / tickTime;
    2834:	8f 81       	ldd	r24, Y+7	; 0x07
    2836:	98 85       	ldd	r25, Y+8	; 0x08
    2838:	a9 85       	ldd	r26, Y+9	; 0x09
    283a:	ba 85       	ldd	r27, Y+10	; 0x0a
    283c:	28 ee       	ldi	r18, 0xE8	; 232
    283e:	33 e0       	ldi	r19, 0x03	; 3
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	50 e0       	ldi	r21, 0x00	; 0
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsi3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	2d 81       	ldd	r18, Y+5	; 0x05
    2852:	22 2f       	mov	r18, r18
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__udivmodsi4>
    2862:	da 01       	movw	r26, r20
    2864:	c9 01       	movw	r24, r18
    2866:	89 83       	std	Y+1, r24	; 0x01
    2868:	9a 83       	std	Y+2, r25	; 0x02
    286a:	ab 83       	std	Y+3, r26	; 0x03
    286c:	bc 83       	std	Y+4, r27	; 0x04

		#if	(TIMER0_MODE == NORMAL)

				TIMER_nOVF = totalTicks / 256;
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	ab 81       	ldd	r26, Y+3	; 0x03
    2874:	bc 81       	ldd	r27, Y+4	; 0x04
    2876:	89 2f       	mov	r24, r25
    2878:	9a 2f       	mov	r25, r26
    287a:	ab 2f       	mov	r26, r27
    287c:	bb 27       	eor	r27, r27
    287e:	80 93 ac 01 	sts	0x01AC, r24
    2882:	90 93 ad 01 	sts	0x01AD, r25
    2886:	a0 93 ae 01 	sts	0x01AE, r26
    288a:	b0 93 af 01 	sts	0x01AF, r27
				TIMER_intialPreload = 256 - (totalTicks % 256);
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	9a 81       	ldd	r25, Y+2	; 0x02
    2892:	ab 81       	ldd	r26, Y+3	; 0x03
    2894:	bc 81       	ldd	r27, Y+4	; 0x04
    2896:	9c 01       	movw	r18, r24
    2898:	ad 01       	movw	r20, r26
    289a:	30 70       	andi	r19, 0x00	; 0
    289c:	40 70       	andi	r20, 0x00	; 0
    289e:	50 70       	andi	r21, 0x00	; 0
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	91 e0       	ldi	r25, 0x01	; 1
    28a4:	a0 e0       	ldi	r26, 0x00	; 0
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	82 1b       	sub	r24, r18
    28aa:	93 0b       	sbc	r25, r19
    28ac:	a4 0b       	sbc	r26, r20
    28ae:	b5 0b       	sbc	r27, r21
    28b0:	80 93 b2 01 	sts	0x01B2, r24
    28b4:	90 93 b3 01 	sts	0x01B3, r25
    28b8:	a0 93 b4 01 	sts	0x01B4, r26
    28bc:	b0 93 b5 01 	sts	0x01B5, r27

				if ((totalTicks % 256) != 0)
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	9a 81       	ldd	r25, Y+2	; 0x02
    28c4:	ab 81       	ldd	r26, Y+3	; 0x03
    28c6:	bc 81       	ldd	r27, Y+4	; 0x04
    28c8:	90 70       	andi	r25, 0x00	; 0
    28ca:	a0 70       	andi	r26, 0x00	; 0
    28cc:	b0 70       	andi	r27, 0x00	; 0
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	a1 05       	cpc	r26, r1
    28d2:	b1 05       	cpc	r27, r1
    28d4:	01 f1       	breq	.+64     	; 0x2916 <TIMER_SetTime+0x110>
				{
					TIMER_SetTCNT(TIMER0, TIMER_intialPreload);
    28d6:	80 91 b2 01 	lds	r24, 0x01B2
    28da:	90 91 b3 01 	lds	r25, 0x01B3
    28de:	a0 91 b4 01 	lds	r26, 0x01B4
    28e2:	b0 91 b5 01 	lds	r27, 0x01B5
    28e6:	9c 01       	movw	r18, r24
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	b9 01       	movw	r22, r18
    28ec:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <TIMER_SetTCNT>
					++TIMER_nOVF;
    28f0:	80 91 ac 01 	lds	r24, 0x01AC
    28f4:	90 91 ad 01 	lds	r25, 0x01AD
    28f8:	a0 91 ae 01 	lds	r26, 0x01AE
    28fc:	b0 91 af 01 	lds	r27, 0x01AF
    2900:	01 96       	adiw	r24, 0x01	; 1
    2902:	a1 1d       	adc	r26, r1
    2904:	b1 1d       	adc	r27, r1
    2906:	80 93 ac 01 	sts	0x01AC, r24
    290a:	90 93 ad 01 	sts	0x01AD, r25
    290e:	a0 93 ae 01 	sts	0x01AE, r26
    2912:	b0 93 af 01 	sts	0x01AF, r27
		break;

	case TIMER2:
		break;
	}
}
    2916:	2a 96       	adiw	r28, 0x0a	; 10
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <TIMER_Start>:

void TIMER_Start(TIMER_Channel_t channel)
{
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	00 d0       	rcall	.+0      	; 0x292e <TIMER_Start+0x6>
    292e:	0f 92       	push	r0
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	89 83       	std	Y+1, r24	; 0x01
	switch (channel)
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	28 2f       	mov	r18, r24
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	3b 83       	std	Y+3, r19	; 0x03
    293e:	2a 83       	std	Y+2, r18	; 0x02
    2940:	8a 81       	ldd	r24, Y+2	; 0x02
    2942:	9b 81       	ldd	r25, Y+3	; 0x03
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	31 f0       	breq	.+12     	; 0x2954 <TIMER_Start+0x2c>
    2948:	2a 81       	ldd	r18, Y+2	; 0x02
    294a:	3b 81       	ldd	r19, Y+3	; 0x03
    294c:	21 30       	cpi	r18, 0x01	; 1
    294e:	31 05       	cpc	r19, r1
    2950:	b9 f0       	breq	.+46     	; 0x2980 <TIMER_Start+0x58>
    2952:	2b c0       	rjmp	.+86     	; 0x29aa <TIMER_Start+0x82>
	{
	case TIMER0:
		#if (PRESCALER0 == 1024)

				SET_BIT(TCCR0_CS00, TCCR0_REG);
    2954:	a3 e5       	ldi	r26, 0x53	; 83
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e3 e5       	ldi	r30, 0x53	; 83
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	81 60       	ori	r24, 0x01	; 1
    2960:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0_CS01, TCCR0_REG);
    2962:	a3 e5       	ldi	r26, 0x53	; 83
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e3 e5       	ldi	r30, 0x53	; 83
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	8d 7f       	andi	r24, 0xFD	; 253
    296e:	8c 93       	st	X, r24
				SET_BIT(TCCR0_CS02, TCCR0_REG);
    2970:	a3 e5       	ldi	r26, 0x53	; 83
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e3 e5       	ldi	r30, 0x53	; 83
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	84 60       	ori	r24, 0x04	; 4
    297c:	8c 93       	st	X, r24
    297e:	15 c0       	rjmp	.+42     	; 0x29aa <TIMER_Start+0x82>
		break;

	case TIMER1:
		#if (PRESCALER1 == 256)

			SET_BIT(TCCR1B_CS12, TCCR1B_REG);
    2980:	ae e4       	ldi	r26, 0x4E	; 78
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	ee e4       	ldi	r30, 0x4E	; 78
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	84 60       	ori	r24, 0x04	; 4
    298c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B_CS11, TCCR1B_REG);
    298e:	ae e4       	ldi	r26, 0x4E	; 78
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	ee e4       	ldi	r30, 0x4E	; 78
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	8d 7f       	andi	r24, 0xFD	; 253
    299a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B_CS10, TCCR1B_REG);
    299c:	ae e4       	ldi	r26, 0x4E	; 78
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	ee e4       	ldi	r30, 0x4E	; 78
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	8e 7f       	andi	r24, 0xFE	; 254
    29a8:	8c 93       	st	X, r24
		break;

	case TIMER2:
		break;
	}
}
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <TIMER_Stop>:

void TIMER_Stop(TIMER_Channel_t channel)
{
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	00 d0       	rcall	.+0      	; 0x29bc <TIMER_Stop+0x6>
    29bc:	0f 92       	push	r0
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	89 83       	std	Y+1, r24	; 0x01
	switch (channel)
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	28 2f       	mov	r18, r24
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	3b 83       	std	Y+3, r19	; 0x03
    29cc:	2a 83       	std	Y+2, r18	; 0x02
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	9b 81       	ldd	r25, Y+3	; 0x03
    29d2:	00 97       	sbiw	r24, 0x00	; 0
    29d4:	31 f0       	breq	.+12     	; 0x29e2 <TIMER_Stop+0x2c>
    29d6:	2a 81       	ldd	r18, Y+2	; 0x02
    29d8:	3b 81       	ldd	r19, Y+3	; 0x03
    29da:	21 30       	cpi	r18, 0x01	; 1
    29dc:	31 05       	cpc	r19, r1
    29de:	b9 f0       	breq	.+46     	; 0x2a0e <TIMER_Stop+0x58>
    29e0:	2b c0       	rjmp	.+86     	; 0x2a38 <TIMER_Stop+0x82>
	{
	case TIMER0:
		CLEAR_BIT(TCCR0_CS02, TCCR0_REG);
    29e2:	a3 e5       	ldi	r26, 0x53	; 83
    29e4:	b0 e0       	ldi	r27, 0x00	; 0
    29e6:	e3 e5       	ldi	r30, 0x53	; 83
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	8b 7f       	andi	r24, 0xFB	; 251
    29ee:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0_CS01, TCCR0_REG);
    29f0:	a3 e5       	ldi	r26, 0x53	; 83
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	e3 e5       	ldi	r30, 0x53	; 83
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	8d 7f       	andi	r24, 0xFD	; 253
    29fc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0_CS00, TCCR0_REG);
    29fe:	a3 e5       	ldi	r26, 0x53	; 83
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	e3 e5       	ldi	r30, 0x53	; 83
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	8e 7f       	andi	r24, 0xFE	; 254
    2a0a:	8c 93       	st	X, r24
    2a0c:	15 c0       	rjmp	.+42     	; 0x2a38 <TIMER_Stop+0x82>
		break;

	case TIMER1:
		CLEAR_BIT(TCCR1B_CS12, TCCR1B_REG);
    2a0e:	ae e4       	ldi	r26, 0x4E	; 78
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	ee e4       	ldi	r30, 0x4E	; 78
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	8b 7f       	andi	r24, 0xFB	; 251
    2a1a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B_CS11, TCCR1B_REG);
    2a1c:	ae e4       	ldi	r26, 0x4E	; 78
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	ee e4       	ldi	r30, 0x4E	; 78
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
    2a26:	8d 7f       	andi	r24, 0xFD	; 253
    2a28:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B_CS10, TCCR1B_REG);
    2a2a:	ae e4       	ldi	r26, 0x4E	; 78
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	ee e4       	ldi	r30, 0x4E	; 78
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	8e 7f       	andi	r24, 0xFE	; 254
    2a36:	8c 93       	st	X, r24
		break;

	case TIMER2:
		break;
	}
}
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <TIMER_SetCallBack>:

void TIMER_SetCallBack(TIMER_Channel_t channel, void (*CallBack)(void))
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <TIMER_SetCallBack+0x6>
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <TIMER_SetCallBack+0x8>
    2a4c:	0f 92       	push	r0
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	7b 83       	std	Y+3, r23	; 0x03
    2a56:	6a 83       	std	Y+2, r22	; 0x02
	switch (channel)
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	3d 83       	std	Y+5, r19	; 0x05
    2a60:	2c 83       	std	Y+4, r18	; 0x04
    2a62:	8c 81       	ldd	r24, Y+4	; 0x04
    2a64:	9d 81       	ldd	r25, Y+5	; 0x05
    2a66:	81 30       	cpi	r24, 0x01	; 1
    2a68:	91 05       	cpc	r25, r1
    2a6a:	81 f0       	breq	.+32     	; 0x2a8c <TIMER_SetCallBack+0x48>
    2a6c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a6e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a70:	22 30       	cpi	r18, 0x02	; 2
    2a72:	31 05       	cpc	r19, r1
    2a74:	91 f0       	breq	.+36     	; 0x2a9a <TIMER_SetCallBack+0x56>
    2a76:	8c 81       	ldd	r24, Y+4	; 0x04
    2a78:	9d 81       	ldd	r25, Y+5	; 0x05
    2a7a:	00 97       	sbiw	r24, 0x00	; 0
    2a7c:	a1 f4       	brne	.+40     	; 0x2aa6 <TIMER_SetCallBack+0x62>
	{
	case TIMER0:
		CallBack0 = CallBack;
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	9b 81       	ldd	r25, Y+3	; 0x03
    2a82:	90 93 ab 01 	sts	0x01AB, r25
    2a86:	80 93 aa 01 	sts	0x01AA, r24
    2a8a:	0d c0       	rjmp	.+26     	; 0x2aa6 <TIMER_SetCallBack+0x62>
		break;

	case TIMER1:
		CallBack1 = CallBack;
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a90:	90 93 a9 01 	sts	0x01A9, r25
    2a94:	80 93 a8 01 	sts	0x01A8, r24
    2a98:	06 c0       	rjmp	.+12     	; 0x2aa6 <TIMER_SetCallBack+0x62>
		break;

	case TIMER2:
		CallBack2 = CallBack;
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9e:	90 93 b1 01 	sts	0x01B1, r25
    2aa2:	80 93 b0 01 	sts	0x01B0, r24
		break;
	}
}
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <TIMER_SetTCNT>:

static void TIMER_SetTCNT(TIMER_Channel_t channel, uint16__t preLoad)
{
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	00 d0       	rcall	.+0      	; 0x2abc <TIMER_SetTCNT+0x6>
    2abc:	0f 92       	push	r0
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
    2ac2:	89 83       	std	Y+1, r24	; 0x01
    2ac4:	7b 83       	std	Y+3, r23	; 0x03
    2ac6:	6a 83       	std	Y+2, r22	; 0x02
	switch (channel)
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	88 2f       	mov	r24, r24
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	21 f4       	brne	.+8      	; 0x2ada <TIMER_SetTCNT+0x24>
	{
	case TIMER0:
		TCNT0_REG = preLoad;
    2ad2:	e2 e5       	ldi	r30, 0x52	; 82
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	80 83       	st	Z, r24
		break;

	case TIMER2:
		break;
	}
}
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <TIMER_SetOCR>:

static void TIMER_SetOCR(TIMER_Channel_t channel, uint16__t ocrValue)
{
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	00 d0       	rcall	.+0      	; 0x2aec <TIMER_SetOCR+0x6>
    2aec:	0f 92       	push	r0
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	89 83       	std	Y+1, r24	; 0x01
    2af4:	7b 83       	std	Y+3, r23	; 0x03
    2af6:	6a 83       	std	Y+2, r22	; 0x02
	switch (channel)
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	88 2f       	mov	r24, r24
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	00 97       	sbiw	r24, 0x00	; 0
    2b00:	21 f4       	brne	.+8      	; 0x2b0a <TIMER_SetOCR+0x24>
	{
	case TIMER0:
		OCR0_REG = ocrValue;
    2b02:	ec e5       	ldi	r30, 0x5C	; 92
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	80 83       	st	Z, r24
		break;

	case TIMER2:
		break;
	}
}
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	08 95       	ret

00002b16 <TIMER_PWM_Init>:

void TIMER_PWM_Init(TIMER_Channel_t channel)
{
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <TIMER_PWM_Init+0x6>
    2b1c:	0f 92       	push	r0
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
    2b22:	89 83       	std	Y+1, r24	; 0x01
	switch (channel)
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	28 2f       	mov	r18, r24
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	3b 83       	std	Y+3, r19	; 0x03
    2b2c:	2a 83       	std	Y+2, r18	; 0x02
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	9b 81       	ldd	r25, Y+3	; 0x03
    2b32:	00 97       	sbiw	r24, 0x00	; 0
    2b34:	31 f0       	breq	.+12     	; 0x2b42 <TIMER_PWM_Init+0x2c>
    2b36:	2a 81       	ldd	r18, Y+2	; 0x02
    2b38:	3b 81       	ldd	r19, Y+3	; 0x03
    2b3a:	21 30       	cpi	r18, 0x01	; 1
    2b3c:	31 05       	cpc	r19, r1
    2b3e:	19 f1       	breq	.+70     	; 0x2b86 <TIMER_PWM_Init+0x70>
    2b40:	51 c0       	rjmp	.+162    	; 0x2be4 <TIMER_PWM_Init+0xce>
	{
	case TIMER0:
		DIO_voidConfig(DIO_PIN3, DIO_PORTB, DIO_OUTPUT);
    2b42:	83 e0       	ldi	r24, 0x03	; 3
    2b44:	61 e0       	ldi	r22, 0x01	; 1
    2b46:	41 e0       	ldi	r20, 0x01	; 1
    2b48:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>
				#error " 'TIMER.c' Please configure FAST_PWM0_MODE in TIMER_Config.h "
			#endif

		#elif (PWM0_MODE == PHASE_CORRECT_PWM0)

			SET_BIT(TCCR0_WGM00, TCCR0_REG);
    2b4c:	a3 e5       	ldi	r26, 0x53	; 83
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	e3 e5       	ldi	r30, 0x53	; 83
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	80 64       	ori	r24, 0x40	; 64
    2b58:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0_WGM01, TCCR0_REG);
    2b5a:	a3 e5       	ldi	r26, 0x53	; 83
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	e3 e5       	ldi	r30, 0x53	; 83
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	87 7f       	andi	r24, 0xF7	; 247
    2b66:	8c 93       	st	X, r24


			#if (PHASE_CORRECT0_MODE == NON_INVERTED)

					CLEAR_BIT(TCCR0_COM00, TCCR0_REG);
    2b68:	a3 e5       	ldi	r26, 0x53	; 83
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	e3 e5       	ldi	r30, 0x53	; 83
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	8f 7e       	andi	r24, 0xEF	; 239
    2b74:	8c 93       	st	X, r24
					SET_BIT(TCCR0_COM01, TCCR0_REG);
    2b76:	a3 e5       	ldi	r26, 0x53	; 83
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e3 e5       	ldi	r30, 0x53	; 83
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	80 62       	ori	r24, 0x20	; 32
    2b82:	8c 93       	st	X, r24
    2b84:	2f c0       	rjmp	.+94     	; 0x2be4 <TIMER_PWM_Init+0xce>
		#endif
		break;

	case TIMER1:
		// To select mode 14
		CLEAR_BIT(TCCR1A_WGM10, TCCR1A_REG);
    2b86:	af e4       	ldi	r26, 0x4F	; 79
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	ef e4       	ldi	r30, 0x4F	; 79
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	8e 7f       	andi	r24, 0xFE	; 254
    2b92:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_WGM11, TCCR1A_REG);
    2b94:	af e4       	ldi	r26, 0x4F	; 79
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	ef e4       	ldi	r30, 0x4F	; 79
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	82 60       	ori	r24, 0x02	; 2
    2ba0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_WGM12, TCCR1B_REG);
    2ba2:	ae e4       	ldi	r26, 0x4E	; 78
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	ee e4       	ldi	r30, 0x4E	; 78
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	88 60       	ori	r24, 0x08	; 8
    2bae:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_WGM13, TCCR1B_REG);
    2bb0:	ae e4       	ldi	r26, 0x4E	; 78
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	ee e4       	ldi	r30, 0x4E	; 78
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	80 61       	ori	r24, 0x10	; 16
    2bbc:	8c 93       	st	X, r24

		DIO_voidConfig(DIO_PIN5, DIO_PORTD, DIO_OUTPUT);
    2bbe:	85 e0       	ldi	r24, 0x05	; 5
    2bc0:	63 e0       	ldi	r22, 0x03	; 3
    2bc2:	41 e0       	ldi	r20, 0x01	; 1
    2bc4:	0e 94 b4 1c 	call	0x3968	; 0x3968 <DIO_voidConfig>

		// To select non inverted on OC1A pin
		SET_BIT(TCCR1A_COM1A1, TCCR1A_REG);
    2bc8:	af e4       	ldi	r26, 0x4F	; 79
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	ef e4       	ldi	r30, 0x4F	; 79
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	80 68       	ori	r24, 0x80	; 128
    2bd4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A_COM1A0, TCCR1A_REG);
    2bd6:	af e4       	ldi	r26, 0x4F	; 79
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	ef e4       	ldi	r30, 0x4F	; 79
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	80 81       	ld	r24, Z
    2be0:	8f 7b       	andi	r24, 0xBF	; 191
    2be2:	8c 93       	st	X, r24
		break;

	case TIMER2:
		break;
	}
}
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <TIMER_PWM1_SetFrequency>:

void TIMER_PWM1_SetFrequency(uint32_t frequency_Hz)
{
    2bf0:	0f 93       	push	r16
    2bf2:	1f 93       	push	r17
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <TIMER_PWM1_SetFrequency+0xa>
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <TIMER_PWM1_SetFrequency+0xc>
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	69 83       	std	Y+1, r22	; 0x01
    2c02:	7a 83       	std	Y+2, r23	; 0x02
    2c04:	8b 83       	std	Y+3, r24	; 0x03
    2c06:	9c 83       	std	Y+4, r25	; 0x04
	ICR1_REG = (FCPU_Hz / (frequency_Hz * PRESCALER1));
    2c08:	06 e4       	ldi	r16, 0x46	; 70
    2c0a:	10 e0       	ldi	r17, 0x00	; 0
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c10:	ab 81       	ldd	r26, Y+3	; 0x03
    2c12:	bc 81       	ldd	r27, Y+4	; 0x04
    2c14:	22 27       	eor	r18, r18
    2c16:	38 2f       	mov	r19, r24
    2c18:	49 2f       	mov	r20, r25
    2c1a:	5a 2f       	mov	r21, r26
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	94 e2       	ldi	r25, 0x24	; 36
    2c20:	a4 ef       	ldi	r26, 0xF4	; 244
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__udivmodsi4>
    2c2c:	da 01       	movw	r26, r20
    2c2e:	c9 01       	movw	r24, r18
    2c30:	f8 01       	movw	r30, r16
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	80 83       	st	Z, r24
}
    2c36:	0f 90       	pop	r0
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	cf 91       	pop	r28
    2c40:	df 91       	pop	r29
    2c42:	1f 91       	pop	r17
    2c44:	0f 91       	pop	r16
    2c46:	08 95       	ret

00002c48 <TIMER_PWM_Start>:

void TIMER_PWM_Start(TIMER_Channel_t channel)
{
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	00 d0       	rcall	.+0      	; 0x2c4e <TIMER_PWM_Start+0x6>
    2c4e:	0f 92       	push	r0
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	89 83       	std	Y+1, r24	; 0x01
	switch (channel)
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	28 2f       	mov	r18, r24
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	3b 83       	std	Y+3, r19	; 0x03
    2c5e:	2a 83       	std	Y+2, r18	; 0x02
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	9b 81       	ldd	r25, Y+3	; 0x03
    2c64:	81 30       	cpi	r24, 0x01	; 1
    2c66:	91 05       	cpc	r25, r1
    2c68:	69 f0       	breq	.+26     	; 0x2c84 <TIMER_PWM_Start+0x3c>
    2c6a:	2a 81       	ldd	r18, Y+2	; 0x02
    2c6c:	3b 81       	ldd	r19, Y+3	; 0x03
    2c6e:	22 30       	cpi	r18, 0x02	; 2
    2c70:	31 05       	cpc	r19, r1
    2c72:	61 f0       	breq	.+24     	; 0x2c8c <TIMER_PWM_Start+0x44>
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	9b 81       	ldd	r25, Y+3	; 0x03
    2c78:	00 97       	sbiw	r24, 0x00	; 0
    2c7a:	59 f4       	brne	.+22     	; 0x2c92 <TIMER_PWM_Start+0x4a>
	{
	case TIMER0:
		TIMER_Start(TIMER0);
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	0e 94 94 14 	call	0x2928	; 0x2928 <TIMER_Start>
    2c82:	07 c0       	rjmp	.+14     	; 0x2c92 <TIMER_PWM_Start+0x4a>
		break;

	case TIMER1:
		TIMER_Start(TIMER1);
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	0e 94 94 14 	call	0x2928	; 0x2928 <TIMER_Start>
    2c8a:	03 c0       	rjmp	.+6      	; 0x2c92 <TIMER_PWM_Start+0x4a>
		break;

	case TIMER2:
		TIMER_Start(TIMER2);
    2c8c:	82 e0       	ldi	r24, 0x02	; 2
    2c8e:	0e 94 94 14 	call	0x2928	; 0x2928 <TIMER_Start>
		break;
	}
}
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	08 95       	ret

00002c9e <TIMER_PWM_Stop>:

void TIMER_PWM_Stop(TIMER_Channel_t channel)
{
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <TIMER_PWM_Stop+0x6>
    2ca4:	0f 92       	push	r0
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	89 83       	std	Y+1, r24	; 0x01
	switch (channel)
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	3b 83       	std	Y+3, r19	; 0x03
    2cb4:	2a 83       	std	Y+2, r18	; 0x02
    2cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cba:	81 30       	cpi	r24, 0x01	; 1
    2cbc:	91 05       	cpc	r25, r1
    2cbe:	69 f0       	breq	.+26     	; 0x2cda <TIMER_PWM_Stop+0x3c>
    2cc0:	2a 81       	ldd	r18, Y+2	; 0x02
    2cc2:	3b 81       	ldd	r19, Y+3	; 0x03
    2cc4:	22 30       	cpi	r18, 0x02	; 2
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	61 f0       	breq	.+24     	; 0x2ce2 <TIMER_PWM_Stop+0x44>
    2cca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	59 f4       	brne	.+22     	; 0x2ce8 <TIMER_PWM_Stop+0x4a>
	{
	case TIMER0:
		TIMER_Stop(TIMER0);
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	0e 94 db 14 	call	0x29b6	; 0x29b6 <TIMER_Stop>
    2cd8:	07 c0       	rjmp	.+14     	; 0x2ce8 <TIMER_PWM_Stop+0x4a>
		break;

	case TIMER1:
		TIMER_Stop(TIMER1);
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	0e 94 db 14 	call	0x29b6	; 0x29b6 <TIMER_Stop>
    2ce0:	03 c0       	rjmp	.+6      	; 0x2ce8 <TIMER_PWM_Stop+0x4a>
		break;

	case TIMER2:
		TIMER_Stop(TIMER2);
    2ce2:	82 e0       	ldi	r24, 0x02	; 2
    2ce4:	0e 94 db 14 	call	0x29b6	; 0x29b6 <TIMER_Stop>
		break;
	}
}
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <TIMER_PWM_SetDutyCycle>:

void TIMER_PWM_SetDutyCycle(TIMER_Channel_t channel, uint8_t dutyCycle)
{
    2cf4:	0f 93       	push	r16
    2cf6:	1f 93       	push	r17
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <TIMER_PWM_SetDutyCycle+0xa>
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <TIMER_PWM_SetDutyCycle+0xc>
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	6a 83       	std	Y+2, r22	; 0x02
	switch (channel)
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	28 2f       	mov	r18, r24
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	3c 83       	std	Y+4, r19	; 0x04
    2d10:	2b 83       	std	Y+3, r18	; 0x03
    2d12:	4b 81       	ldd	r20, Y+3	; 0x03
    2d14:	5c 81       	ldd	r21, Y+4	; 0x04
    2d16:	41 15       	cp	r20, r1
    2d18:	51 05       	cpc	r21, r1
    2d1a:	31 f0       	breq	.+12     	; 0x2d28 <TIMER_PWM_SetDutyCycle+0x34>
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d20:	81 30       	cpi	r24, 0x01	; 1
    2d22:	91 05       	cpc	r25, r1
    2d24:	f1 f0       	breq	.+60     	; 0x2d62 <TIMER_PWM_SetDutyCycle+0x6e>
    2d26:	39 c0       	rjmp	.+114    	; 0x2d9a <TIMER_PWM_SetDutyCycle+0xa6>

		#elif (PWM0_MODE == PHASE_CORRECT_PWM0)

			#if (PHASE_CORRECT0_MODE == NON_INVERTED)

				TIMER_SetOCR(TIMER0, ((dutyCycle * 255) / 100));
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	48 2f       	mov	r20, r24
    2d2c:	50 e0       	ldi	r21, 0x00	; 0
    2d2e:	ca 01       	movw	r24, r20
    2d30:	9c 01       	movw	r18, r24
    2d32:	22 0f       	add	r18, r18
    2d34:	33 1f       	adc	r19, r19
    2d36:	c9 01       	movw	r24, r18
    2d38:	96 95       	lsr	r25
    2d3a:	98 2f       	mov	r25, r24
    2d3c:	88 27       	eor	r24, r24
    2d3e:	97 95       	ror	r25
    2d40:	87 95       	ror	r24
    2d42:	82 1b       	sub	r24, r18
    2d44:	93 0b       	sbc	r25, r19
    2d46:	84 0f       	add	r24, r20
    2d48:	95 1f       	adc	r25, r21
    2d4a:	24 e6       	ldi	r18, 0x64	; 100
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	b9 01       	movw	r22, r18
    2d50:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__divmodhi4>
    2d54:	cb 01       	movw	r24, r22
    2d56:	9c 01       	movw	r18, r24
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	b9 01       	movw	r22, r18
    2d5c:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TIMER_SetOCR>
    2d60:	1c c0       	rjmp	.+56     	; 0x2d9a <TIMER_PWM_SetDutyCycle+0xa6>

		#endif
		break;

	case TIMER1:
		OCR1A_REG = (((dutyCycle * (ICR1_REG + 1)) / 100) - 1);
    2d62:	0a e4       	ldi	r16, 0x4A	; 74
    2d64:	10 e0       	ldi	r17, 0x00	; 0
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	28 2f       	mov	r18, r24
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	e6 e4       	ldi	r30, 0x46	; 70
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	91 81       	ldd	r25, Z+1	; 0x01
    2d74:	01 96       	adiw	r24, 0x01	; 1
    2d76:	fc 01       	movw	r30, r24
    2d78:	2e 9f       	mul	r18, r30
    2d7a:	c0 01       	movw	r24, r0
    2d7c:	2f 9f       	mul	r18, r31
    2d7e:	90 0d       	add	r25, r0
    2d80:	3e 9f       	mul	r19, r30
    2d82:	90 0d       	add	r25, r0
    2d84:	11 24       	eor	r1, r1
    2d86:	24 e6       	ldi	r18, 0x64	; 100
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	b9 01       	movw	r22, r18
    2d8c:	0e 94 cd 21 	call	0x439a	; 0x439a <__udivmodhi4>
    2d90:	cb 01       	movw	r24, r22
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f8 01       	movw	r30, r16
    2d96:	91 83       	std	Z+1, r25	; 0x01
    2d98:	80 83       	st	Z, r24
		break;

	case TIMER2:
		break;
	}
}
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	cf 91       	pop	r28
    2da4:	df 91       	pop	r29
    2da6:	1f 91       	pop	r17
    2da8:	0f 91       	pop	r16
    2daa:	08 95       	ret

00002dac <__vector_11>:

#if (TIMER0_MODE == NORMAL)
ISR(TIMER0_OVF_vect)
{
    2dac:	1f 92       	push	r1
    2dae:	0f 92       	push	r0
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	0f 92       	push	r0
    2db4:	11 24       	eor	r1, r1
    2db6:	2f 93       	push	r18
    2db8:	3f 93       	push	r19
    2dba:	4f 93       	push	r20
    2dbc:	5f 93       	push	r21
    2dbe:	6f 93       	push	r22
    2dc0:	7f 93       	push	r23
    2dc2:	8f 93       	push	r24
    2dc4:	9f 93       	push	r25
    2dc6:	af 93       	push	r26
    2dc8:	bf 93       	push	r27
    2dca:	ef 93       	push	r30
    2dcc:	ff 93       	push	r31
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
	static uint8_t counter = 0;
	++counter;
    2dd6:	80 91 a2 01 	lds	r24, 0x01A2
    2dda:	8f 5f       	subi	r24, 0xFF	; 255
    2ddc:	80 93 a2 01 	sts	0x01A2, r24

	if (counter == TIMER_nOVF)
    2de0:	80 91 a2 01 	lds	r24, 0x01A2
    2de4:	28 2f       	mov	r18, r24
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	50 e0       	ldi	r21, 0x00	; 0
    2dec:	80 91 ac 01 	lds	r24, 0x01AC
    2df0:	90 91 ad 01 	lds	r25, 0x01AD
    2df4:	a0 91 ae 01 	lds	r26, 0x01AE
    2df8:	b0 91 af 01 	lds	r27, 0x01AF
    2dfc:	28 17       	cp	r18, r24
    2dfe:	39 07       	cpc	r19, r25
    2e00:	4a 07       	cpc	r20, r26
    2e02:	5b 07       	cpc	r21, r27
    2e04:	a1 f4       	brne	.+40     	; 0x2e2e <__vector_11+0x82>
	{
		CallBack0();
    2e06:	e0 91 aa 01 	lds	r30, 0x01AA
    2e0a:	f0 91 ab 01 	lds	r31, 0x01AB
    2e0e:	09 95       	icall
		TIMER_SetTCNT(TIMER0, TIMER_intialPreload);
    2e10:	80 91 b2 01 	lds	r24, 0x01B2
    2e14:	90 91 b3 01 	lds	r25, 0x01B3
    2e18:	a0 91 b4 01 	lds	r26, 0x01B4
    2e1c:	b0 91 b5 01 	lds	r27, 0x01B5
    2e20:	9c 01       	movw	r18, r24
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	b9 01       	movw	r22, r18
    2e26:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <TIMER_SetTCNT>
		counter = 0;
    2e2a:	10 92 a2 01 	sts	0x01A2, r1
	}
}
    2e2e:	cf 91       	pop	r28
    2e30:	df 91       	pop	r29
    2e32:	ff 91       	pop	r31
    2e34:	ef 91       	pop	r30
    2e36:	bf 91       	pop	r27
    2e38:	af 91       	pop	r26
    2e3a:	9f 91       	pop	r25
    2e3c:	8f 91       	pop	r24
    2e3e:	7f 91       	pop	r23
    2e40:	6f 91       	pop	r22
    2e42:	5f 91       	pop	r21
    2e44:	4f 91       	pop	r20
    2e46:	3f 91       	pop	r19
    2e48:	2f 91       	pop	r18
    2e4a:	0f 90       	pop	r0
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	0f 90       	pop	r0
    2e50:	1f 90       	pop	r1
    2e52:	18 95       	reti

00002e54 <EXTINT_voidEnable>:
 *      Author: 4hmed
 */
#include "EXTINT.h"

static void EXTINT_voidEnable(EXTINT_intID_t intID)
{
    2e54:	df 93       	push	r29
    2e56:	cf 93       	push	r28
    2e58:	00 d0       	rcall	.+0      	; 0x2e5a <EXTINT_voidEnable+0x6>
    2e5a:	0f 92       	push	r0
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
    2e60:	89 83       	std	Y+1, r24	; 0x01
	switch (intID)
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	28 2f       	mov	r18, r24
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	3b 83       	std	Y+3, r19	; 0x03
    2e6a:	2a 83       	std	Y+2, r18	; 0x02
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e70:	81 30       	cpi	r24, 0x01	; 1
    2e72:	91 05       	cpc	r25, r1
    2e74:	89 f0       	breq	.+34     	; 0x2e98 <EXTINT_voidEnable+0x44>
    2e76:	2a 81       	ldd	r18, Y+2	; 0x02
    2e78:	3b 81       	ldd	r19, Y+3	; 0x03
    2e7a:	22 30       	cpi	r18, 0x02	; 2
    2e7c:	31 05       	cpc	r19, r1
    2e7e:	a1 f0       	breq	.+40     	; 0x2ea8 <EXTINT_voidEnable+0x54>
    2e80:	8a 81       	ldd	r24, Y+2	; 0x02
    2e82:	9b 81       	ldd	r25, Y+3	; 0x03
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	b9 f4       	brne	.+46     	; 0x2eb6 <EXTINT_voidEnable+0x62>
	{
	case EXTINT_INT0:
		SET_BIT(EXTINT_INT0_BIT, EXTINT_GICR_REG);
    2e88:	ab e5       	ldi	r26, 0x5B	; 91
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	eb e5       	ldi	r30, 0x5B	; 91
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	80 64       	ori	r24, 0x40	; 64
    2e94:	8c 93       	st	X, r24
    2e96:	0f c0       	rjmp	.+30     	; 0x2eb6 <EXTINT_voidEnable+0x62>
		break;

	case EXTINT_INT1:
		SET_BIT(EXTINT_INT1_BIT, EXTINT_GICR_REG);
    2e98:	ab e5       	ldi	r26, 0x5B	; 91
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	eb e5       	ldi	r30, 0x5B	; 91
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	80 68       	ori	r24, 0x80	; 128
    2ea4:	8c 93       	st	X, r24
    2ea6:	07 c0       	rjmp	.+14     	; 0x2eb6 <EXTINT_voidEnable+0x62>
		break;

	case EXTINT_INT2:
		SET_BIT(EXTINT_INT2_BIT, EXTINT_GICR_REG);
    2ea8:	ab e5       	ldi	r26, 0x5B	; 91
    2eaa:	b0 e0       	ldi	r27, 0x00	; 0
    2eac:	eb e5       	ldi	r30, 0x5B	; 91
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	80 81       	ld	r24, Z
    2eb2:	80 62       	ori	r24, 0x20	; 32
    2eb4:	8c 93       	st	X, r24
		break;
	}
}
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	08 95       	ret

00002ec2 <EXTINT_voidDisable>:

static void EXTINT_voidDisable(EXTINT_intID_t intID)
{
    2ec2:	df 93       	push	r29
    2ec4:	cf 93       	push	r28
    2ec6:	00 d0       	rcall	.+0      	; 0x2ec8 <EXTINT_voidDisable+0x6>
    2ec8:	0f 92       	push	r0
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
    2ece:	89 83       	std	Y+1, r24	; 0x01
	switch (intID)
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	3b 83       	std	Y+3, r19	; 0x03
    2ed8:	2a 83       	std	Y+2, r18	; 0x02
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ede:	81 30       	cpi	r24, 0x01	; 1
    2ee0:	91 05       	cpc	r25, r1
    2ee2:	89 f0       	breq	.+34     	; 0x2f06 <EXTINT_voidDisable+0x44>
    2ee4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ee6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ee8:	22 30       	cpi	r18, 0x02	; 2
    2eea:	31 05       	cpc	r19, r1
    2eec:	a1 f0       	breq	.+40     	; 0x2f16 <EXTINT_voidDisable+0x54>
    2eee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	b9 f4       	brne	.+46     	; 0x2f24 <EXTINT_voidDisable+0x62>
	{
	case EXTINT_INT0:
		CLEAR_BIT(EXTINT_INT0_BIT, EXTINT_GICR_REG);
    2ef6:	ab e5       	ldi	r26, 0x5B	; 91
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	eb e5       	ldi	r30, 0x5B	; 91
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	8f 7b       	andi	r24, 0xBF	; 191
    2f02:	8c 93       	st	X, r24
    2f04:	0f c0       	rjmp	.+30     	; 0x2f24 <EXTINT_voidDisable+0x62>
		break;

	case EXTINT_INT1:
		CLEAR_BIT(EXTINT_INT1_BIT, EXTINT_GICR_REG);
    2f06:	ab e5       	ldi	r26, 0x5B	; 91
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	eb e5       	ldi	r30, 0x5B	; 91
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	8f 77       	andi	r24, 0x7F	; 127
    2f12:	8c 93       	st	X, r24
    2f14:	07 c0       	rjmp	.+14     	; 0x2f24 <EXTINT_voidDisable+0x62>
		break;

	case EXTINT_INT2:
		CLEAR_BIT(EXTINT_INT2_BIT, EXTINT_GICR_REG);
    2f16:	ab e5       	ldi	r26, 0x5B	; 91
    2f18:	b0 e0       	ldi	r27, 0x00	; 0
    2f1a:	eb e5       	ldi	r30, 0x5B	; 91
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	8f 7d       	andi	r24, 0xDF	; 223
    2f22:	8c 93       	st	X, r24
		break;
	}
}
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	cf 91       	pop	r28
    2f2c:	df 91       	pop	r29
    2f2e:	08 95       	ret

00002f30 <EXTINT_voidConfig>:

void EXTINT_voidConfig(EXTINT_intID_t interrupt, EXTINT_iscMode_t mode)
{
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	c4 57       	subi	r28, 0x74	; 116
    2f3e:	d0 40       	sbci	r29, 0x00	; 0
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	ef 58       	subi	r30, 0x8F	; 143
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	80 83       	st	Z, r24
    2f52:	fe 01       	movw	r30, r28
    2f54:	ee 58       	subi	r30, 0x8E	; 142
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	60 83       	st	Z, r22
	switch (interrupt)
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	ef 58       	subi	r30, 0x8F	; 143
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	80 81       	ld	r24, Z
    2f62:	28 2f       	mov	r18, r24
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	e5 96       	adiw	r28, 0x35	; 53
    2f68:	3f af       	std	Y+63, r19	; 0x3f
    2f6a:	2e af       	std	Y+62, r18	; 0x3e
    2f6c:	e5 97       	sbiw	r28, 0x35	; 53
    2f6e:	e5 96       	adiw	r28, 0x35	; 53
    2f70:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f72:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f74:	e5 97       	sbiw	r28, 0x35	; 53
    2f76:	81 30       	cpi	r24, 0x01	; 1
    2f78:	91 05       	cpc	r25, r1
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <EXTINT_voidConfig+0x4e>
    2f7c:	8a c1       	rjmp	.+788    	; 0x3292 <EXTINT_voidConfig+0x362>
    2f7e:	e5 96       	adiw	r28, 0x35	; 53
    2f80:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f82:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f84:	e5 97       	sbiw	r28, 0x35	; 53
    2f86:	e2 30       	cpi	r30, 0x02	; 2
    2f88:	f1 05       	cpc	r31, r1
    2f8a:	09 f4       	brne	.+2      	; 0x2f8e <EXTINT_voidConfig+0x5e>
    2f8c:	d4 c2       	rjmp	.+1448   	; 0x3536 <EXTINT_voidConfig+0x606>
    2f8e:	e5 96       	adiw	r28, 0x35	; 53
    2f90:	2e ad       	ldd	r18, Y+62	; 0x3e
    2f92:	3f ad       	ldd	r19, Y+63	; 0x3f
    2f94:	e5 97       	sbiw	r28, 0x35	; 53
    2f96:	21 15       	cp	r18, r1
    2f98:	31 05       	cpc	r19, r1
    2f9a:	09 f0       	breq	.+2      	; 0x2f9e <EXTINT_voidConfig+0x6e>
    2f9c:	bd c4       	rjmp	.+2426   	; 0x3918 <EXTINT_voidConfig+0x9e8>
	{
	case EXTINT_INT0:

		EXTINT_voidDisable(EXTINT_INT0);
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <EXTINT_voidDisable>
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e3 59       	subi	r30, 0x93	; 147
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	a0 e8       	ldi	r26, 0x80	; 128
    2fb0:	bf e3       	ldi	r27, 0x3F	; 63
    2fb2:	80 83       	st	Z, r24
    2fb4:	91 83       	std	Z+1, r25	; 0x01
    2fb6:	a2 83       	std	Z+2, r26	; 0x02
    2fb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fba:	8e 01       	movw	r16, r28
    2fbc:	07 59       	subi	r16, 0x97	; 151
    2fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	e3 59       	subi	r30, 0x93	; 147
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	60 81       	ld	r22, Z
    2fc8:	71 81       	ldd	r23, Z+1	; 0x01
    2fca:	82 81       	ldd	r24, Z+2	; 0x02
    2fcc:	93 81       	ldd	r25, Z+3	; 0x03
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	4a e7       	ldi	r20, 0x7A	; 122
    2fd4:	55 e4       	ldi	r21, 0x45	; 69
    2fd6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	f8 01       	movw	r30, r16
    2fe0:	80 83       	st	Z, r24
    2fe2:	91 83       	std	Z+1, r25	; 0x01
    2fe4:	a2 83       	std	Z+2, r26	; 0x02
    2fe6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e7 59       	subi	r30, 0x97	; 151
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	60 81       	ld	r22, Z
    2ff0:	71 81       	ldd	r23, Z+1	; 0x01
    2ff2:	82 81       	ldd	r24, Z+2	; 0x02
    2ff4:	93 81       	ldd	r25, Z+3	; 0x03
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e8       	ldi	r20, 0x80	; 128
    2ffc:	5f e3       	ldi	r21, 0x3F	; 63
    2ffe:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3002:	88 23       	and	r24, r24
    3004:	44 f4       	brge	.+16     	; 0x3016 <EXTINT_voidConfig+0xe6>
		__ticks = 1;
    3006:	fe 01       	movw	r30, r28
    3008:	e9 59       	subi	r30, 0x99	; 153
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	91 83       	std	Z+1, r25	; 0x01
    3012:	80 83       	st	Z, r24
    3014:	64 c0       	rjmp	.+200    	; 0x30de <EXTINT_voidConfig+0x1ae>
	else if (__tmp > 65535)
    3016:	fe 01       	movw	r30, r28
    3018:	e7 59       	subi	r30, 0x97	; 151
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	60 81       	ld	r22, Z
    301e:	71 81       	ldd	r23, Z+1	; 0x01
    3020:	82 81       	ldd	r24, Z+2	; 0x02
    3022:	93 81       	ldd	r25, Z+3	; 0x03
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	3f ef       	ldi	r19, 0xFF	; 255
    3028:	4f e7       	ldi	r20, 0x7F	; 127
    302a:	57 e4       	ldi	r21, 0x47	; 71
    302c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3030:	18 16       	cp	r1, r24
    3032:	0c f0       	brlt	.+2      	; 0x3036 <EXTINT_voidConfig+0x106>
    3034:	43 c0       	rjmp	.+134    	; 0x30bc <EXTINT_voidConfig+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3036:	fe 01       	movw	r30, r28
    3038:	e3 59       	subi	r30, 0x93	; 147
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	60 81       	ld	r22, Z
    303e:	71 81       	ldd	r23, Z+1	; 0x01
    3040:	82 81       	ldd	r24, Z+2	; 0x02
    3042:	93 81       	ldd	r25, Z+3	; 0x03
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	40 e2       	ldi	r20, 0x20	; 32
    304a:	51 e4       	ldi	r21, 0x41	; 65
    304c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	8e 01       	movw	r16, r28
    3056:	09 59       	subi	r16, 0x99	; 153
    3058:	1f 4f       	sbci	r17, 0xFF	; 255
    305a:	bc 01       	movw	r22, r24
    305c:	cd 01       	movw	r24, r26
    305e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	f8 01       	movw	r30, r16
    3068:	91 83       	std	Z+1, r25	; 0x01
    306a:	80 83       	st	Z, r24
    306c:	1f c0       	rjmp	.+62     	; 0x30ac <EXTINT_voidConfig+0x17c>
    306e:	fe 01       	movw	r30, r28
    3070:	eb 59       	subi	r30, 0x9B	; 155
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	80 e9       	ldi	r24, 0x90	; 144
    3076:	91 e0       	ldi	r25, 0x01	; 1
    3078:	91 83       	std	Z+1, r25	; 0x01
    307a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    307c:	fe 01       	movw	r30, r28
    307e:	eb 59       	subi	r30, 0x9B	; 155
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	80 81       	ld	r24, Z
    3084:	91 81       	ldd	r25, Z+1	; 0x01
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <EXTINT_voidConfig+0x156>
    308a:	fe 01       	movw	r30, r28
    308c:	eb 59       	subi	r30, 0x9B	; 155
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	91 83       	std	Z+1, r25	; 0x01
    3092:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3094:	de 01       	movw	r26, r28
    3096:	a9 59       	subi	r26, 0x99	; 153
    3098:	bf 4f       	sbci	r27, 0xFF	; 255
    309a:	fe 01       	movw	r30, r28
    309c:	e9 59       	subi	r30, 0x99	; 153
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	01 97       	sbiw	r24, 0x01	; 1
    30a6:	11 96       	adiw	r26, 0x01	; 1
    30a8:	9c 93       	st	X, r25
    30aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ac:	fe 01       	movw	r30, r28
    30ae:	e9 59       	subi	r30, 0x99	; 153
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	80 81       	ld	r24, Z
    30b4:	91 81       	ldd	r25, Z+1	; 0x01
    30b6:	00 97       	sbiw	r24, 0x00	; 0
    30b8:	d1 f6       	brne	.-76     	; 0x306e <EXTINT_voidConfig+0x13e>
    30ba:	27 c0       	rjmp	.+78     	; 0x310a <EXTINT_voidConfig+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30bc:	8e 01       	movw	r16, r28
    30be:	09 59       	subi	r16, 0x99	; 153
    30c0:	1f 4f       	sbci	r17, 0xFF	; 255
    30c2:	fe 01       	movw	r30, r28
    30c4:	e7 59       	subi	r30, 0x97	; 151
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	60 81       	ld	r22, Z
    30ca:	71 81       	ldd	r23, Z+1	; 0x01
    30cc:	82 81       	ldd	r24, Z+2	; 0x02
    30ce:	93 81       	ldd	r25, Z+3	; 0x03
    30d0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	f8 01       	movw	r30, r16
    30da:	91 83       	std	Z+1, r25	; 0x01
    30dc:	80 83       	st	Z, r24
    30de:	de 01       	movw	r26, r28
    30e0:	ad 59       	subi	r26, 0x9D	; 157
    30e2:	bf 4f       	sbci	r27, 0xFF	; 255
    30e4:	fe 01       	movw	r30, r28
    30e6:	e9 59       	subi	r30, 0x99	; 153
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	80 81       	ld	r24, Z
    30ec:	91 81       	ldd	r25, Z+1	; 0x01
    30ee:	8d 93       	st	X+, r24
    30f0:	9c 93       	st	X, r25
    30f2:	fe 01       	movw	r30, r28
    30f4:	ed 59       	subi	r30, 0x9D	; 157
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	80 81       	ld	r24, Z
    30fa:	91 81       	ldd	r25, Z+1	; 0x01
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	f1 f7       	brne	.-4      	; 0x30fc <EXTINT_voidConfig+0x1cc>
    3100:	fe 01       	movw	r30, r28
    3102:	ed 59       	subi	r30, 0x9D	; 157
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	91 83       	std	Z+1, r25	; 0x01
    3108:	80 83       	st	Z, r24
		_delay_ms(1);

		EXTINT_MCUCR_REG = (EXTINT_MCUCR_REG & EXTINT_INT0_MASK) | (mode << 0);
    310a:	a5 e5       	ldi	r26, 0x55	; 85
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	e5 e5       	ldi	r30, 0x55	; 85
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 81       	ld	r24, Z
    3114:	98 2f       	mov	r25, r24
    3116:	9c 7f       	andi	r25, 0xFC	; 252
    3118:	fe 01       	movw	r30, r28
    311a:	ee 58       	subi	r30, 0x8E	; 142
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	80 81       	ld	r24, Z
    3120:	89 2b       	or	r24, r25
    3122:	8c 93       	st	X, r24
    3124:	fe 01       	movw	r30, r28
    3126:	e1 5a       	subi	r30, 0xA1	; 161
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	a0 e8       	ldi	r26, 0x80	; 128
    3130:	bf e3       	ldi	r27, 0x3F	; 63
    3132:	80 83       	st	Z, r24
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	a2 83       	std	Z+2, r26	; 0x02
    3138:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313a:	8e 01       	movw	r16, r28
    313c:	05 5a       	subi	r16, 0xA5	; 165
    313e:	1f 4f       	sbci	r17, 0xFF	; 255
    3140:	fe 01       	movw	r30, r28
    3142:	e1 5a       	subi	r30, 0xA1	; 161
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	60 81       	ld	r22, Z
    3148:	71 81       	ldd	r23, Z+1	; 0x01
    314a:	82 81       	ldd	r24, Z+2	; 0x02
    314c:	93 81       	ldd	r25, Z+3	; 0x03
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	4a e7       	ldi	r20, 0x7A	; 122
    3154:	55 e4       	ldi	r21, 0x45	; 69
    3156:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	f8 01       	movw	r30, r16
    3160:	80 83       	st	Z, r24
    3162:	91 83       	std	Z+1, r25	; 0x01
    3164:	a2 83       	std	Z+2, r26	; 0x02
    3166:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3168:	fe 01       	movw	r30, r28
    316a:	e5 5a       	subi	r30, 0xA5	; 165
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	60 81       	ld	r22, Z
    3170:	71 81       	ldd	r23, Z+1	; 0x01
    3172:	82 81       	ldd	r24, Z+2	; 0x02
    3174:	93 81       	ldd	r25, Z+3	; 0x03
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	40 e8       	ldi	r20, 0x80	; 128
    317c:	5f e3       	ldi	r21, 0x3F	; 63
    317e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3182:	88 23       	and	r24, r24
    3184:	44 f4       	brge	.+16     	; 0x3196 <EXTINT_voidConfig+0x266>
		__ticks = 1;
    3186:	fe 01       	movw	r30, r28
    3188:	e7 5a       	subi	r30, 0xA7	; 167
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	91 83       	std	Z+1, r25	; 0x01
    3192:	80 83       	st	Z, r24
    3194:	64 c0       	rjmp	.+200    	; 0x325e <EXTINT_voidConfig+0x32e>
	else if (__tmp > 65535)
    3196:	fe 01       	movw	r30, r28
    3198:	e5 5a       	subi	r30, 0xA5	; 165
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	60 81       	ld	r22, Z
    319e:	71 81       	ldd	r23, Z+1	; 0x01
    31a0:	82 81       	ldd	r24, Z+2	; 0x02
    31a2:	93 81       	ldd	r25, Z+3	; 0x03
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	3f ef       	ldi	r19, 0xFF	; 255
    31a8:	4f e7       	ldi	r20, 0x7F	; 127
    31aa:	57 e4       	ldi	r21, 0x47	; 71
    31ac:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    31b0:	18 16       	cp	r1, r24
    31b2:	0c f0       	brlt	.+2      	; 0x31b6 <EXTINT_voidConfig+0x286>
    31b4:	43 c0       	rjmp	.+134    	; 0x323c <EXTINT_voidConfig+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b6:	fe 01       	movw	r30, r28
    31b8:	e1 5a       	subi	r30, 0xA1	; 161
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	60 81       	ld	r22, Z
    31be:	71 81       	ldd	r23, Z+1	; 0x01
    31c0:	82 81       	ldd	r24, Z+2	; 0x02
    31c2:	93 81       	ldd	r25, Z+3	; 0x03
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	40 e2       	ldi	r20, 0x20	; 32
    31ca:	51 e4       	ldi	r21, 0x41	; 65
    31cc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	8e 01       	movw	r16, r28
    31d6:	07 5a       	subi	r16, 0xA7	; 167
    31d8:	1f 4f       	sbci	r17, 0xFF	; 255
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	f8 01       	movw	r30, r16
    31e8:	91 83       	std	Z+1, r25	; 0x01
    31ea:	80 83       	st	Z, r24
    31ec:	1f c0       	rjmp	.+62     	; 0x322c <EXTINT_voidConfig+0x2fc>
    31ee:	fe 01       	movw	r30, r28
    31f0:	e9 5a       	subi	r30, 0xA9	; 169
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 e9       	ldi	r24, 0x90	; 144
    31f6:	91 e0       	ldi	r25, 0x01	; 1
    31f8:	91 83       	std	Z+1, r25	; 0x01
    31fa:	80 83       	st	Z, r24
    31fc:	fe 01       	movw	r30, r28
    31fe:	e9 5a       	subi	r30, 0xA9	; 169
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <EXTINT_voidConfig+0x2d6>
    320a:	fe 01       	movw	r30, r28
    320c:	e9 5a       	subi	r30, 0xA9	; 169
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	91 83       	std	Z+1, r25	; 0x01
    3212:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3214:	de 01       	movw	r26, r28
    3216:	a7 5a       	subi	r26, 0xA7	; 167
    3218:	bf 4f       	sbci	r27, 0xFF	; 255
    321a:	fe 01       	movw	r30, r28
    321c:	e7 5a       	subi	r30, 0xA7	; 167
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	80 81       	ld	r24, Z
    3222:	91 81       	ldd	r25, Z+1	; 0x01
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	11 96       	adiw	r26, 0x01	; 1
    3228:	9c 93       	st	X, r25
    322a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322c:	fe 01       	movw	r30, r28
    322e:	e7 5a       	subi	r30, 0xA7	; 167
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	80 81       	ld	r24, Z
    3234:	91 81       	ldd	r25, Z+1	; 0x01
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	d1 f6       	brne	.-76     	; 0x31ee <EXTINT_voidConfig+0x2be>
    323a:	27 c0       	rjmp	.+78     	; 0x328a <EXTINT_voidConfig+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    323c:	8e 01       	movw	r16, r28
    323e:	07 5a       	subi	r16, 0xA7	; 167
    3240:	1f 4f       	sbci	r17, 0xFF	; 255
    3242:	fe 01       	movw	r30, r28
    3244:	e5 5a       	subi	r30, 0xA5	; 165
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	60 81       	ld	r22, Z
    324a:	71 81       	ldd	r23, Z+1	; 0x01
    324c:	82 81       	ldd	r24, Z+2	; 0x02
    324e:	93 81       	ldd	r25, Z+3	; 0x03
    3250:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	f8 01       	movw	r30, r16
    325a:	91 83       	std	Z+1, r25	; 0x01
    325c:	80 83       	st	Z, r24
    325e:	de 01       	movw	r26, r28
    3260:	ab 5a       	subi	r26, 0xAB	; 171
    3262:	bf 4f       	sbci	r27, 0xFF	; 255
    3264:	fe 01       	movw	r30, r28
    3266:	e7 5a       	subi	r30, 0xA7	; 167
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	80 81       	ld	r24, Z
    326c:	91 81       	ldd	r25, Z+1	; 0x01
    326e:	8d 93       	st	X+, r24
    3270:	9c 93       	st	X, r25
    3272:	fe 01       	movw	r30, r28
    3274:	eb 5a       	subi	r30, 0xAB	; 171
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <EXTINT_voidConfig+0x34c>
    3280:	fe 01       	movw	r30, r28
    3282:	eb 5a       	subi	r30, 0xAB	; 171
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	91 83       	std	Z+1, r25	; 0x01
    3288:	80 83       	st	Z, r24

		_delay_ms(1);
		EXTINT_voidEnable(EXTINT_INT0);
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <EXTINT_voidEnable>
    3290:	43 c3       	rjmp	.+1670   	; 0x3918 <EXTINT_voidConfig+0x9e8>
		break;

	case EXTINT_INT1:

		EXTINT_voidDisable(EXTINT_INT1);
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <EXTINT_voidDisable>
    3298:	fe 01       	movw	r30, r28
    329a:	ef 5a       	subi	r30, 0xAF	; 175
    329c:	ff 4f       	sbci	r31, 0xFF	; 255
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	a0 e8       	ldi	r26, 0x80	; 128
    32a4:	bf e3       	ldi	r27, 0x3F	; 63
    32a6:	80 83       	st	Z, r24
    32a8:	91 83       	std	Z+1, r25	; 0x01
    32aa:	a2 83       	std	Z+2, r26	; 0x02
    32ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ae:	8e 01       	movw	r16, r28
    32b0:	03 5b       	subi	r16, 0xB3	; 179
    32b2:	1f 4f       	sbci	r17, 0xFF	; 255
    32b4:	fe 01       	movw	r30, r28
    32b6:	ef 5a       	subi	r30, 0xAF	; 175
    32b8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ba:	60 81       	ld	r22, Z
    32bc:	71 81       	ldd	r23, Z+1	; 0x01
    32be:	82 81       	ldd	r24, Z+2	; 0x02
    32c0:	93 81       	ldd	r25, Z+3	; 0x03
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	4a e7       	ldi	r20, 0x7A	; 122
    32c8:	55 e4       	ldi	r21, 0x45	; 69
    32ca:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	f8 01       	movw	r30, r16
    32d4:	80 83       	st	Z, r24
    32d6:	91 83       	std	Z+1, r25	; 0x01
    32d8:	a2 83       	std	Z+2, r26	; 0x02
    32da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32dc:	fe 01       	movw	r30, r28
    32de:	e3 5b       	subi	r30, 0xB3	; 179
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	60 81       	ld	r22, Z
    32e4:	71 81       	ldd	r23, Z+1	; 0x01
    32e6:	82 81       	ldd	r24, Z+2	; 0x02
    32e8:	93 81       	ldd	r25, Z+3	; 0x03
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	40 e8       	ldi	r20, 0x80	; 128
    32f0:	5f e3       	ldi	r21, 0x3F	; 63
    32f2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    32f6:	88 23       	and	r24, r24
    32f8:	44 f4       	brge	.+16     	; 0x330a <EXTINT_voidConfig+0x3da>
		__ticks = 1;
    32fa:	fe 01       	movw	r30, r28
    32fc:	e5 5b       	subi	r30, 0xB5	; 181
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	91 83       	std	Z+1, r25	; 0x01
    3306:	80 83       	st	Z, r24
    3308:	64 c0       	rjmp	.+200    	; 0x33d2 <EXTINT_voidConfig+0x4a2>
	else if (__tmp > 65535)
    330a:	fe 01       	movw	r30, r28
    330c:	e3 5b       	subi	r30, 0xB3	; 179
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	60 81       	ld	r22, Z
    3312:	71 81       	ldd	r23, Z+1	; 0x01
    3314:	82 81       	ldd	r24, Z+2	; 0x02
    3316:	93 81       	ldd	r25, Z+3	; 0x03
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	3f ef       	ldi	r19, 0xFF	; 255
    331c:	4f e7       	ldi	r20, 0x7F	; 127
    331e:	57 e4       	ldi	r21, 0x47	; 71
    3320:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3324:	18 16       	cp	r1, r24
    3326:	0c f0       	brlt	.+2      	; 0x332a <EXTINT_voidConfig+0x3fa>
    3328:	43 c0       	rjmp	.+134    	; 0x33b0 <EXTINT_voidConfig+0x480>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    332a:	fe 01       	movw	r30, r28
    332c:	ef 5a       	subi	r30, 0xAF	; 175
    332e:	ff 4f       	sbci	r31, 0xFF	; 255
    3330:	60 81       	ld	r22, Z
    3332:	71 81       	ldd	r23, Z+1	; 0x01
    3334:	82 81       	ldd	r24, Z+2	; 0x02
    3336:	93 81       	ldd	r25, Z+3	; 0x03
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	40 e2       	ldi	r20, 0x20	; 32
    333e:	51 e4       	ldi	r21, 0x41	; 65
    3340:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	8e 01       	movw	r16, r28
    334a:	05 5b       	subi	r16, 0xB5	; 181
    334c:	1f 4f       	sbci	r17, 0xFF	; 255
    334e:	bc 01       	movw	r22, r24
    3350:	cd 01       	movw	r24, r26
    3352:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	f8 01       	movw	r30, r16
    335c:	91 83       	std	Z+1, r25	; 0x01
    335e:	80 83       	st	Z, r24
    3360:	1f c0       	rjmp	.+62     	; 0x33a0 <EXTINT_voidConfig+0x470>
    3362:	fe 01       	movw	r30, r28
    3364:	e7 5b       	subi	r30, 0xB7	; 183
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	80 e9       	ldi	r24, 0x90	; 144
    336a:	91 e0       	ldi	r25, 0x01	; 1
    336c:	91 83       	std	Z+1, r25	; 0x01
    336e:	80 83       	st	Z, r24
    3370:	fe 01       	movw	r30, r28
    3372:	e7 5b       	subi	r30, 0xB7	; 183
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	80 81       	ld	r24, Z
    3378:	91 81       	ldd	r25, Z+1	; 0x01
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	f1 f7       	brne	.-4      	; 0x337a <EXTINT_voidConfig+0x44a>
    337e:	fe 01       	movw	r30, r28
    3380:	e7 5b       	subi	r30, 0xB7	; 183
    3382:	ff 4f       	sbci	r31, 0xFF	; 255
    3384:	91 83       	std	Z+1, r25	; 0x01
    3386:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3388:	de 01       	movw	r26, r28
    338a:	a5 5b       	subi	r26, 0xB5	; 181
    338c:	bf 4f       	sbci	r27, 0xFF	; 255
    338e:	fe 01       	movw	r30, r28
    3390:	e5 5b       	subi	r30, 0xB5	; 181
    3392:	ff 4f       	sbci	r31, 0xFF	; 255
    3394:	80 81       	ld	r24, Z
    3396:	91 81       	ldd	r25, Z+1	; 0x01
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	11 96       	adiw	r26, 0x01	; 1
    339c:	9c 93       	st	X, r25
    339e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a0:	fe 01       	movw	r30, r28
    33a2:	e5 5b       	subi	r30, 0xB5	; 181
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	80 81       	ld	r24, Z
    33a8:	91 81       	ldd	r25, Z+1	; 0x01
    33aa:	00 97       	sbiw	r24, 0x00	; 0
    33ac:	d1 f6       	brne	.-76     	; 0x3362 <EXTINT_voidConfig+0x432>
    33ae:	27 c0       	rjmp	.+78     	; 0x33fe <EXTINT_voidConfig+0x4ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b0:	8e 01       	movw	r16, r28
    33b2:	05 5b       	subi	r16, 0xB5	; 181
    33b4:	1f 4f       	sbci	r17, 0xFF	; 255
    33b6:	fe 01       	movw	r30, r28
    33b8:	e3 5b       	subi	r30, 0xB3	; 179
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	60 81       	ld	r22, Z
    33be:	71 81       	ldd	r23, Z+1	; 0x01
    33c0:	82 81       	ldd	r24, Z+2	; 0x02
    33c2:	93 81       	ldd	r25, Z+3	; 0x03
    33c4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	f8 01       	movw	r30, r16
    33ce:	91 83       	std	Z+1, r25	; 0x01
    33d0:	80 83       	st	Z, r24
    33d2:	de 01       	movw	r26, r28
    33d4:	a9 5b       	subi	r26, 0xB9	; 185
    33d6:	bf 4f       	sbci	r27, 0xFF	; 255
    33d8:	fe 01       	movw	r30, r28
    33da:	e5 5b       	subi	r30, 0xB5	; 181
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	80 81       	ld	r24, Z
    33e0:	91 81       	ldd	r25, Z+1	; 0x01
    33e2:	8d 93       	st	X+, r24
    33e4:	9c 93       	st	X, r25
    33e6:	fe 01       	movw	r30, r28
    33e8:	e9 5b       	subi	r30, 0xB9	; 185
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	80 81       	ld	r24, Z
    33ee:	91 81       	ldd	r25, Z+1	; 0x01
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	f1 f7       	brne	.-4      	; 0x33f0 <EXTINT_voidConfig+0x4c0>
    33f4:	fe 01       	movw	r30, r28
    33f6:	e9 5b       	subi	r30, 0xB9	; 185
    33f8:	ff 4f       	sbci	r31, 0xFF	; 255
    33fa:	91 83       	std	Z+1, r25	; 0x01
    33fc:	80 83       	st	Z, r24
		_delay_ms(1);

		EXTINT_MCUCR_REG = (EXTINT_MCUCR_REG & EXTINT_INT1_MASK) | (mode << 2);
    33fe:	a5 e5       	ldi	r26, 0x55	; 85
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	e5 e5       	ldi	r30, 0x55	; 85
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	80 81       	ld	r24, Z
    3408:	28 2f       	mov	r18, r24
    340a:	23 7f       	andi	r18, 0xF3	; 243
    340c:	fe 01       	movw	r30, r28
    340e:	ee 58       	subi	r30, 0x8E	; 142
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	80 81       	ld	r24, Z
    3414:	88 2f       	mov	r24, r24
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	88 0f       	add	r24, r24
    341a:	99 1f       	adc	r25, r25
    341c:	88 0f       	add	r24, r24
    341e:	99 1f       	adc	r25, r25
    3420:	82 2b       	or	r24, r18
    3422:	8c 93       	st	X, r24
    3424:	fe 01       	movw	r30, r28
    3426:	ed 5b       	subi	r30, 0xBD	; 189
    3428:	ff 4f       	sbci	r31, 0xFF	; 255
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	a0 e8       	ldi	r26, 0x80	; 128
    3430:	bf e3       	ldi	r27, 0x3F	; 63
    3432:	80 83       	st	Z, r24
    3434:	91 83       	std	Z+1, r25	; 0x01
    3436:	a2 83       	std	Z+2, r26	; 0x02
    3438:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    343a:	8e 01       	movw	r16, r28
    343c:	01 5c       	subi	r16, 0xC1	; 193
    343e:	1f 4f       	sbci	r17, 0xFF	; 255
    3440:	fe 01       	movw	r30, r28
    3442:	ed 5b       	subi	r30, 0xBD	; 189
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	60 81       	ld	r22, Z
    3448:	71 81       	ldd	r23, Z+1	; 0x01
    344a:	82 81       	ldd	r24, Z+2	; 0x02
    344c:	93 81       	ldd	r25, Z+3	; 0x03
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	4a e7       	ldi	r20, 0x7A	; 122
    3454:	55 e4       	ldi	r21, 0x45	; 69
    3456:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	f8 01       	movw	r30, r16
    3460:	80 83       	st	Z, r24
    3462:	91 83       	std	Z+1, r25	; 0x01
    3464:	a2 83       	std	Z+2, r26	; 0x02
    3466:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3468:	fe 01       	movw	r30, r28
    346a:	ff 96       	adiw	r30, 0x3f	; 63
    346c:	60 81       	ld	r22, Z
    346e:	71 81       	ldd	r23, Z+1	; 0x01
    3470:	82 81       	ldd	r24, Z+2	; 0x02
    3472:	93 81       	ldd	r25, Z+3	; 0x03
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	40 e8       	ldi	r20, 0x80	; 128
    347a:	5f e3       	ldi	r21, 0x3F	; 63
    347c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3480:	88 23       	and	r24, r24
    3482:	2c f4       	brge	.+10     	; 0x348e <EXTINT_voidConfig+0x55e>
		__ticks = 1;
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	9e af       	std	Y+62, r25	; 0x3e
    348a:	8d af       	std	Y+61, r24	; 0x3d
    348c:	46 c0       	rjmp	.+140    	; 0x351a <EXTINT_voidConfig+0x5ea>
	else if (__tmp > 65535)
    348e:	fe 01       	movw	r30, r28
    3490:	ff 96       	adiw	r30, 0x3f	; 63
    3492:	60 81       	ld	r22, Z
    3494:	71 81       	ldd	r23, Z+1	; 0x01
    3496:	82 81       	ldd	r24, Z+2	; 0x02
    3498:	93 81       	ldd	r25, Z+3	; 0x03
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	3f ef       	ldi	r19, 0xFF	; 255
    349e:	4f e7       	ldi	r20, 0x7F	; 127
    34a0:	57 e4       	ldi	r21, 0x47	; 71
    34a2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    34a6:	18 16       	cp	r1, r24
    34a8:	64 f5       	brge	.+88     	; 0x3502 <EXTINT_voidConfig+0x5d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34aa:	fe 01       	movw	r30, r28
    34ac:	ed 5b       	subi	r30, 0xBD	; 189
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	60 81       	ld	r22, Z
    34b2:	71 81       	ldd	r23, Z+1	; 0x01
    34b4:	82 81       	ldd	r24, Z+2	; 0x02
    34b6:	93 81       	ldd	r25, Z+3	; 0x03
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e2       	ldi	r20, 0x20	; 32
    34be:	51 e4       	ldi	r21, 0x41	; 65
    34c0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	bc 01       	movw	r22, r24
    34ca:	cd 01       	movw	r24, r26
    34cc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	9e af       	std	Y+62, r25	; 0x3e
    34d6:	8d af       	std	Y+61, r24	; 0x3d
    34d8:	0f c0       	rjmp	.+30     	; 0x34f8 <EXTINT_voidConfig+0x5c8>
    34da:	80 e9       	ldi	r24, 0x90	; 144
    34dc:	91 e0       	ldi	r25, 0x01	; 1
    34de:	9c af       	std	Y+60, r25	; 0x3c
    34e0:	8b af       	std	Y+59, r24	; 0x3b
    34e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    34e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	f1 f7       	brne	.-4      	; 0x34e6 <EXTINT_voidConfig+0x5b6>
    34ea:	9c af       	std	Y+60, r25	; 0x3c
    34ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    34f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	9e af       	std	Y+62, r25	; 0x3e
    34f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    34fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    34fc:	00 97       	sbiw	r24, 0x00	; 0
    34fe:	69 f7       	brne	.-38     	; 0x34da <EXTINT_voidConfig+0x5aa>
    3500:	16 c0       	rjmp	.+44     	; 0x352e <EXTINT_voidConfig+0x5fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3502:	fe 01       	movw	r30, r28
    3504:	ff 96       	adiw	r30, 0x3f	; 63
    3506:	60 81       	ld	r22, Z
    3508:	71 81       	ldd	r23, Z+1	; 0x01
    350a:	82 81       	ldd	r24, Z+2	; 0x02
    350c:	93 81       	ldd	r25, Z+3	; 0x03
    350e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	9e af       	std	Y+62, r25	; 0x3e
    3518:	8d af       	std	Y+61, r24	; 0x3d
    351a:	8d ad       	ldd	r24, Y+61	; 0x3d
    351c:	9e ad       	ldd	r25, Y+62	; 0x3e
    351e:	9a af       	std	Y+58, r25	; 0x3a
    3520:	89 af       	std	Y+57, r24	; 0x39
    3522:	89 ad       	ldd	r24, Y+57	; 0x39
    3524:	9a ad       	ldd	r25, Y+58	; 0x3a
    3526:	01 97       	sbiw	r24, 0x01	; 1
    3528:	f1 f7       	brne	.-4      	; 0x3526 <EXTINT_voidConfig+0x5f6>
    352a:	9a af       	std	Y+58, r25	; 0x3a
    352c:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		EXTINT_voidEnable(EXTINT_INT1);
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <EXTINT_voidEnable>
    3534:	f1 c1       	rjmp	.+994    	; 0x3918 <EXTINT_voidConfig+0x9e8>
		break;

	case EXTINT_INT2:

		if (mode == EXTINT_RISING_EDGE)
    3536:	fe 01       	movw	r30, r28
    3538:	ee 58       	subi	r30, 0x8E	; 142
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	80 81       	ld	r24, Z
    353e:	83 30       	cpi	r24, 0x03	; 3
    3540:	09 f0       	breq	.+2      	; 0x3544 <EXTINT_voidConfig+0x614>
    3542:	f2 c0       	rjmp	.+484    	; 0x3728 <EXTINT_voidConfig+0x7f8>
		{
			EXTINT_voidDisable(EXTINT_INT2);
    3544:	82 e0       	ldi	r24, 0x02	; 2
    3546:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <EXTINT_voidDisable>
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	a0 e8       	ldi	r26, 0x80	; 128
    3550:	bf e3       	ldi	r27, 0x3F	; 63
    3552:	8d ab       	std	Y+53, r24	; 0x35
    3554:	9e ab       	std	Y+54, r25	; 0x36
    3556:	af ab       	std	Y+55, r26	; 0x37
    3558:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    355a:	6d a9       	ldd	r22, Y+53	; 0x35
    355c:	7e a9       	ldd	r23, Y+54	; 0x36
    355e:	8f a9       	ldd	r24, Y+55	; 0x37
    3560:	98 ad       	ldd	r25, Y+56	; 0x38
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	4a e7       	ldi	r20, 0x7A	; 122
    3568:	55 e4       	ldi	r21, 0x45	; 69
    356a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	89 ab       	std	Y+49, r24	; 0x31
    3574:	9a ab       	std	Y+50, r25	; 0x32
    3576:	ab ab       	std	Y+51, r26	; 0x33
    3578:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    357a:	69 a9       	ldd	r22, Y+49	; 0x31
    357c:	7a a9       	ldd	r23, Y+50	; 0x32
    357e:	8b a9       	ldd	r24, Y+51	; 0x33
    3580:	9c a9       	ldd	r25, Y+52	; 0x34
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e8       	ldi	r20, 0x80	; 128
    3588:	5f e3       	ldi	r21, 0x3F	; 63
    358a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    358e:	88 23       	and	r24, r24
    3590:	2c f4       	brge	.+10     	; 0x359c <EXTINT_voidConfig+0x66c>
		__ticks = 1;
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	98 ab       	std	Y+48, r25	; 0x30
    3598:	8f a7       	std	Y+47, r24	; 0x2f
    359a:	3f c0       	rjmp	.+126    	; 0x361a <EXTINT_voidConfig+0x6ea>
	else if (__tmp > 65535)
    359c:	69 a9       	ldd	r22, Y+49	; 0x31
    359e:	7a a9       	ldd	r23, Y+50	; 0x32
    35a0:	8b a9       	ldd	r24, Y+51	; 0x33
    35a2:	9c a9       	ldd	r25, Y+52	; 0x34
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	3f ef       	ldi	r19, 0xFF	; 255
    35a8:	4f e7       	ldi	r20, 0x7F	; 127
    35aa:	57 e4       	ldi	r21, 0x47	; 71
    35ac:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    35b0:	18 16       	cp	r1, r24
    35b2:	4c f5       	brge	.+82     	; 0x3606 <EXTINT_voidConfig+0x6d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b4:	6d a9       	ldd	r22, Y+53	; 0x35
    35b6:	7e a9       	ldd	r23, Y+54	; 0x36
    35b8:	8f a9       	ldd	r24, Y+55	; 0x37
    35ba:	98 ad       	ldd	r25, Y+56	; 0x38
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	40 e2       	ldi	r20, 0x20	; 32
    35c2:	51 e4       	ldi	r21, 0x41	; 65
    35c4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	bc 01       	movw	r22, r24
    35ce:	cd 01       	movw	r24, r26
    35d0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	98 ab       	std	Y+48, r25	; 0x30
    35da:	8f a7       	std	Y+47, r24	; 0x2f
    35dc:	0f c0       	rjmp	.+30     	; 0x35fc <EXTINT_voidConfig+0x6cc>
    35de:	80 e9       	ldi	r24, 0x90	; 144
    35e0:	91 e0       	ldi	r25, 0x01	; 1
    35e2:	9e a7       	std	Y+46, r25	; 0x2e
    35e4:	8d a7       	std	Y+45, r24	; 0x2d
    35e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    35e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    35ea:	01 97       	sbiw	r24, 0x01	; 1
    35ec:	f1 f7       	brne	.-4      	; 0x35ea <EXTINT_voidConfig+0x6ba>
    35ee:	9e a7       	std	Y+46, r25	; 0x2e
    35f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    35f4:	98 a9       	ldd	r25, Y+48	; 0x30
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	98 ab       	std	Y+48, r25	; 0x30
    35fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    35fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3600:	00 97       	sbiw	r24, 0x00	; 0
    3602:	69 f7       	brne	.-38     	; 0x35de <EXTINT_voidConfig+0x6ae>
    3604:	14 c0       	rjmp	.+40     	; 0x362e <EXTINT_voidConfig+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3606:	69 a9       	ldd	r22, Y+49	; 0x31
    3608:	7a a9       	ldd	r23, Y+50	; 0x32
    360a:	8b a9       	ldd	r24, Y+51	; 0x33
    360c:	9c a9       	ldd	r25, Y+52	; 0x34
    360e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	98 ab       	std	Y+48, r25	; 0x30
    3618:	8f a7       	std	Y+47, r24	; 0x2f
    361a:	8f a5       	ldd	r24, Y+47	; 0x2f
    361c:	98 a9       	ldd	r25, Y+48	; 0x30
    361e:	9c a7       	std	Y+44, r25	; 0x2c
    3620:	8b a7       	std	Y+43, r24	; 0x2b
    3622:	8b a5       	ldd	r24, Y+43	; 0x2b
    3624:	9c a5       	ldd	r25, Y+44	; 0x2c
    3626:	01 97       	sbiw	r24, 0x01	; 1
    3628:	f1 f7       	brne	.-4      	; 0x3626 <EXTINT_voidConfig+0x6f6>
    362a:	9c a7       	std	Y+44, r25	; 0x2c
    362c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);

			SET_BIT(EXTINT_ISC2_BIT, EXTINT_MCUCSR_REG);
    362e:	a4 e5       	ldi	r26, 0x54	; 84
    3630:	b0 e0       	ldi	r27, 0x00	; 0
    3632:	e4 e5       	ldi	r30, 0x54	; 84
    3634:	f0 e0       	ldi	r31, 0x00	; 0
    3636:	80 81       	ld	r24, Z
    3638:	80 64       	ori	r24, 0x40	; 64
    363a:	8c 93       	st	X, r24
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	a0 e8       	ldi	r26, 0x80	; 128
    3642:	bf e3       	ldi	r27, 0x3F	; 63
    3644:	8f a3       	std	Y+39, r24	; 0x27
    3646:	98 a7       	std	Y+40, r25	; 0x28
    3648:	a9 a7       	std	Y+41, r26	; 0x29
    364a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    364c:	6f a1       	ldd	r22, Y+39	; 0x27
    364e:	78 a5       	ldd	r23, Y+40	; 0x28
    3650:	89 a5       	ldd	r24, Y+41	; 0x29
    3652:	9a a5       	ldd	r25, Y+42	; 0x2a
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	4a e7       	ldi	r20, 0x7A	; 122
    365a:	55 e4       	ldi	r21, 0x45	; 69
    365c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3660:	dc 01       	movw	r26, r24
    3662:	cb 01       	movw	r24, r22
    3664:	8b a3       	std	Y+35, r24	; 0x23
    3666:	9c a3       	std	Y+36, r25	; 0x24
    3668:	ad a3       	std	Y+37, r26	; 0x25
    366a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    366c:	6b a1       	ldd	r22, Y+35	; 0x23
    366e:	7c a1       	ldd	r23, Y+36	; 0x24
    3670:	8d a1       	ldd	r24, Y+37	; 0x25
    3672:	9e a1       	ldd	r25, Y+38	; 0x26
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	40 e8       	ldi	r20, 0x80	; 128
    367a:	5f e3       	ldi	r21, 0x3F	; 63
    367c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3680:	88 23       	and	r24, r24
    3682:	2c f4       	brge	.+10     	; 0x368e <EXTINT_voidConfig+0x75e>
		__ticks = 1;
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	9a a3       	std	Y+34, r25	; 0x22
    368a:	89 a3       	std	Y+33, r24	; 0x21
    368c:	3f c0       	rjmp	.+126    	; 0x370c <EXTINT_voidConfig+0x7dc>
	else if (__tmp > 65535)
    368e:	6b a1       	ldd	r22, Y+35	; 0x23
    3690:	7c a1       	ldd	r23, Y+36	; 0x24
    3692:	8d a1       	ldd	r24, Y+37	; 0x25
    3694:	9e a1       	ldd	r25, Y+38	; 0x26
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	3f ef       	ldi	r19, 0xFF	; 255
    369a:	4f e7       	ldi	r20, 0x7F	; 127
    369c:	57 e4       	ldi	r21, 0x47	; 71
    369e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    36a2:	18 16       	cp	r1, r24
    36a4:	4c f5       	brge	.+82     	; 0x36f8 <EXTINT_voidConfig+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a6:	6f a1       	ldd	r22, Y+39	; 0x27
    36a8:	78 a5       	ldd	r23, Y+40	; 0x28
    36aa:	89 a5       	ldd	r24, Y+41	; 0x29
    36ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	40 e2       	ldi	r20, 0x20	; 32
    36b4:	51 e4       	ldi	r21, 0x41	; 65
    36b6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	bc 01       	movw	r22, r24
    36c0:	cd 01       	movw	r24, r26
    36c2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	9a a3       	std	Y+34, r25	; 0x22
    36cc:	89 a3       	std	Y+33, r24	; 0x21
    36ce:	0f c0       	rjmp	.+30     	; 0x36ee <EXTINT_voidConfig+0x7be>
    36d0:	80 e9       	ldi	r24, 0x90	; 144
    36d2:	91 e0       	ldi	r25, 0x01	; 1
    36d4:	98 a3       	std	Y+32, r25	; 0x20
    36d6:	8f 8f       	std	Y+31, r24	; 0x1f
    36d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36da:	98 a1       	ldd	r25, Y+32	; 0x20
    36dc:	01 97       	sbiw	r24, 0x01	; 1
    36de:	f1 f7       	brne	.-4      	; 0x36dc <EXTINT_voidConfig+0x7ac>
    36e0:	98 a3       	std	Y+32, r25	; 0x20
    36e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e4:	89 a1       	ldd	r24, Y+33	; 0x21
    36e6:	9a a1       	ldd	r25, Y+34	; 0x22
    36e8:	01 97       	sbiw	r24, 0x01	; 1
    36ea:	9a a3       	std	Y+34, r25	; 0x22
    36ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ee:	89 a1       	ldd	r24, Y+33	; 0x21
    36f0:	9a a1       	ldd	r25, Y+34	; 0x22
    36f2:	00 97       	sbiw	r24, 0x00	; 0
    36f4:	69 f7       	brne	.-38     	; 0x36d0 <EXTINT_voidConfig+0x7a0>
    36f6:	14 c0       	rjmp	.+40     	; 0x3720 <EXTINT_voidConfig+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f8:	6b a1       	ldd	r22, Y+35	; 0x23
    36fa:	7c a1       	ldd	r23, Y+36	; 0x24
    36fc:	8d a1       	ldd	r24, Y+37	; 0x25
    36fe:	9e a1       	ldd	r25, Y+38	; 0x26
    3700:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	9a a3       	std	Y+34, r25	; 0x22
    370a:	89 a3       	std	Y+33, r24	; 0x21
    370c:	89 a1       	ldd	r24, Y+33	; 0x21
    370e:	9a a1       	ldd	r25, Y+34	; 0x22
    3710:	9e 8f       	std	Y+30, r25	; 0x1e
    3712:	8d 8f       	std	Y+29, r24	; 0x1d
    3714:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3716:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3718:	01 97       	sbiw	r24, 0x01	; 1
    371a:	f1 f7       	brne	.-4      	; 0x3718 <EXTINT_voidConfig+0x7e8>
    371c:	9e 8f       	std	Y+30, r25	; 0x1e
    371e:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);
			EXTINT_voidEnable(EXTINT_INT2);
    3720:	82 e0       	ldi	r24, 0x02	; 2
    3722:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <EXTINT_voidEnable>
    3726:	f8 c0       	rjmp	.+496    	; 0x3918 <EXTINT_voidConfig+0x9e8>
		}
		else if (mode == EXTINT_FALLING_EDGE)
    3728:	fe 01       	movw	r30, r28
    372a:	ee 58       	subi	r30, 0x8E	; 142
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	80 81       	ld	r24, Z
    3730:	82 30       	cpi	r24, 0x02	; 2
    3732:	09 f0       	breq	.+2      	; 0x3736 <EXTINT_voidConfig+0x806>
    3734:	f1 c0       	rjmp	.+482    	; 0x3918 <EXTINT_voidConfig+0x9e8>
		{
			EXTINT_voidDisable(EXTINT_INT2);
    3736:	82 e0       	ldi	r24, 0x02	; 2
    3738:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <EXTINT_voidDisable>
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	a0 e8       	ldi	r26, 0x80	; 128
    3742:	bf e3       	ldi	r27, 0x3F	; 63
    3744:	89 8f       	std	Y+25, r24	; 0x19
    3746:	9a 8f       	std	Y+26, r25	; 0x1a
    3748:	ab 8f       	std	Y+27, r26	; 0x1b
    374a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    374c:	69 8d       	ldd	r22, Y+25	; 0x19
    374e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3750:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3752:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	4a e7       	ldi	r20, 0x7A	; 122
    375a:	55 e4       	ldi	r21, 0x45	; 69
    375c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3760:	dc 01       	movw	r26, r24
    3762:	cb 01       	movw	r24, r22
    3764:	8d 8b       	std	Y+21, r24	; 0x15
    3766:	9e 8b       	std	Y+22, r25	; 0x16
    3768:	af 8b       	std	Y+23, r26	; 0x17
    376a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    376c:	6d 89       	ldd	r22, Y+21	; 0x15
    376e:	7e 89       	ldd	r23, Y+22	; 0x16
    3770:	8f 89       	ldd	r24, Y+23	; 0x17
    3772:	98 8d       	ldd	r25, Y+24	; 0x18
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	40 e8       	ldi	r20, 0x80	; 128
    377a:	5f e3       	ldi	r21, 0x3F	; 63
    377c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3780:	88 23       	and	r24, r24
    3782:	2c f4       	brge	.+10     	; 0x378e <EXTINT_voidConfig+0x85e>
		__ticks = 1;
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	9c 8b       	std	Y+20, r25	; 0x14
    378a:	8b 8b       	std	Y+19, r24	; 0x13
    378c:	3f c0       	rjmp	.+126    	; 0x380c <EXTINT_voidConfig+0x8dc>
	else if (__tmp > 65535)
    378e:	6d 89       	ldd	r22, Y+21	; 0x15
    3790:	7e 89       	ldd	r23, Y+22	; 0x16
    3792:	8f 89       	ldd	r24, Y+23	; 0x17
    3794:	98 8d       	ldd	r25, Y+24	; 0x18
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	3f ef       	ldi	r19, 0xFF	; 255
    379a:	4f e7       	ldi	r20, 0x7F	; 127
    379c:	57 e4       	ldi	r21, 0x47	; 71
    379e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    37a2:	18 16       	cp	r1, r24
    37a4:	4c f5       	brge	.+82     	; 0x37f8 <EXTINT_voidConfig+0x8c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37a6:	69 8d       	ldd	r22, Y+25	; 0x19
    37a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	40 e2       	ldi	r20, 0x20	; 32
    37b4:	51 e4       	ldi	r21, 0x41	; 65
    37b6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	bc 01       	movw	r22, r24
    37c0:	cd 01       	movw	r24, r26
    37c2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    37c6:	dc 01       	movw	r26, r24
    37c8:	cb 01       	movw	r24, r22
    37ca:	9c 8b       	std	Y+20, r25	; 0x14
    37cc:	8b 8b       	std	Y+19, r24	; 0x13
    37ce:	0f c0       	rjmp	.+30     	; 0x37ee <EXTINT_voidConfig+0x8be>
    37d0:	80 e9       	ldi	r24, 0x90	; 144
    37d2:	91 e0       	ldi	r25, 0x01	; 1
    37d4:	9a 8b       	std	Y+18, r25	; 0x12
    37d6:	89 8b       	std	Y+17, r24	; 0x11
    37d8:	89 89       	ldd	r24, Y+17	; 0x11
    37da:	9a 89       	ldd	r25, Y+18	; 0x12
    37dc:	01 97       	sbiw	r24, 0x01	; 1
    37de:	f1 f7       	brne	.-4      	; 0x37dc <EXTINT_voidConfig+0x8ac>
    37e0:	9a 8b       	std	Y+18, r25	; 0x12
    37e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37e4:	8b 89       	ldd	r24, Y+19	; 0x13
    37e6:	9c 89       	ldd	r25, Y+20	; 0x14
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	9c 8b       	std	Y+20, r25	; 0x14
    37ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ee:	8b 89       	ldd	r24, Y+19	; 0x13
    37f0:	9c 89       	ldd	r25, Y+20	; 0x14
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	69 f7       	brne	.-38     	; 0x37d0 <EXTINT_voidConfig+0x8a0>
    37f6:	14 c0       	rjmp	.+40     	; 0x3820 <EXTINT_voidConfig+0x8f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37f8:	6d 89       	ldd	r22, Y+21	; 0x15
    37fa:	7e 89       	ldd	r23, Y+22	; 0x16
    37fc:	8f 89       	ldd	r24, Y+23	; 0x17
    37fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3800:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	9c 8b       	std	Y+20, r25	; 0x14
    380a:	8b 8b       	std	Y+19, r24	; 0x13
    380c:	8b 89       	ldd	r24, Y+19	; 0x13
    380e:	9c 89       	ldd	r25, Y+20	; 0x14
    3810:	98 8b       	std	Y+16, r25	; 0x10
    3812:	8f 87       	std	Y+15, r24	; 0x0f
    3814:	8f 85       	ldd	r24, Y+15	; 0x0f
    3816:	98 89       	ldd	r25, Y+16	; 0x10
    3818:	01 97       	sbiw	r24, 0x01	; 1
    381a:	f1 f7       	brne	.-4      	; 0x3818 <EXTINT_voidConfig+0x8e8>
    381c:	98 8b       	std	Y+16, r25	; 0x10
    381e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);

			CLEAR_BIT(EXTINT_ISC2_BIT, EXTINT_MCUCSR_REG);
    3820:	a4 e5       	ldi	r26, 0x54	; 84
    3822:	b0 e0       	ldi	r27, 0x00	; 0
    3824:	e4 e5       	ldi	r30, 0x54	; 84
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	80 81       	ld	r24, Z
    382a:	8f 7b       	andi	r24, 0xBF	; 191
    382c:	8c 93       	st	X, r24
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	a0 e8       	ldi	r26, 0x80	; 128
    3834:	bf e3       	ldi	r27, 0x3F	; 63
    3836:	8b 87       	std	Y+11, r24	; 0x0b
    3838:	9c 87       	std	Y+12, r25	; 0x0c
    383a:	ad 87       	std	Y+13, r26	; 0x0d
    383c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    383e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3840:	7c 85       	ldd	r23, Y+12	; 0x0c
    3842:	8d 85       	ldd	r24, Y+13	; 0x0d
    3844:	9e 85       	ldd	r25, Y+14	; 0x0e
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	4a e7       	ldi	r20, 0x7A	; 122
    384c:	55 e4       	ldi	r21, 0x45	; 69
    384e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	8f 83       	std	Y+7, r24	; 0x07
    3858:	98 87       	std	Y+8, r25	; 0x08
    385a:	a9 87       	std	Y+9, r26	; 0x09
    385c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    385e:	6f 81       	ldd	r22, Y+7	; 0x07
    3860:	78 85       	ldd	r23, Y+8	; 0x08
    3862:	89 85       	ldd	r24, Y+9	; 0x09
    3864:	9a 85       	ldd	r25, Y+10	; 0x0a
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	40 e8       	ldi	r20, 0x80	; 128
    386c:	5f e3       	ldi	r21, 0x3F	; 63
    386e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3872:	88 23       	and	r24, r24
    3874:	2c f4       	brge	.+10     	; 0x3880 <EXTINT_voidConfig+0x950>
		__ticks = 1;
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	9e 83       	std	Y+6, r25	; 0x06
    387c:	8d 83       	std	Y+5, r24	; 0x05
    387e:	3f c0       	rjmp	.+126    	; 0x38fe <EXTINT_voidConfig+0x9ce>
	else if (__tmp > 65535)
    3880:	6f 81       	ldd	r22, Y+7	; 0x07
    3882:	78 85       	ldd	r23, Y+8	; 0x08
    3884:	89 85       	ldd	r24, Y+9	; 0x09
    3886:	9a 85       	ldd	r25, Y+10	; 0x0a
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	3f ef       	ldi	r19, 0xFF	; 255
    388c:	4f e7       	ldi	r20, 0x7F	; 127
    388e:	57 e4       	ldi	r21, 0x47	; 71
    3890:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3894:	18 16       	cp	r1, r24
    3896:	4c f5       	brge	.+82     	; 0x38ea <EXTINT_voidConfig+0x9ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3898:	6b 85       	ldd	r22, Y+11	; 0x0b
    389a:	7c 85       	ldd	r23, Y+12	; 0x0c
    389c:	8d 85       	ldd	r24, Y+13	; 0x0d
    389e:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	40 e2       	ldi	r20, 0x20	; 32
    38a6:	51 e4       	ldi	r21, 0x41	; 65
    38a8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	bc 01       	movw	r22, r24
    38b2:	cd 01       	movw	r24, r26
    38b4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	9e 83       	std	Y+6, r25	; 0x06
    38be:	8d 83       	std	Y+5, r24	; 0x05
    38c0:	0f c0       	rjmp	.+30     	; 0x38e0 <EXTINT_voidConfig+0x9b0>
    38c2:	80 e9       	ldi	r24, 0x90	; 144
    38c4:	91 e0       	ldi	r25, 0x01	; 1
    38c6:	9c 83       	std	Y+4, r25	; 0x04
    38c8:	8b 83       	std	Y+3, r24	; 0x03
    38ca:	8b 81       	ldd	r24, Y+3	; 0x03
    38cc:	9c 81       	ldd	r25, Y+4	; 0x04
    38ce:	01 97       	sbiw	r24, 0x01	; 1
    38d0:	f1 f7       	brne	.-4      	; 0x38ce <EXTINT_voidConfig+0x99e>
    38d2:	9c 83       	std	Y+4, r25	; 0x04
    38d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38d6:	8d 81       	ldd	r24, Y+5	; 0x05
    38d8:	9e 81       	ldd	r25, Y+6	; 0x06
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	9e 83       	std	Y+6, r25	; 0x06
    38de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e0:	8d 81       	ldd	r24, Y+5	; 0x05
    38e2:	9e 81       	ldd	r25, Y+6	; 0x06
    38e4:	00 97       	sbiw	r24, 0x00	; 0
    38e6:	69 f7       	brne	.-38     	; 0x38c2 <EXTINT_voidConfig+0x992>
    38e8:	14 c0       	rjmp	.+40     	; 0x3912 <EXTINT_voidConfig+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ea:	6f 81       	ldd	r22, Y+7	; 0x07
    38ec:	78 85       	ldd	r23, Y+8	; 0x08
    38ee:	89 85       	ldd	r24, Y+9	; 0x09
    38f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38f2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	9e 83       	std	Y+6, r25	; 0x06
    38fc:	8d 83       	std	Y+5, r24	; 0x05
    38fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3900:	9e 81       	ldd	r25, Y+6	; 0x06
    3902:	9a 83       	std	Y+2, r25	; 0x02
    3904:	89 83       	std	Y+1, r24	; 0x01
    3906:	89 81       	ldd	r24, Y+1	; 0x01
    3908:	9a 81       	ldd	r25, Y+2	; 0x02
    390a:	01 97       	sbiw	r24, 0x01	; 1
    390c:	f1 f7       	brne	.-4      	; 0x390a <EXTINT_voidConfig+0x9da>
    390e:	9a 83       	std	Y+2, r25	; 0x02
    3910:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(1);
			EXTINT_voidEnable(EXTINT_INT2);
    3912:	82 e0       	ldi	r24, 0x02	; 2
    3914:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <EXTINT_voidEnable>
		{
			// Do nothing.
		}
		break;
	}
}
    3918:	cc 58       	subi	r28, 0x8C	; 140
    391a:	df 4f       	sbci	r29, 0xFF	; 255
    391c:	0f b6       	in	r0, 0x3f	; 63
    391e:	f8 94       	cli
    3920:	de bf       	out	0x3e, r29	; 62
    3922:	0f be       	out	0x3f, r0	; 63
    3924:	cd bf       	out	0x3d, r28	; 61
    3926:	cf 91       	pop	r28
    3928:	df 91       	pop	r29
    392a:	1f 91       	pop	r17
    392c:	0f 91       	pop	r16
    392e:	08 95       	ret

00003930 <GINT_Enable>:
 */

#include "GINT.h"

void GINT_Enable(void)
{
    3930:	df 93       	push	r29
    3932:	cf 93       	push	r28
    3934:	cd b7       	in	r28, 0x3d	; 61
    3936:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_GINT_PIN, GINT_SREG_REG);
    3938:	af e5       	ldi	r26, 0x5F	; 95
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	ef e5       	ldi	r30, 0x5F	; 95
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	80 81       	ld	r24, Z
    3942:	80 68       	ori	r24, 0x80	; 128
    3944:	8c 93       	st	X, r24
}
    3946:	cf 91       	pop	r28
    3948:	df 91       	pop	r29
    394a:	08 95       	ret

0000394c <GINT_Disable>:

void GINT_Disable(void)
{
    394c:	df 93       	push	r29
    394e:	cf 93       	push	r28
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_GINT_PIN, GINT_SREG_REG);
    3954:	af e5       	ldi	r26, 0x5F	; 95
    3956:	b0 e0       	ldi	r27, 0x00	; 0
    3958:	ef e5       	ldi	r30, 0x5F	; 95
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	80 81       	ld	r24, Z
    395e:	8f 77       	andi	r24, 0x7F	; 127
    3960:	8c 93       	st	X, r24
}
    3962:	cf 91       	pop	r28
    3964:	df 91       	pop	r29
    3966:	08 95       	ret

00003968 <DIO_voidConfig>:
#include "DIO.h"

void DIO_voidConfig(DIO_Pin_t pin, DIO_Port_t port, DIO_Dir_t dir)
{
    3968:	df 93       	push	r29
    396a:	cf 93       	push	r28
    396c:	00 d0       	rcall	.+0      	; 0x396e <DIO_voidConfig+0x6>
    396e:	00 d0       	rcall	.+0      	; 0x3970 <DIO_voidConfig+0x8>
    3970:	0f 92       	push	r0
    3972:	cd b7       	in	r28, 0x3d	; 61
    3974:	de b7       	in	r29, 0x3e	; 62
    3976:	89 83       	std	Y+1, r24	; 0x01
    3978:	6a 83       	std	Y+2, r22	; 0x02
    397a:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    397c:	8a 81       	ldd	r24, Y+2	; 0x02
    397e:	28 2f       	mov	r18, r24
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	3d 83       	std	Y+5, r19	; 0x05
    3984:	2c 83       	std	Y+4, r18	; 0x04
    3986:	8c 81       	ldd	r24, Y+4	; 0x04
    3988:	9d 81       	ldd	r25, Y+5	; 0x05
    398a:	81 30       	cpi	r24, 0x01	; 1
    398c:	91 05       	cpc	r25, r1
    398e:	09 f4       	brne	.+2      	; 0x3992 <DIO_voidConfig+0x2a>
    3990:	43 c0       	rjmp	.+134    	; 0x3a18 <DIO_voidConfig+0xb0>
    3992:	2c 81       	ldd	r18, Y+4	; 0x04
    3994:	3d 81       	ldd	r19, Y+5	; 0x05
    3996:	22 30       	cpi	r18, 0x02	; 2
    3998:	31 05       	cpc	r19, r1
    399a:	2c f4       	brge	.+10     	; 0x39a6 <DIO_voidConfig+0x3e>
    399c:	8c 81       	ldd	r24, Y+4	; 0x04
    399e:	9d 81       	ldd	r25, Y+5	; 0x05
    39a0:	00 97       	sbiw	r24, 0x00	; 0
    39a2:	71 f0       	breq	.+28     	; 0x39c0 <DIO_voidConfig+0x58>
    39a4:	bc c0       	rjmp	.+376    	; 0x3b1e <DIO_voidConfig+0x1b6>
    39a6:	2c 81       	ldd	r18, Y+4	; 0x04
    39a8:	3d 81       	ldd	r19, Y+5	; 0x05
    39aa:	22 30       	cpi	r18, 0x02	; 2
    39ac:	31 05       	cpc	r19, r1
    39ae:	09 f4       	brne	.+2      	; 0x39b2 <DIO_voidConfig+0x4a>
    39b0:	5f c0       	rjmp	.+190    	; 0x3a70 <DIO_voidConfig+0x108>
    39b2:	8c 81       	ldd	r24, Y+4	; 0x04
    39b4:	9d 81       	ldd	r25, Y+5	; 0x05
    39b6:	83 30       	cpi	r24, 0x03	; 3
    39b8:	91 05       	cpc	r25, r1
    39ba:	09 f4       	brne	.+2      	; 0x39be <DIO_voidConfig+0x56>
    39bc:	85 c0       	rjmp	.+266    	; 0x3ac8 <DIO_voidConfig+0x160>
    39be:	af c0       	rjmp	.+350    	; 0x3b1e <DIO_voidConfig+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    39c0:	8b 81       	ldd	r24, Y+3	; 0x03
    39c2:	88 23       	and	r24, r24
    39c4:	a9 f4       	brne	.+42     	; 0x39f0 <DIO_voidConfig+0x88>
		{
			CLEAR_BIT(pin, DIO_DDRA_REG);
    39c6:	aa e3       	ldi	r26, 0x3A	; 58
    39c8:	b0 e0       	ldi	r27, 0x00	; 0
    39ca:	ea e3       	ldi	r30, 0x3A	; 58
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	80 81       	ld	r24, Z
    39d0:	48 2f       	mov	r20, r24
    39d2:	89 81       	ldd	r24, Y+1	; 0x01
    39d4:	28 2f       	mov	r18, r24
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	02 2e       	mov	r0, r18
    39de:	02 c0       	rjmp	.+4      	; 0x39e4 <DIO_voidConfig+0x7c>
    39e0:	88 0f       	add	r24, r24
    39e2:	99 1f       	adc	r25, r25
    39e4:	0a 94       	dec	r0
    39e6:	e2 f7       	brpl	.-8      	; 0x39e0 <DIO_voidConfig+0x78>
    39e8:	80 95       	com	r24
    39ea:	84 23       	and	r24, r20
    39ec:	8c 93       	st	X, r24
    39ee:	97 c0       	rjmp	.+302    	; 0x3b1e <DIO_voidConfig+0x1b6>
		}
		else
		{
			SET_BIT(pin, DIO_DDRA_REG);
    39f0:	aa e3       	ldi	r26, 0x3A	; 58
    39f2:	b0 e0       	ldi	r27, 0x00	; 0
    39f4:	ea e3       	ldi	r30, 0x3A	; 58
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	80 81       	ld	r24, Z
    39fa:	48 2f       	mov	r20, r24
    39fc:	89 81       	ldd	r24, Y+1	; 0x01
    39fe:	28 2f       	mov	r18, r24
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	02 2e       	mov	r0, r18
    3a08:	02 c0       	rjmp	.+4      	; 0x3a0e <DIO_voidConfig+0xa6>
    3a0a:	88 0f       	add	r24, r24
    3a0c:	99 1f       	adc	r25, r25
    3a0e:	0a 94       	dec	r0
    3a10:	e2 f7       	brpl	.-8      	; 0x3a0a <DIO_voidConfig+0xa2>
    3a12:	84 2b       	or	r24, r20
    3a14:	8c 93       	st	X, r24
    3a16:	83 c0       	rjmp	.+262    	; 0x3b1e <DIO_voidConfig+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    3a18:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1a:	88 23       	and	r24, r24
    3a1c:	a9 f4       	brne	.+42     	; 0x3a48 <DIO_voidConfig+0xe0>
		{
			CLEAR_BIT(pin, DIO_DDRB_REG);
    3a1e:	a7 e3       	ldi	r26, 0x37	; 55
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	e7 e3       	ldi	r30, 0x37	; 55
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	80 81       	ld	r24, Z
    3a28:	48 2f       	mov	r20, r24
    3a2a:	89 81       	ldd	r24, Y+1	; 0x01
    3a2c:	28 2f       	mov	r18, r24
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	02 2e       	mov	r0, r18
    3a36:	02 c0       	rjmp	.+4      	; 0x3a3c <DIO_voidConfig+0xd4>
    3a38:	88 0f       	add	r24, r24
    3a3a:	99 1f       	adc	r25, r25
    3a3c:	0a 94       	dec	r0
    3a3e:	e2 f7       	brpl	.-8      	; 0x3a38 <DIO_voidConfig+0xd0>
    3a40:	80 95       	com	r24
    3a42:	84 23       	and	r24, r20
    3a44:	8c 93       	st	X, r24
    3a46:	6b c0       	rjmp	.+214    	; 0x3b1e <DIO_voidConfig+0x1b6>
		}
		else
		{
			SET_BIT(pin, DIO_DDRB_REG);
    3a48:	a7 e3       	ldi	r26, 0x37	; 55
    3a4a:	b0 e0       	ldi	r27, 0x00	; 0
    3a4c:	e7 e3       	ldi	r30, 0x37	; 55
    3a4e:	f0 e0       	ldi	r31, 0x00	; 0
    3a50:	80 81       	ld	r24, Z
    3a52:	48 2f       	mov	r20, r24
    3a54:	89 81       	ldd	r24, Y+1	; 0x01
    3a56:	28 2f       	mov	r18, r24
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	02 2e       	mov	r0, r18
    3a60:	02 c0       	rjmp	.+4      	; 0x3a66 <DIO_voidConfig+0xfe>
    3a62:	88 0f       	add	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	0a 94       	dec	r0
    3a68:	e2 f7       	brpl	.-8      	; 0x3a62 <DIO_voidConfig+0xfa>
    3a6a:	84 2b       	or	r24, r20
    3a6c:	8c 93       	st	X, r24
    3a6e:	57 c0       	rjmp	.+174    	; 0x3b1e <DIO_voidConfig+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    3a70:	8b 81       	ldd	r24, Y+3	; 0x03
    3a72:	88 23       	and	r24, r24
    3a74:	a9 f4       	brne	.+42     	; 0x3aa0 <DIO_voidConfig+0x138>
		{
			CLEAR_BIT(pin, DIO_DDRC_REG);
    3a76:	a4 e3       	ldi	r26, 0x34	; 52
    3a78:	b0 e0       	ldi	r27, 0x00	; 0
    3a7a:	e4 e3       	ldi	r30, 0x34	; 52
    3a7c:	f0 e0       	ldi	r31, 0x00	; 0
    3a7e:	80 81       	ld	r24, Z
    3a80:	48 2f       	mov	r20, r24
    3a82:	89 81       	ldd	r24, Y+1	; 0x01
    3a84:	28 2f       	mov	r18, r24
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	81 e0       	ldi	r24, 0x01	; 1
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	02 2e       	mov	r0, r18
    3a8e:	02 c0       	rjmp	.+4      	; 0x3a94 <DIO_voidConfig+0x12c>
    3a90:	88 0f       	add	r24, r24
    3a92:	99 1f       	adc	r25, r25
    3a94:	0a 94       	dec	r0
    3a96:	e2 f7       	brpl	.-8      	; 0x3a90 <DIO_voidConfig+0x128>
    3a98:	80 95       	com	r24
    3a9a:	84 23       	and	r24, r20
    3a9c:	8c 93       	st	X, r24
    3a9e:	3f c0       	rjmp	.+126    	; 0x3b1e <DIO_voidConfig+0x1b6>
		}
		else
		{
			SET_BIT(pin, DIO_DDRC_REG);
    3aa0:	a4 e3       	ldi	r26, 0x34	; 52
    3aa2:	b0 e0       	ldi	r27, 0x00	; 0
    3aa4:	e4 e3       	ldi	r30, 0x34	; 52
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	80 81       	ld	r24, Z
    3aaa:	48 2f       	mov	r20, r24
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	28 2f       	mov	r18, r24
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	02 2e       	mov	r0, r18
    3ab8:	02 c0       	rjmp	.+4      	; 0x3abe <DIO_voidConfig+0x156>
    3aba:	88 0f       	add	r24, r24
    3abc:	99 1f       	adc	r25, r25
    3abe:	0a 94       	dec	r0
    3ac0:	e2 f7       	brpl	.-8      	; 0x3aba <DIO_voidConfig+0x152>
    3ac2:	84 2b       	or	r24, r20
    3ac4:	8c 93       	st	X, r24
    3ac6:	2b c0       	rjmp	.+86     	; 0x3b1e <DIO_voidConfig+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (dir == DIO_INPUT)
    3ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aca:	88 23       	and	r24, r24
    3acc:	a9 f4       	brne	.+42     	; 0x3af8 <DIO_voidConfig+0x190>
		{
			CLEAR_BIT(pin, DIO_DDRD_REG);
    3ace:	a1 e3       	ldi	r26, 0x31	; 49
    3ad0:	b0 e0       	ldi	r27, 0x00	; 0
    3ad2:	e1 e3       	ldi	r30, 0x31	; 49
    3ad4:	f0 e0       	ldi	r31, 0x00	; 0
    3ad6:	80 81       	ld	r24, Z
    3ad8:	48 2f       	mov	r20, r24
    3ada:	89 81       	ldd	r24, Y+1	; 0x01
    3adc:	28 2f       	mov	r18, r24
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	02 2e       	mov	r0, r18
    3ae6:	02 c0       	rjmp	.+4      	; 0x3aec <DIO_voidConfig+0x184>
    3ae8:	88 0f       	add	r24, r24
    3aea:	99 1f       	adc	r25, r25
    3aec:	0a 94       	dec	r0
    3aee:	e2 f7       	brpl	.-8      	; 0x3ae8 <DIO_voidConfig+0x180>
    3af0:	80 95       	com	r24
    3af2:	84 23       	and	r24, r20
    3af4:	8c 93       	st	X, r24
    3af6:	13 c0       	rjmp	.+38     	; 0x3b1e <DIO_voidConfig+0x1b6>
		}
		else
		{
			SET_BIT(pin, DIO_DDRD_REG);
    3af8:	a1 e3       	ldi	r26, 0x31	; 49
    3afa:	b0 e0       	ldi	r27, 0x00	; 0
    3afc:	e1 e3       	ldi	r30, 0x31	; 49
    3afe:	f0 e0       	ldi	r31, 0x00	; 0
    3b00:	80 81       	ld	r24, Z
    3b02:	48 2f       	mov	r20, r24
    3b04:	89 81       	ldd	r24, Y+1	; 0x01
    3b06:	28 2f       	mov	r18, r24
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	02 2e       	mov	r0, r18
    3b10:	02 c0       	rjmp	.+4      	; 0x3b16 <DIO_voidConfig+0x1ae>
    3b12:	88 0f       	add	r24, r24
    3b14:	99 1f       	adc	r25, r25
    3b16:	0a 94       	dec	r0
    3b18:	e2 f7       	brpl	.-8      	; 0x3b12 <DIO_voidConfig+0x1aa>
    3b1a:	84 2b       	or	r24, r20
    3b1c:	8c 93       	st	X, r24
		}
		break;
	}
}
    3b1e:	0f 90       	pop	r0
    3b20:	0f 90       	pop	r0
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	cf 91       	pop	r28
    3b2a:	df 91       	pop	r29
    3b2c:	08 95       	ret

00003b2e <DIO_voidWrite>:

void DIO_voidWrite(DIO_Pin_t pin, DIO_Port_t port, DIO_Level_t level)
{
    3b2e:	df 93       	push	r29
    3b30:	cf 93       	push	r28
    3b32:	00 d0       	rcall	.+0      	; 0x3b34 <DIO_voidWrite+0x6>
    3b34:	00 d0       	rcall	.+0      	; 0x3b36 <DIO_voidWrite+0x8>
    3b36:	0f 92       	push	r0
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62
    3b3c:	89 83       	std	Y+1, r24	; 0x01
    3b3e:	6a 83       	std	Y+2, r22	; 0x02
    3b40:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    3b42:	8a 81       	ldd	r24, Y+2	; 0x02
    3b44:	28 2f       	mov	r18, r24
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	3d 83       	std	Y+5, r19	; 0x05
    3b4a:	2c 83       	std	Y+4, r18	; 0x04
    3b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b50:	81 30       	cpi	r24, 0x01	; 1
    3b52:	91 05       	cpc	r25, r1
    3b54:	09 f4       	brne	.+2      	; 0x3b58 <DIO_voidWrite+0x2a>
    3b56:	43 c0       	rjmp	.+134    	; 0x3bde <DIO_voidWrite+0xb0>
    3b58:	2c 81       	ldd	r18, Y+4	; 0x04
    3b5a:	3d 81       	ldd	r19, Y+5	; 0x05
    3b5c:	22 30       	cpi	r18, 0x02	; 2
    3b5e:	31 05       	cpc	r19, r1
    3b60:	2c f4       	brge	.+10     	; 0x3b6c <DIO_voidWrite+0x3e>
    3b62:	8c 81       	ldd	r24, Y+4	; 0x04
    3b64:	9d 81       	ldd	r25, Y+5	; 0x05
    3b66:	00 97       	sbiw	r24, 0x00	; 0
    3b68:	71 f0       	breq	.+28     	; 0x3b86 <DIO_voidWrite+0x58>
    3b6a:	bc c0       	rjmp	.+376    	; 0x3ce4 <DIO_voidWrite+0x1b6>
    3b6c:	2c 81       	ldd	r18, Y+4	; 0x04
    3b6e:	3d 81       	ldd	r19, Y+5	; 0x05
    3b70:	22 30       	cpi	r18, 0x02	; 2
    3b72:	31 05       	cpc	r19, r1
    3b74:	09 f4       	brne	.+2      	; 0x3b78 <DIO_voidWrite+0x4a>
    3b76:	5f c0       	rjmp	.+190    	; 0x3c36 <DIO_voidWrite+0x108>
    3b78:	8c 81       	ldd	r24, Y+4	; 0x04
    3b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b7c:	83 30       	cpi	r24, 0x03	; 3
    3b7e:	91 05       	cpc	r25, r1
    3b80:	09 f4       	brne	.+2      	; 0x3b84 <DIO_voidWrite+0x56>
    3b82:	85 c0       	rjmp	.+266    	; 0x3c8e <DIO_voidWrite+0x160>
    3b84:	af c0       	rjmp	.+350    	; 0x3ce4 <DIO_voidWrite+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    3b86:	8b 81       	ldd	r24, Y+3	; 0x03
    3b88:	81 30       	cpi	r24, 0x01	; 1
    3b8a:	a1 f4       	brne	.+40     	; 0x3bb4 <DIO_voidWrite+0x86>
		{
			SET_BIT(pin, DIO_PORTA_REG);
    3b8c:	ab e3       	ldi	r26, 0x3B	; 59
    3b8e:	b0 e0       	ldi	r27, 0x00	; 0
    3b90:	eb e3       	ldi	r30, 0x3B	; 59
    3b92:	f0 e0       	ldi	r31, 0x00	; 0
    3b94:	80 81       	ld	r24, Z
    3b96:	48 2f       	mov	r20, r24
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
    3b9a:	28 2f       	mov	r18, r24
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	02 2e       	mov	r0, r18
    3ba4:	02 c0       	rjmp	.+4      	; 0x3baa <DIO_voidWrite+0x7c>
    3ba6:	88 0f       	add	r24, r24
    3ba8:	99 1f       	adc	r25, r25
    3baa:	0a 94       	dec	r0
    3bac:	e2 f7       	brpl	.-8      	; 0x3ba6 <DIO_voidWrite+0x78>
    3bae:	84 2b       	or	r24, r20
    3bb0:	8c 93       	st	X, r24
    3bb2:	98 c0       	rjmp	.+304    	; 0x3ce4 <DIO_voidWrite+0x1b6>
		}
		else
		{
			CLEAR_BIT(pin, DIO_PORTA_REG);
    3bb4:	ab e3       	ldi	r26, 0x3B	; 59
    3bb6:	b0 e0       	ldi	r27, 0x00	; 0
    3bb8:	eb e3       	ldi	r30, 0x3B	; 59
    3bba:	f0 e0       	ldi	r31, 0x00	; 0
    3bbc:	80 81       	ld	r24, Z
    3bbe:	48 2f       	mov	r20, r24
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	28 2f       	mov	r18, r24
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	02 2e       	mov	r0, r18
    3bcc:	02 c0       	rjmp	.+4      	; 0x3bd2 <DIO_voidWrite+0xa4>
    3bce:	88 0f       	add	r24, r24
    3bd0:	99 1f       	adc	r25, r25
    3bd2:	0a 94       	dec	r0
    3bd4:	e2 f7       	brpl	.-8      	; 0x3bce <DIO_voidWrite+0xa0>
    3bd6:	80 95       	com	r24
    3bd8:	84 23       	and	r24, r20
    3bda:	8c 93       	st	X, r24
    3bdc:	83 c0       	rjmp	.+262    	; 0x3ce4 <DIO_voidWrite+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    3bde:	8b 81       	ldd	r24, Y+3	; 0x03
    3be0:	81 30       	cpi	r24, 0x01	; 1
    3be2:	a1 f4       	brne	.+40     	; 0x3c0c <DIO_voidWrite+0xde>
		{
			SET_BIT(pin, DIO_PORTB_REG);
    3be4:	a8 e3       	ldi	r26, 0x38	; 56
    3be6:	b0 e0       	ldi	r27, 0x00	; 0
    3be8:	e8 e3       	ldi	r30, 0x38	; 56
    3bea:	f0 e0       	ldi	r31, 0x00	; 0
    3bec:	80 81       	ld	r24, Z
    3bee:	48 2f       	mov	r20, r24
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	28 2f       	mov	r18, r24
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	02 2e       	mov	r0, r18
    3bfc:	02 c0       	rjmp	.+4      	; 0x3c02 <DIO_voidWrite+0xd4>
    3bfe:	88 0f       	add	r24, r24
    3c00:	99 1f       	adc	r25, r25
    3c02:	0a 94       	dec	r0
    3c04:	e2 f7       	brpl	.-8      	; 0x3bfe <DIO_voidWrite+0xd0>
    3c06:	84 2b       	or	r24, r20
    3c08:	8c 93       	st	X, r24
    3c0a:	6c c0       	rjmp	.+216    	; 0x3ce4 <DIO_voidWrite+0x1b6>
		}
		else
		{
			CLEAR_BIT(pin, DIO_PORTB_REG);
    3c0c:	a8 e3       	ldi	r26, 0x38	; 56
    3c0e:	b0 e0       	ldi	r27, 0x00	; 0
    3c10:	e8 e3       	ldi	r30, 0x38	; 56
    3c12:	f0 e0       	ldi	r31, 0x00	; 0
    3c14:	80 81       	ld	r24, Z
    3c16:	48 2f       	mov	r20, r24
    3c18:	89 81       	ldd	r24, Y+1	; 0x01
    3c1a:	28 2f       	mov	r18, r24
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	02 2e       	mov	r0, r18
    3c24:	02 c0       	rjmp	.+4      	; 0x3c2a <DIO_voidWrite+0xfc>
    3c26:	88 0f       	add	r24, r24
    3c28:	99 1f       	adc	r25, r25
    3c2a:	0a 94       	dec	r0
    3c2c:	e2 f7       	brpl	.-8      	; 0x3c26 <DIO_voidWrite+0xf8>
    3c2e:	80 95       	com	r24
    3c30:	84 23       	and	r24, r20
    3c32:	8c 93       	st	X, r24
    3c34:	57 c0       	rjmp	.+174    	; 0x3ce4 <DIO_voidWrite+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    3c36:	8b 81       	ldd	r24, Y+3	; 0x03
    3c38:	81 30       	cpi	r24, 0x01	; 1
    3c3a:	a1 f4       	brne	.+40     	; 0x3c64 <DIO_voidWrite+0x136>
		{
			SET_BIT(pin, DIO_PORTC_REG);
    3c3c:	a5 e3       	ldi	r26, 0x35	; 53
    3c3e:	b0 e0       	ldi	r27, 0x00	; 0
    3c40:	e5 e3       	ldi	r30, 0x35	; 53
    3c42:	f0 e0       	ldi	r31, 0x00	; 0
    3c44:	80 81       	ld	r24, Z
    3c46:	48 2f       	mov	r20, r24
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	28 2f       	mov	r18, r24
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	02 2e       	mov	r0, r18
    3c54:	02 c0       	rjmp	.+4      	; 0x3c5a <DIO_voidWrite+0x12c>
    3c56:	88 0f       	add	r24, r24
    3c58:	99 1f       	adc	r25, r25
    3c5a:	0a 94       	dec	r0
    3c5c:	e2 f7       	brpl	.-8      	; 0x3c56 <DIO_voidWrite+0x128>
    3c5e:	84 2b       	or	r24, r20
    3c60:	8c 93       	st	X, r24
    3c62:	40 c0       	rjmp	.+128    	; 0x3ce4 <DIO_voidWrite+0x1b6>
		}
		else
		{
			CLEAR_BIT(pin, DIO_PORTC_REG);
    3c64:	a5 e3       	ldi	r26, 0x35	; 53
    3c66:	b0 e0       	ldi	r27, 0x00	; 0
    3c68:	e5 e3       	ldi	r30, 0x35	; 53
    3c6a:	f0 e0       	ldi	r31, 0x00	; 0
    3c6c:	80 81       	ld	r24, Z
    3c6e:	48 2f       	mov	r20, r24
    3c70:	89 81       	ldd	r24, Y+1	; 0x01
    3c72:	28 2f       	mov	r18, r24
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	02 2e       	mov	r0, r18
    3c7c:	02 c0       	rjmp	.+4      	; 0x3c82 <DIO_voidWrite+0x154>
    3c7e:	88 0f       	add	r24, r24
    3c80:	99 1f       	adc	r25, r25
    3c82:	0a 94       	dec	r0
    3c84:	e2 f7       	brpl	.-8      	; 0x3c7e <DIO_voidWrite+0x150>
    3c86:	80 95       	com	r24
    3c88:	84 23       	and	r24, r20
    3c8a:	8c 93       	st	X, r24
    3c8c:	2b c0       	rjmp	.+86     	; 0x3ce4 <DIO_voidWrite+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    3c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c90:	81 30       	cpi	r24, 0x01	; 1
    3c92:	a1 f4       	brne	.+40     	; 0x3cbc <DIO_voidWrite+0x18e>
		{
			SET_BIT(pin, DIO_PORTD_REG);
    3c94:	a2 e3       	ldi	r26, 0x32	; 50
    3c96:	b0 e0       	ldi	r27, 0x00	; 0
    3c98:	e2 e3       	ldi	r30, 0x32	; 50
    3c9a:	f0 e0       	ldi	r31, 0x00	; 0
    3c9c:	80 81       	ld	r24, Z
    3c9e:	48 2f       	mov	r20, r24
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	28 2f       	mov	r18, r24
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	02 2e       	mov	r0, r18
    3cac:	02 c0       	rjmp	.+4      	; 0x3cb2 <DIO_voidWrite+0x184>
    3cae:	88 0f       	add	r24, r24
    3cb0:	99 1f       	adc	r25, r25
    3cb2:	0a 94       	dec	r0
    3cb4:	e2 f7       	brpl	.-8      	; 0x3cae <DIO_voidWrite+0x180>
    3cb6:	84 2b       	or	r24, r20
    3cb8:	8c 93       	st	X, r24
    3cba:	14 c0       	rjmp	.+40     	; 0x3ce4 <DIO_voidWrite+0x1b6>
		}
		else
		{
			CLEAR_BIT(pin, DIO_PORTD_REG);
    3cbc:	a2 e3       	ldi	r26, 0x32	; 50
    3cbe:	b0 e0       	ldi	r27, 0x00	; 0
    3cc0:	e2 e3       	ldi	r30, 0x32	; 50
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 81       	ld	r24, Z
    3cc6:	48 2f       	mov	r20, r24
    3cc8:	89 81       	ldd	r24, Y+1	; 0x01
    3cca:	28 2f       	mov	r18, r24
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	02 2e       	mov	r0, r18
    3cd4:	02 c0       	rjmp	.+4      	; 0x3cda <DIO_voidWrite+0x1ac>
    3cd6:	88 0f       	add	r24, r24
    3cd8:	99 1f       	adc	r25, r25
    3cda:	0a 94       	dec	r0
    3cdc:	e2 f7       	brpl	.-8      	; 0x3cd6 <DIO_voidWrite+0x1a8>
    3cde:	80 95       	com	r24
    3ce0:	84 23       	and	r24, r20
    3ce2:	8c 93       	st	X, r24
		}
		break;
	}
}
    3ce4:	0f 90       	pop	r0
    3ce6:	0f 90       	pop	r0
    3ce8:	0f 90       	pop	r0
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	cf 91       	pop	r28
    3cf0:	df 91       	pop	r29
    3cf2:	08 95       	ret

00003cf4 <DIO_voidWritePort>:

void DIO_voidWritePort(uint8_t data, uint8_t mask, DIO_Port_t port)
{
    3cf4:	df 93       	push	r29
    3cf6:	cf 93       	push	r28
    3cf8:	00 d0       	rcall	.+0      	; 0x3cfa <DIO_voidWritePort+0x6>
    3cfa:	00 d0       	rcall	.+0      	; 0x3cfc <DIO_voidWritePort+0x8>
    3cfc:	0f 92       	push	r0
    3cfe:	cd b7       	in	r28, 0x3d	; 61
    3d00:	de b7       	in	r29, 0x3e	; 62
    3d02:	89 83       	std	Y+1, r24	; 0x01
    3d04:	6a 83       	std	Y+2, r22	; 0x02
    3d06:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    3d08:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0a:	28 2f       	mov	r18, r24
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	3d 83       	std	Y+5, r19	; 0x05
    3d10:	2c 83       	std	Y+4, r18	; 0x04
    3d12:	8c 81       	ldd	r24, Y+4	; 0x04
    3d14:	9d 81       	ldd	r25, Y+5	; 0x05
    3d16:	81 30       	cpi	r24, 0x01	; 1
    3d18:	91 05       	cpc	r25, r1
    3d1a:	01 f1       	breq	.+64     	; 0x3d5c <DIO_voidWritePort+0x68>
    3d1c:	2c 81       	ldd	r18, Y+4	; 0x04
    3d1e:	3d 81       	ldd	r19, Y+5	; 0x05
    3d20:	22 30       	cpi	r18, 0x02	; 2
    3d22:	31 05       	cpc	r19, r1
    3d24:	2c f4       	brge	.+10     	; 0x3d30 <DIO_voidWritePort+0x3c>
    3d26:	8c 81       	ldd	r24, Y+4	; 0x04
    3d28:	9d 81       	ldd	r25, Y+5	; 0x05
    3d2a:	00 97       	sbiw	r24, 0x00	; 0
    3d2c:	61 f0       	breq	.+24     	; 0x3d46 <DIO_voidWritePort+0x52>
    3d2e:	36 c0       	rjmp	.+108    	; 0x3d9c <DIO_voidWritePort+0xa8>
    3d30:	2c 81       	ldd	r18, Y+4	; 0x04
    3d32:	3d 81       	ldd	r19, Y+5	; 0x05
    3d34:	22 30       	cpi	r18, 0x02	; 2
    3d36:	31 05       	cpc	r19, r1
    3d38:	e1 f0       	breq	.+56     	; 0x3d72 <DIO_voidWritePort+0x7e>
    3d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3d3c:	9d 81       	ldd	r25, Y+5	; 0x05
    3d3e:	83 30       	cpi	r24, 0x03	; 3
    3d40:	91 05       	cpc	r25, r1
    3d42:	11 f1       	breq	.+68     	; 0x3d88 <DIO_voidWritePort+0x94>
    3d44:	2b c0       	rjmp	.+86     	; 0x3d9c <DIO_voidWritePort+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask) | data;
    3d46:	ab e3       	ldi	r26, 0x3B	; 59
    3d48:	b0 e0       	ldi	r27, 0x00	; 0
    3d4a:	eb e3       	ldi	r30, 0x3B	; 59
    3d4c:	f0 e0       	ldi	r31, 0x00	; 0
    3d4e:	90 81       	ld	r25, Z
    3d50:	8a 81       	ldd	r24, Y+2	; 0x02
    3d52:	98 23       	and	r25, r24
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	89 2b       	or	r24, r25
    3d58:	8c 93       	st	X, r24
    3d5a:	20 c0       	rjmp	.+64     	; 0x3d9c <DIO_voidWritePort+0xa8>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask) | data;
    3d5c:	a8 e3       	ldi	r26, 0x38	; 56
    3d5e:	b0 e0       	ldi	r27, 0x00	; 0
    3d60:	e8 e3       	ldi	r30, 0x38	; 56
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	90 81       	ld	r25, Z
    3d66:	8a 81       	ldd	r24, Y+2	; 0x02
    3d68:	98 23       	and	r25, r24
    3d6a:	89 81       	ldd	r24, Y+1	; 0x01
    3d6c:	89 2b       	or	r24, r25
    3d6e:	8c 93       	st	X, r24
    3d70:	15 c0       	rjmp	.+42     	; 0x3d9c <DIO_voidWritePort+0xa8>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask) | data;
    3d72:	a5 e3       	ldi	r26, 0x35	; 53
    3d74:	b0 e0       	ldi	r27, 0x00	; 0
    3d76:	e5 e3       	ldi	r30, 0x35	; 53
    3d78:	f0 e0       	ldi	r31, 0x00	; 0
    3d7a:	90 81       	ld	r25, Z
    3d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7e:	98 23       	and	r25, r24
    3d80:	89 81       	ldd	r24, Y+1	; 0x01
    3d82:	89 2b       	or	r24, r25
    3d84:	8c 93       	st	X, r24
    3d86:	0a c0       	rjmp	.+20     	; 0x3d9c <DIO_voidWritePort+0xa8>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask) | data;
    3d88:	a2 e3       	ldi	r26, 0x32	; 50
    3d8a:	b0 e0       	ldi	r27, 0x00	; 0
    3d8c:	e2 e3       	ldi	r30, 0x32	; 50
    3d8e:	f0 e0       	ldi	r31, 0x00	; 0
    3d90:	90 81       	ld	r25, Z
    3d92:	8a 81       	ldd	r24, Y+2	; 0x02
    3d94:	98 23       	and	r25, r24
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	89 2b       	or	r24, r25
    3d9a:	8c 93       	st	X, r24
		break;
	}
}
    3d9c:	0f 90       	pop	r0
    3d9e:	0f 90       	pop	r0
    3da0:	0f 90       	pop	r0
    3da2:	0f 90       	pop	r0
    3da4:	0f 90       	pop	r0
    3da6:	cf 91       	pop	r28
    3da8:	df 91       	pop	r29
    3daa:	08 95       	ret

00003dac <DIO_udtRead>:

DIO_Level_t DIO_udtRead(DIO_Pin_t pin, DIO_Port_t port)
{
    3dac:	df 93       	push	r29
    3dae:	cf 93       	push	r28
    3db0:	00 d0       	rcall	.+0      	; 0x3db2 <DIO_udtRead+0x6>
    3db2:	00 d0       	rcall	.+0      	; 0x3db4 <DIO_udtRead+0x8>
    3db4:	0f 92       	push	r0
    3db6:	cd b7       	in	r28, 0x3d	; 61
    3db8:	de b7       	in	r29, 0x3e	; 62
    3dba:	8a 83       	std	Y+2, r24	; 0x02
    3dbc:	6b 83       	std	Y+3, r22	; 0x03
	DIO_Level_t loc_result;

	switch (port)
    3dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc0:	28 2f       	mov	r18, r24
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	3d 83       	std	Y+5, r19	; 0x05
    3dc6:	2c 83       	std	Y+4, r18	; 0x04
    3dc8:	4c 81       	ldd	r20, Y+4	; 0x04
    3dca:	5d 81       	ldd	r21, Y+5	; 0x05
    3dcc:	41 30       	cpi	r20, 0x01	; 1
    3dce:	51 05       	cpc	r21, r1
    3dd0:	79 f1       	breq	.+94     	; 0x3e30 <DIO_udtRead+0x84>
    3dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    3dd6:	82 30       	cpi	r24, 0x02	; 2
    3dd8:	91 05       	cpc	r25, r1
    3dda:	34 f4       	brge	.+12     	; 0x3de8 <DIO_udtRead+0x3c>
    3ddc:	2c 81       	ldd	r18, Y+4	; 0x04
    3dde:	3d 81       	ldd	r19, Y+5	; 0x05
    3de0:	21 15       	cp	r18, r1
    3de2:	31 05       	cpc	r19, r1
    3de4:	69 f0       	breq	.+26     	; 0x3e00 <DIO_udtRead+0x54>
    3de6:	6b c0       	rjmp	.+214    	; 0x3ebe <DIO_udtRead+0x112>
    3de8:	4c 81       	ldd	r20, Y+4	; 0x04
    3dea:	5d 81       	ldd	r21, Y+5	; 0x05
    3dec:	42 30       	cpi	r20, 0x02	; 2
    3dee:	51 05       	cpc	r21, r1
    3df0:	b9 f1       	breq	.+110    	; 0x3e60 <DIO_udtRead+0xb4>
    3df2:	8c 81       	ldd	r24, Y+4	; 0x04
    3df4:	9d 81       	ldd	r25, Y+5	; 0x05
    3df6:	83 30       	cpi	r24, 0x03	; 3
    3df8:	91 05       	cpc	r25, r1
    3dfa:	09 f4       	brne	.+2      	; 0x3dfe <DIO_udtRead+0x52>
    3dfc:	49 c0       	rjmp	.+146    	; 0x3e90 <DIO_udtRead+0xe4>
    3dfe:	5f c0       	rjmp	.+190    	; 0x3ebe <DIO_udtRead+0x112>
	{
	case DIO_PORTA:
		if (CHECK_BIT(pin, DIO_PINA_REG))
    3e00:	e9 e3       	ldi	r30, 0x39	; 57
    3e02:	f0 e0       	ldi	r31, 0x00	; 0
    3e04:	80 81       	ld	r24, Z
    3e06:	28 2f       	mov	r18, r24
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0c:	88 2f       	mov	r24, r24
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	a9 01       	movw	r20, r18
    3e12:	02 c0       	rjmp	.+4      	; 0x3e18 <DIO_udtRead+0x6c>
    3e14:	55 95       	asr	r21
    3e16:	47 95       	ror	r20
    3e18:	8a 95       	dec	r24
    3e1a:	e2 f7       	brpl	.-8      	; 0x3e14 <DIO_udtRead+0x68>
    3e1c:	ca 01       	movw	r24, r20
    3e1e:	81 70       	andi	r24, 0x01	; 1
    3e20:	90 70       	andi	r25, 0x00	; 0
    3e22:	88 23       	and	r24, r24
    3e24:	19 f0       	breq	.+6      	; 0x3e2c <DIO_udtRead+0x80>
		{
			loc_result = DIO_HIGH;
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	89 83       	std	Y+1, r24	; 0x01
    3e2a:	49 c0       	rjmp	.+146    	; 0x3ebe <DIO_udtRead+0x112>
		}
		else
		{
			loc_result = DIO_LOW;
    3e2c:	19 82       	std	Y+1, r1	; 0x01
    3e2e:	47 c0       	rjmp	.+142    	; 0x3ebe <DIO_udtRead+0x112>
		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(pin, DIO_PINB_REG))
    3e30:	e6 e3       	ldi	r30, 0x36	; 54
    3e32:	f0 e0       	ldi	r31, 0x00	; 0
    3e34:	80 81       	ld	r24, Z
    3e36:	28 2f       	mov	r18, r24
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3c:	88 2f       	mov	r24, r24
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	a9 01       	movw	r20, r18
    3e42:	02 c0       	rjmp	.+4      	; 0x3e48 <DIO_udtRead+0x9c>
    3e44:	55 95       	asr	r21
    3e46:	47 95       	ror	r20
    3e48:	8a 95       	dec	r24
    3e4a:	e2 f7       	brpl	.-8      	; 0x3e44 <DIO_udtRead+0x98>
    3e4c:	ca 01       	movw	r24, r20
    3e4e:	81 70       	andi	r24, 0x01	; 1
    3e50:	90 70       	andi	r25, 0x00	; 0
    3e52:	88 23       	and	r24, r24
    3e54:	19 f0       	breq	.+6      	; 0x3e5c <DIO_udtRead+0xb0>
		{
			loc_result = DIO_HIGH;
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	89 83       	std	Y+1, r24	; 0x01
    3e5a:	31 c0       	rjmp	.+98     	; 0x3ebe <DIO_udtRead+0x112>
		}
		else
		{
			loc_result = DIO_LOW;
    3e5c:	19 82       	std	Y+1, r1	; 0x01
    3e5e:	2f c0       	rjmp	.+94     	; 0x3ebe <DIO_udtRead+0x112>
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(pin, DIO_PINC_REG))
    3e60:	e3 e3       	ldi	r30, 0x33	; 51
    3e62:	f0 e0       	ldi	r31, 0x00	; 0
    3e64:	80 81       	ld	r24, Z
    3e66:	28 2f       	mov	r18, r24
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6c:	88 2f       	mov	r24, r24
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	a9 01       	movw	r20, r18
    3e72:	02 c0       	rjmp	.+4      	; 0x3e78 <DIO_udtRead+0xcc>
    3e74:	55 95       	asr	r21
    3e76:	47 95       	ror	r20
    3e78:	8a 95       	dec	r24
    3e7a:	e2 f7       	brpl	.-8      	; 0x3e74 <DIO_udtRead+0xc8>
    3e7c:	ca 01       	movw	r24, r20
    3e7e:	81 70       	andi	r24, 0x01	; 1
    3e80:	90 70       	andi	r25, 0x00	; 0
    3e82:	88 23       	and	r24, r24
    3e84:	19 f0       	breq	.+6      	; 0x3e8c <DIO_udtRead+0xe0>
		{
			loc_result = DIO_HIGH;
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	89 83       	std	Y+1, r24	; 0x01
    3e8a:	19 c0       	rjmp	.+50     	; 0x3ebe <DIO_udtRead+0x112>
		}
		else
		{
			loc_result = DIO_LOW;
    3e8c:	19 82       	std	Y+1, r1	; 0x01
    3e8e:	17 c0       	rjmp	.+46     	; 0x3ebe <DIO_udtRead+0x112>
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(pin, DIO_PIND_REG))
    3e90:	e0 e3       	ldi	r30, 0x30	; 48
    3e92:	f0 e0       	ldi	r31, 0x00	; 0
    3e94:	80 81       	ld	r24, Z
    3e96:	28 2f       	mov	r18, r24
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9c:	88 2f       	mov	r24, r24
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	a9 01       	movw	r20, r18
    3ea2:	02 c0       	rjmp	.+4      	; 0x3ea8 <DIO_udtRead+0xfc>
    3ea4:	55 95       	asr	r21
    3ea6:	47 95       	ror	r20
    3ea8:	8a 95       	dec	r24
    3eaa:	e2 f7       	brpl	.-8      	; 0x3ea4 <DIO_udtRead+0xf8>
    3eac:	ca 01       	movw	r24, r20
    3eae:	81 70       	andi	r24, 0x01	; 1
    3eb0:	90 70       	andi	r25, 0x00	; 0
    3eb2:	88 23       	and	r24, r24
    3eb4:	19 f0       	breq	.+6      	; 0x3ebc <DIO_udtRead+0x110>
		{
			loc_result = DIO_HIGH;
    3eb6:	81 e0       	ldi	r24, 0x01	; 1
    3eb8:	89 83       	std	Y+1, r24	; 0x01
    3eba:	01 c0       	rjmp	.+2      	; 0x3ebe <DIO_udtRead+0x112>
		}
		else
		{
			loc_result = DIO_LOW;
    3ebc:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_result;
    3ebe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ec0:	0f 90       	pop	r0
    3ec2:	0f 90       	pop	r0
    3ec4:	0f 90       	pop	r0
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	cf 91       	pop	r28
    3ecc:	df 91       	pop	r29
    3ece:	08 95       	ret

00003ed0 <DIO_voidToggle>:

void DIO_voidToggle(DIO_Pin_t pin, DIO_Port_t port)
{
    3ed0:	df 93       	push	r29
    3ed2:	cf 93       	push	r28
    3ed4:	00 d0       	rcall	.+0      	; 0x3ed6 <DIO_voidToggle+0x6>
    3ed6:	00 d0       	rcall	.+0      	; 0x3ed8 <DIO_voidToggle+0x8>
    3ed8:	cd b7       	in	r28, 0x3d	; 61
    3eda:	de b7       	in	r29, 0x3e	; 62
    3edc:	89 83       	std	Y+1, r24	; 0x01
    3ede:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    3ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee2:	28 2f       	mov	r18, r24
    3ee4:	30 e0       	ldi	r19, 0x00	; 0
    3ee6:	3c 83       	std	Y+4, r19	; 0x04
    3ee8:	2b 83       	std	Y+3, r18	; 0x03
    3eea:	8b 81       	ldd	r24, Y+3	; 0x03
    3eec:	9c 81       	ldd	r25, Y+4	; 0x04
    3eee:	81 30       	cpi	r24, 0x01	; 1
    3ef0:	91 05       	cpc	r25, r1
    3ef2:	49 f1       	breq	.+82     	; 0x3f46 <DIO_voidToggle+0x76>
    3ef4:	2b 81       	ldd	r18, Y+3	; 0x03
    3ef6:	3c 81       	ldd	r19, Y+4	; 0x04
    3ef8:	22 30       	cpi	r18, 0x02	; 2
    3efa:	31 05       	cpc	r19, r1
    3efc:	2c f4       	brge	.+10     	; 0x3f08 <DIO_voidToggle+0x38>
    3efe:	8b 81       	ldd	r24, Y+3	; 0x03
    3f00:	9c 81       	ldd	r25, Y+4	; 0x04
    3f02:	00 97       	sbiw	r24, 0x00	; 0
    3f04:	61 f0       	breq	.+24     	; 0x3f1e <DIO_voidToggle+0x4e>
    3f06:	5a c0       	rjmp	.+180    	; 0x3fbc <DIO_voidToggle+0xec>
    3f08:	2b 81       	ldd	r18, Y+3	; 0x03
    3f0a:	3c 81       	ldd	r19, Y+4	; 0x04
    3f0c:	22 30       	cpi	r18, 0x02	; 2
    3f0e:	31 05       	cpc	r19, r1
    3f10:	71 f1       	breq	.+92     	; 0x3f6e <DIO_voidToggle+0x9e>
    3f12:	8b 81       	ldd	r24, Y+3	; 0x03
    3f14:	9c 81       	ldd	r25, Y+4	; 0x04
    3f16:	83 30       	cpi	r24, 0x03	; 3
    3f18:	91 05       	cpc	r25, r1
    3f1a:	e9 f1       	breq	.+122    	; 0x3f96 <DIO_voidToggle+0xc6>
    3f1c:	4f c0       	rjmp	.+158    	; 0x3fbc <DIO_voidToggle+0xec>
	{
	case DIO_PORTA:
		TOGGLE_BIT(pin, DIO_PORTA_REG);
    3f1e:	ab e3       	ldi	r26, 0x3B	; 59
    3f20:	b0 e0       	ldi	r27, 0x00	; 0
    3f22:	eb e3       	ldi	r30, 0x3B	; 59
    3f24:	f0 e0       	ldi	r31, 0x00	; 0
    3f26:	80 81       	ld	r24, Z
    3f28:	48 2f       	mov	r20, r24
    3f2a:	89 81       	ldd	r24, Y+1	; 0x01
    3f2c:	28 2f       	mov	r18, r24
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	02 2e       	mov	r0, r18
    3f36:	02 c0       	rjmp	.+4      	; 0x3f3c <DIO_voidToggle+0x6c>
    3f38:	88 0f       	add	r24, r24
    3f3a:	99 1f       	adc	r25, r25
    3f3c:	0a 94       	dec	r0
    3f3e:	e2 f7       	brpl	.-8      	; 0x3f38 <DIO_voidToggle+0x68>
    3f40:	84 27       	eor	r24, r20
    3f42:	8c 93       	st	X, r24
    3f44:	3b c0       	rjmp	.+118    	; 0x3fbc <DIO_voidToggle+0xec>
		break;

	case DIO_PORTB:
		TOGGLE_BIT(pin, DIO_PORTB_REG);
    3f46:	a8 e3       	ldi	r26, 0x38	; 56
    3f48:	b0 e0       	ldi	r27, 0x00	; 0
    3f4a:	e8 e3       	ldi	r30, 0x38	; 56
    3f4c:	f0 e0       	ldi	r31, 0x00	; 0
    3f4e:	80 81       	ld	r24, Z
    3f50:	48 2f       	mov	r20, r24
    3f52:	89 81       	ldd	r24, Y+1	; 0x01
    3f54:	28 2f       	mov	r18, r24
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	02 2e       	mov	r0, r18
    3f5e:	02 c0       	rjmp	.+4      	; 0x3f64 <DIO_voidToggle+0x94>
    3f60:	88 0f       	add	r24, r24
    3f62:	99 1f       	adc	r25, r25
    3f64:	0a 94       	dec	r0
    3f66:	e2 f7       	brpl	.-8      	; 0x3f60 <DIO_voidToggle+0x90>
    3f68:	84 27       	eor	r24, r20
    3f6a:	8c 93       	st	X, r24
    3f6c:	27 c0       	rjmp	.+78     	; 0x3fbc <DIO_voidToggle+0xec>
		break;

	case DIO_PORTC:
		TOGGLE_BIT(pin, DIO_PORTC_REG);
    3f6e:	a5 e3       	ldi	r26, 0x35	; 53
    3f70:	b0 e0       	ldi	r27, 0x00	; 0
    3f72:	e5 e3       	ldi	r30, 0x35	; 53
    3f74:	f0 e0       	ldi	r31, 0x00	; 0
    3f76:	80 81       	ld	r24, Z
    3f78:	48 2f       	mov	r20, r24
    3f7a:	89 81       	ldd	r24, Y+1	; 0x01
    3f7c:	28 2f       	mov	r18, r24
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	81 e0       	ldi	r24, 0x01	; 1
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	02 2e       	mov	r0, r18
    3f86:	02 c0       	rjmp	.+4      	; 0x3f8c <DIO_voidToggle+0xbc>
    3f88:	88 0f       	add	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	0a 94       	dec	r0
    3f8e:	e2 f7       	brpl	.-8      	; 0x3f88 <DIO_voidToggle+0xb8>
    3f90:	84 27       	eor	r24, r20
    3f92:	8c 93       	st	X, r24
    3f94:	13 c0       	rjmp	.+38     	; 0x3fbc <DIO_voidToggle+0xec>
		break;

	case DIO_PORTD:
		TOGGLE_BIT(pin, DIO_PORTD_REG);
    3f96:	a2 e3       	ldi	r26, 0x32	; 50
    3f98:	b0 e0       	ldi	r27, 0x00	; 0
    3f9a:	e2 e3       	ldi	r30, 0x32	; 50
    3f9c:	f0 e0       	ldi	r31, 0x00	; 0
    3f9e:	80 81       	ld	r24, Z
    3fa0:	48 2f       	mov	r20, r24
    3fa2:	89 81       	ldd	r24, Y+1	; 0x01
    3fa4:	28 2f       	mov	r18, r24
    3fa6:	30 e0       	ldi	r19, 0x00	; 0
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	02 2e       	mov	r0, r18
    3fae:	02 c0       	rjmp	.+4      	; 0x3fb4 <DIO_voidToggle+0xe4>
    3fb0:	88 0f       	add	r24, r24
    3fb2:	99 1f       	adc	r25, r25
    3fb4:	0a 94       	dec	r0
    3fb6:	e2 f7       	brpl	.-8      	; 0x3fb0 <DIO_voidToggle+0xe0>
    3fb8:	84 27       	eor	r24, r20
    3fba:	8c 93       	st	X, r24
		break;
	}
}
    3fbc:	0f 90       	pop	r0
    3fbe:	0f 90       	pop	r0
    3fc0:	0f 90       	pop	r0
    3fc2:	0f 90       	pop	r0
    3fc4:	cf 91       	pop	r28
    3fc6:	df 91       	pop	r29
    3fc8:	08 95       	ret

00003fca <DIO_voidEnablePullUp>:

void DIO_voidEnablePullUp(DIO_Pin_t pin, DIO_Port_t port)
{
    3fca:	df 93       	push	r29
    3fcc:	cf 93       	push	r28
    3fce:	00 d0       	rcall	.+0      	; 0x3fd0 <DIO_voidEnablePullUp+0x6>
    3fd0:	00 d0       	rcall	.+0      	; 0x3fd2 <DIO_voidEnablePullUp+0x8>
    3fd2:	cd b7       	in	r28, 0x3d	; 61
    3fd4:	de b7       	in	r29, 0x3e	; 62
    3fd6:	89 83       	std	Y+1, r24	; 0x01
    3fd8:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    3fda:	8a 81       	ldd	r24, Y+2	; 0x02
    3fdc:	28 2f       	mov	r18, r24
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	3c 83       	std	Y+4, r19	; 0x04
    3fe2:	2b 83       	std	Y+3, r18	; 0x03
    3fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fe8:	81 30       	cpi	r24, 0x01	; 1
    3fea:	91 05       	cpc	r25, r1
    3fec:	49 f1       	breq	.+82     	; 0x4040 <DIO_voidEnablePullUp+0x76>
    3fee:	2b 81       	ldd	r18, Y+3	; 0x03
    3ff0:	3c 81       	ldd	r19, Y+4	; 0x04
    3ff2:	22 30       	cpi	r18, 0x02	; 2
    3ff4:	31 05       	cpc	r19, r1
    3ff6:	2c f4       	brge	.+10     	; 0x4002 <DIO_voidEnablePullUp+0x38>
    3ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    3ffc:	00 97       	sbiw	r24, 0x00	; 0
    3ffe:	61 f0       	breq	.+24     	; 0x4018 <DIO_voidEnablePullUp+0x4e>
    4000:	5a c0       	rjmp	.+180    	; 0x40b6 <DIO_voidEnablePullUp+0xec>
    4002:	2b 81       	ldd	r18, Y+3	; 0x03
    4004:	3c 81       	ldd	r19, Y+4	; 0x04
    4006:	22 30       	cpi	r18, 0x02	; 2
    4008:	31 05       	cpc	r19, r1
    400a:	71 f1       	breq	.+92     	; 0x4068 <DIO_voidEnablePullUp+0x9e>
    400c:	8b 81       	ldd	r24, Y+3	; 0x03
    400e:	9c 81       	ldd	r25, Y+4	; 0x04
    4010:	83 30       	cpi	r24, 0x03	; 3
    4012:	91 05       	cpc	r25, r1
    4014:	e9 f1       	breq	.+122    	; 0x4090 <DIO_voidEnablePullUp+0xc6>
    4016:	4f c0       	rjmp	.+158    	; 0x40b6 <DIO_voidEnablePullUp+0xec>
	{
	case DIO_PORTA:
		SET_BIT(pin, DIO_PORTA_REG);
    4018:	ab e3       	ldi	r26, 0x3B	; 59
    401a:	b0 e0       	ldi	r27, 0x00	; 0
    401c:	eb e3       	ldi	r30, 0x3B	; 59
    401e:	f0 e0       	ldi	r31, 0x00	; 0
    4020:	80 81       	ld	r24, Z
    4022:	48 2f       	mov	r20, r24
    4024:	89 81       	ldd	r24, Y+1	; 0x01
    4026:	28 2f       	mov	r18, r24
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	81 e0       	ldi	r24, 0x01	; 1
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	02 2e       	mov	r0, r18
    4030:	02 c0       	rjmp	.+4      	; 0x4036 <DIO_voidEnablePullUp+0x6c>
    4032:	88 0f       	add	r24, r24
    4034:	99 1f       	adc	r25, r25
    4036:	0a 94       	dec	r0
    4038:	e2 f7       	brpl	.-8      	; 0x4032 <DIO_voidEnablePullUp+0x68>
    403a:	84 2b       	or	r24, r20
    403c:	8c 93       	st	X, r24
    403e:	3b c0       	rjmp	.+118    	; 0x40b6 <DIO_voidEnablePullUp+0xec>
		break;

	case DIO_PORTB:
		SET_BIT(pin, DIO_PORTB_REG);
    4040:	a8 e3       	ldi	r26, 0x38	; 56
    4042:	b0 e0       	ldi	r27, 0x00	; 0
    4044:	e8 e3       	ldi	r30, 0x38	; 56
    4046:	f0 e0       	ldi	r31, 0x00	; 0
    4048:	80 81       	ld	r24, Z
    404a:	48 2f       	mov	r20, r24
    404c:	89 81       	ldd	r24, Y+1	; 0x01
    404e:	28 2f       	mov	r18, r24
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	02 2e       	mov	r0, r18
    4058:	02 c0       	rjmp	.+4      	; 0x405e <DIO_voidEnablePullUp+0x94>
    405a:	88 0f       	add	r24, r24
    405c:	99 1f       	adc	r25, r25
    405e:	0a 94       	dec	r0
    4060:	e2 f7       	brpl	.-8      	; 0x405a <DIO_voidEnablePullUp+0x90>
    4062:	84 2b       	or	r24, r20
    4064:	8c 93       	st	X, r24
    4066:	27 c0       	rjmp	.+78     	; 0x40b6 <DIO_voidEnablePullUp+0xec>
		break;

	case DIO_PORTC:
		SET_BIT(pin, DIO_PORTC_REG);
    4068:	a5 e3       	ldi	r26, 0x35	; 53
    406a:	b0 e0       	ldi	r27, 0x00	; 0
    406c:	e5 e3       	ldi	r30, 0x35	; 53
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	80 81       	ld	r24, Z
    4072:	48 2f       	mov	r20, r24
    4074:	89 81       	ldd	r24, Y+1	; 0x01
    4076:	28 2f       	mov	r18, r24
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	02 2e       	mov	r0, r18
    4080:	02 c0       	rjmp	.+4      	; 0x4086 <DIO_voidEnablePullUp+0xbc>
    4082:	88 0f       	add	r24, r24
    4084:	99 1f       	adc	r25, r25
    4086:	0a 94       	dec	r0
    4088:	e2 f7       	brpl	.-8      	; 0x4082 <DIO_voidEnablePullUp+0xb8>
    408a:	84 2b       	or	r24, r20
    408c:	8c 93       	st	X, r24
    408e:	13 c0       	rjmp	.+38     	; 0x40b6 <DIO_voidEnablePullUp+0xec>
		break;

	case DIO_PORTD:
		SET_BIT(pin, DIO_PORTD_REG);
    4090:	a2 e3       	ldi	r26, 0x32	; 50
    4092:	b0 e0       	ldi	r27, 0x00	; 0
    4094:	e2 e3       	ldi	r30, 0x32	; 50
    4096:	f0 e0       	ldi	r31, 0x00	; 0
    4098:	80 81       	ld	r24, Z
    409a:	48 2f       	mov	r20, r24
    409c:	89 81       	ldd	r24, Y+1	; 0x01
    409e:	28 2f       	mov	r18, r24
    40a0:	30 e0       	ldi	r19, 0x00	; 0
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	02 2e       	mov	r0, r18
    40a8:	02 c0       	rjmp	.+4      	; 0x40ae <DIO_voidEnablePullUp+0xe4>
    40aa:	88 0f       	add	r24, r24
    40ac:	99 1f       	adc	r25, r25
    40ae:	0a 94       	dec	r0
    40b0:	e2 f7       	brpl	.-8      	; 0x40aa <DIO_voidEnablePullUp+0xe0>
    40b2:	84 2b       	or	r24, r20
    40b4:	8c 93       	st	X, r24
		break;
	}
}
    40b6:	0f 90       	pop	r0
    40b8:	0f 90       	pop	r0
    40ba:	0f 90       	pop	r0
    40bc:	0f 90       	pop	r0
    40be:	cf 91       	pop	r28
    40c0:	df 91       	pop	r29
    40c2:	08 95       	ret

000040c4 <ADC_voidInit>:
 */

#include "ADC.h"

void ADC_voidInit(ADC_Vref_t vrefMode)
{
    40c4:	df 93       	push	r29
    40c6:	cf 93       	push	r28
    40c8:	0f 92       	push	r0
    40ca:	cd b7       	in	r28, 0x3d	; 61
    40cc:	de b7       	in	r29, 0x3e	; 62
    40ce:	89 83       	std	Y+1, r24	; 0x01
	// Enable ADC
	SET_BIT(ADC_ENABLE_BIT, ADC_ADCSRA_REG);
    40d0:	a6 e2       	ldi	r26, 0x26	; 38
    40d2:	b0 e0       	ldi	r27, 0x00	; 0
    40d4:	e6 e2       	ldi	r30, 0x26	; 38
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	80 81       	ld	r24, Z
    40da:	80 68       	ori	r24, 0x80	; 128
    40dc:	8c 93       	st	X, r24

	// configure VREF+
	ADC_ADMUX_REG = (ADC_ADMUX_REG & ADC_VREF_MASK) | (vrefMode << 6);
    40de:	a7 e2       	ldi	r26, 0x27	; 39
    40e0:	b0 e0       	ldi	r27, 0x00	; 0
    40e2:	e7 e2       	ldi	r30, 0x27	; 39
    40e4:	f0 e0       	ldi	r31, 0x00	; 0
    40e6:	80 81       	ld	r24, Z
    40e8:	28 2f       	mov	r18, r24
    40ea:	2f 73       	andi	r18, 0x3F	; 63
    40ec:	89 81       	ldd	r24, Y+1	; 0x01
    40ee:	88 2f       	mov	r24, r24
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	00 24       	eor	r0, r0
    40f4:	96 95       	lsr	r25
    40f6:	87 95       	ror	r24
    40f8:	07 94       	ror	r0
    40fa:	96 95       	lsr	r25
    40fc:	87 95       	ror	r24
    40fe:	07 94       	ror	r0
    4100:	98 2f       	mov	r25, r24
    4102:	80 2d       	mov	r24, r0
    4104:	82 2b       	or	r24, r18
    4106:	8c 93       	st	X, r24

	// Configure prescaler
	ADC_ADCSRA_REG = (ADC_ADCSRA_REG & ADC_PRESCALER_MASK) | (ADC_PRES_125KHZ << 0);
    4108:	a6 e2       	ldi	r26, 0x26	; 38
    410a:	b0 e0       	ldi	r27, 0x00	; 0
    410c:	e6 e2       	ldi	r30, 0x26	; 38
    410e:	f0 e0       	ldi	r31, 0x00	; 0
    4110:	80 81       	ld	r24, Z
    4112:	87 60       	ori	r24, 0x07	; 7
    4114:	8c 93       	st	X, r24
}
    4116:	0f 90       	pop	r0
    4118:	cf 91       	pop	r28
    411a:	df 91       	pop	r29
    411c:	08 95       	ret

0000411e <ADC_u16ReadSteps>:

uint16__t ADC_u16ReadSteps(ADC_Channel_t channel)
{
    411e:	df 93       	push	r29
    4120:	cf 93       	push	r28
    4122:	00 d0       	rcall	.+0      	; 0x4124 <ADC_u16ReadSteps+0x6>
    4124:	0f 92       	push	r0
    4126:	cd b7       	in	r28, 0x3d	; 61
    4128:	de b7       	in	r29, 0x3e	; 62
    412a:	8b 83       	std	Y+3, r24	; 0x03
	uint16__t loc_steps;

	// Configure channel
	ADC_ADMUX_REG = (ADC_ADMUX_REG & ADC_CHANNEL_MASK) | (channel << 0);
    412c:	a7 e2       	ldi	r26, 0x27	; 39
    412e:	b0 e0       	ldi	r27, 0x00	; 0
    4130:	e7 e2       	ldi	r30, 0x27	; 39
    4132:	f0 e0       	ldi	r31, 0x00	; 0
    4134:	80 81       	ld	r24, Z
    4136:	98 2f       	mov	r25, r24
    4138:	90 7e       	andi	r25, 0xE0	; 224
    413a:	8b 81       	ldd	r24, Y+3	; 0x03
    413c:	89 2b       	or	r24, r25
    413e:	8c 93       	st	X, r24

	// Start conversion
	SET_BIT(ADC_CONVERSION_BIT, ADC_ADCSRA_REG);
    4140:	a6 e2       	ldi	r26, 0x26	; 38
    4142:	b0 e0       	ldi	r27, 0x00	; 0
    4144:	e6 e2       	ldi	r30, 0x26	; 38
    4146:	f0 e0       	ldi	r31, 0x00	; 0
    4148:	80 81       	ld	r24, Z
    414a:	80 64       	ori	r24, 0x40	; 64
    414c:	8c 93       	st	X, r24

	// Wait for the ADIF and then clear it by writing 1 to it
	while( CHECK_BIT(ADC_ADIF_BIT, ADC_ADCSRA_REG) != 1 );
    414e:	e6 e2       	ldi	r30, 0x26	; 38
    4150:	f0 e0       	ldi	r31, 0x00	; 0
    4152:	80 81       	ld	r24, Z
    4154:	82 95       	swap	r24
    4156:	8f 70       	andi	r24, 0x0F	; 15
    4158:	88 2f       	mov	r24, r24
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	81 70       	andi	r24, 0x01	; 1
    415e:	90 70       	andi	r25, 0x00	; 0
    4160:	00 97       	sbiw	r24, 0x00	; 0
    4162:	a9 f3       	breq	.-22     	; 0x414e <ADC_u16ReadSteps+0x30>

	SET_BIT(ADC_ADIF_BIT, ADC_ADCSRA_REG);
    4164:	a6 e2       	ldi	r26, 0x26	; 38
    4166:	b0 e0       	ldi	r27, 0x00	; 0
    4168:	e6 e2       	ldi	r30, 0x26	; 38
    416a:	f0 e0       	ldi	r31, 0x00	; 0
    416c:	80 81       	ld	r24, Z
    416e:	80 61       	ori	r24, 0x10	; 16
    4170:	8c 93       	st	X, r24

	loc_steps = ADC_ADCL_REG | (ADC_ADCH_REG << 8);
    4172:	e4 e2       	ldi	r30, 0x24	; 36
    4174:	f0 e0       	ldi	r31, 0x00	; 0
    4176:	80 81       	ld	r24, Z
    4178:	28 2f       	mov	r18, r24
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	e5 e2       	ldi	r30, 0x25	; 37
    417e:	f0 e0       	ldi	r31, 0x00	; 0
    4180:	80 81       	ld	r24, Z
    4182:	88 2f       	mov	r24, r24
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	98 2f       	mov	r25, r24
    4188:	88 27       	eor	r24, r24
    418a:	82 2b       	or	r24, r18
    418c:	93 2b       	or	r25, r19
    418e:	9a 83       	std	Y+2, r25	; 0x02
    4190:	89 83       	std	Y+1, r24	; 0x01

	return loc_steps;
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4196:	0f 90       	pop	r0
    4198:	0f 90       	pop	r0
    419a:	0f 90       	pop	r0
    419c:	cf 91       	pop	r28
    419e:	df 91       	pop	r29
    41a0:	08 95       	ret

000041a2 <ADC_f64ReadVolts_mv>:

f64 ADC_f64ReadVolts_mv(ADC_Channel_t channel)
{
    41a2:	df 93       	push	r29
    41a4:	cf 93       	push	r28
    41a6:	cd b7       	in	r28, 0x3d	; 61
    41a8:	de b7       	in	r29, 0x3e	; 62
    41aa:	27 97       	sbiw	r28, 0x07	; 7
    41ac:	0f b6       	in	r0, 0x3f	; 63
    41ae:	f8 94       	cli
    41b0:	de bf       	out	0x3e, r29	; 62
    41b2:	0f be       	out	0x3f, r0	; 63
    41b4:	cd bf       	out	0x3d, r28	; 61
    41b6:	8f 83       	std	Y+7, r24	; 0x07
	uint16__t loc_steps;
	f64 loc_volts;

	// Configure channel
	ADC_ADMUX_REG = (ADC_ADMUX_REG & ADC_CHANNEL_MASK) | (channel << 0);
    41b8:	a7 e2       	ldi	r26, 0x27	; 39
    41ba:	b0 e0       	ldi	r27, 0x00	; 0
    41bc:	e7 e2       	ldi	r30, 0x27	; 39
    41be:	f0 e0       	ldi	r31, 0x00	; 0
    41c0:	80 81       	ld	r24, Z
    41c2:	98 2f       	mov	r25, r24
    41c4:	90 7e       	andi	r25, 0xE0	; 224
    41c6:	8f 81       	ldd	r24, Y+7	; 0x07
    41c8:	89 2b       	or	r24, r25
    41ca:	8c 93       	st	X, r24

	// Start conversion
	SET_BIT(ADC_CONVERSION_BIT, ADC_ADCSRA_REG);
    41cc:	a6 e2       	ldi	r26, 0x26	; 38
    41ce:	b0 e0       	ldi	r27, 0x00	; 0
    41d0:	e6 e2       	ldi	r30, 0x26	; 38
    41d2:	f0 e0       	ldi	r31, 0x00	; 0
    41d4:	80 81       	ld	r24, Z
    41d6:	80 64       	ori	r24, 0x40	; 64
    41d8:	8c 93       	st	X, r24

	// Wait for the ADIF and then clear it by writing 1 to it
	while( CHECK_BIT(ADC_ADIF_BIT, ADC_ADCSRA_REG) != 1 );
    41da:	e6 e2       	ldi	r30, 0x26	; 38
    41dc:	f0 e0       	ldi	r31, 0x00	; 0
    41de:	80 81       	ld	r24, Z
    41e0:	82 95       	swap	r24
    41e2:	8f 70       	andi	r24, 0x0F	; 15
    41e4:	88 2f       	mov	r24, r24
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	81 70       	andi	r24, 0x01	; 1
    41ea:	90 70       	andi	r25, 0x00	; 0
    41ec:	00 97       	sbiw	r24, 0x00	; 0
    41ee:	a9 f3       	breq	.-22     	; 0x41da <ADC_f64ReadVolts_mv+0x38>

	SET_BIT(ADC_ADIF_BIT, ADC_ADCSRA_REG);
    41f0:	a6 e2       	ldi	r26, 0x26	; 38
    41f2:	b0 e0       	ldi	r27, 0x00	; 0
    41f4:	e6 e2       	ldi	r30, 0x26	; 38
    41f6:	f0 e0       	ldi	r31, 0x00	; 0
    41f8:	80 81       	ld	r24, Z
    41fa:	80 61       	ori	r24, 0x10	; 16
    41fc:	8c 93       	st	X, r24

	loc_steps = ADC_ADCL_REG | (ADC_ADCH_REG << 8);
    41fe:	e4 e2       	ldi	r30, 0x24	; 36
    4200:	f0 e0       	ldi	r31, 0x00	; 0
    4202:	80 81       	ld	r24, Z
    4204:	28 2f       	mov	r18, r24
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	e5 e2       	ldi	r30, 0x25	; 37
    420a:	f0 e0       	ldi	r31, 0x00	; 0
    420c:	80 81       	ld	r24, Z
    420e:	88 2f       	mov	r24, r24
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	98 2f       	mov	r25, r24
    4214:	88 27       	eor	r24, r24
    4216:	82 2b       	or	r24, r18
    4218:	93 2b       	or	r25, r19
    421a:	9e 83       	std	Y+6, r25	; 0x06
    421c:	8d 83       	std	Y+5, r24	; 0x05
	loc_volts = loc_steps * ADC_STEP;
    421e:	8d 81       	ldd	r24, Y+5	; 0x05
    4220:	9e 81       	ldd	r25, Y+6	; 0x06
    4222:	cc 01       	movw	r24, r24
    4224:	a0 e0       	ldi	r26, 0x00	; 0
    4226:	b0 e0       	ldi	r27, 0x00	; 0
    4228:	bc 01       	movw	r22, r24
    422a:	cd 01       	movw	r24, r26
    422c:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    4230:	dc 01       	movw	r26, r24
    4232:	cb 01       	movw	r24, r22
    4234:	bc 01       	movw	r22, r24
    4236:	cd 01       	movw	r24, r26
    4238:	2a e9       	ldi	r18, 0x9A	; 154
    423a:	39 e9       	ldi	r19, 0x99	; 153
    423c:	49 e9       	ldi	r20, 0x99	; 153
    423e:	50 e4       	ldi	r21, 0x40	; 64
    4240:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4244:	dc 01       	movw	r26, r24
    4246:	cb 01       	movw	r24, r22
    4248:	89 83       	std	Y+1, r24	; 0x01
    424a:	9a 83       	std	Y+2, r25	; 0x02
    424c:	ab 83       	std	Y+3, r26	; 0x03
    424e:	bc 83       	std	Y+4, r27	; 0x04

	return loc_volts;
    4250:	89 81       	ldd	r24, Y+1	; 0x01
    4252:	9a 81       	ldd	r25, Y+2	; 0x02
    4254:	ab 81       	ldd	r26, Y+3	; 0x03
    4256:	bc 81       	ldd	r27, Y+4	; 0x04
}
    4258:	bc 01       	movw	r22, r24
    425a:	cd 01       	movw	r24, r26
    425c:	27 96       	adiw	r28, 0x07	; 7
    425e:	0f b6       	in	r0, 0x3f	; 63
    4260:	f8 94       	cli
    4262:	de bf       	out	0x3e, r29	; 62
    4264:	0f be       	out	0x3f, r0	; 63
    4266:	cd bf       	out	0x3d, r28	; 61
    4268:	cf 91       	pop	r28
    426a:	df 91       	pop	r29
    426c:	08 95       	ret

0000426e <MAP>:
#include "StandardFunctions.h"

f32 MAP(f32 InputValue, f32 fromMin, f32 fromMax, f32 toMin, f32 toMax)
{
    426e:	af 92       	push	r10
    4270:	bf 92       	push	r11
    4272:	cf 92       	push	r12
    4274:	df 92       	push	r13
    4276:	ef 92       	push	r14
    4278:	ff 92       	push	r15
    427a:	0f 93       	push	r16
    427c:	1f 93       	push	r17
    427e:	df 93       	push	r29
    4280:	cf 93       	push	r28
    4282:	cd b7       	in	r28, 0x3d	; 61
    4284:	de b7       	in	r29, 0x3e	; 62
    4286:	60 97       	sbiw	r28, 0x10	; 16
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	f8 94       	cli
    428c:	de bf       	out	0x3e, r29	; 62
    428e:	0f be       	out	0x3f, r0	; 63
    4290:	cd bf       	out	0x3d, r28	; 61
    4292:	69 83       	std	Y+1, r22	; 0x01
    4294:	7a 83       	std	Y+2, r23	; 0x02
    4296:	8b 83       	std	Y+3, r24	; 0x03
    4298:	9c 83       	std	Y+4, r25	; 0x04
    429a:	2d 83       	std	Y+5, r18	; 0x05
    429c:	3e 83       	std	Y+6, r19	; 0x06
    429e:	4f 83       	std	Y+7, r20	; 0x07
    42a0:	58 87       	std	Y+8, r21	; 0x08
    42a2:	e9 86       	std	Y+9, r14	; 0x09
    42a4:	fa 86       	std	Y+10, r15	; 0x0a
    42a6:	0b 87       	std	Y+11, r16	; 0x0b
    42a8:	1c 87       	std	Y+12, r17	; 0x0c
    42aa:	ad 86       	std	Y+13, r10	; 0x0d
    42ac:	be 86       	std	Y+14, r11	; 0x0e
    42ae:	cf 86       	std	Y+15, r12	; 0x0f
    42b0:	d8 8a       	std	Y+16, r13	; 0x10
	 return ((((InputValue - fromMin)*(toMax - toMin))/(fromMax - fromMin)) + toMin);
    42b2:	69 81       	ldd	r22, Y+1	; 0x01
    42b4:	7a 81       	ldd	r23, Y+2	; 0x02
    42b6:	8b 81       	ldd	r24, Y+3	; 0x03
    42b8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ba:	2d 81       	ldd	r18, Y+5	; 0x05
    42bc:	3e 81       	ldd	r19, Y+6	; 0x06
    42be:	4f 81       	ldd	r20, Y+7	; 0x07
    42c0:	58 85       	ldd	r21, Y+8	; 0x08
    42c2:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	7c 01       	movw	r14, r24
    42cc:	8d 01       	movw	r16, r26
    42ce:	6d 8d       	ldd	r22, Y+29	; 0x1d
    42d0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    42d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42d4:	98 a1       	ldd	r25, Y+32	; 0x20
    42d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    42d8:	3e 85       	ldd	r19, Y+14	; 0x0e
    42da:	4f 85       	ldd	r20, Y+15	; 0x0f
    42dc:	58 89       	ldd	r21, Y+16	; 0x10
    42de:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
    42e2:	dc 01       	movw	r26, r24
    42e4:	cb 01       	movw	r24, r22
    42e6:	9c 01       	movw	r18, r24
    42e8:	ad 01       	movw	r20, r26
    42ea:	c8 01       	movw	r24, r16
    42ec:	b7 01       	movw	r22, r14
    42ee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    42f2:	dc 01       	movw	r26, r24
    42f4:	cb 01       	movw	r24, r22
    42f6:	7c 01       	movw	r14, r24
    42f8:	8d 01       	movw	r16, r26
    42fa:	69 85       	ldd	r22, Y+9	; 0x09
    42fc:	7a 85       	ldd	r23, Y+10	; 0x0a
    42fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    4300:	9c 85       	ldd	r25, Y+12	; 0x0c
    4302:	2d 81       	ldd	r18, Y+5	; 0x05
    4304:	3e 81       	ldd	r19, Y+6	; 0x06
    4306:	4f 81       	ldd	r20, Y+7	; 0x07
    4308:	58 85       	ldd	r21, Y+8	; 0x08
    430a:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
    430e:	dc 01       	movw	r26, r24
    4310:	cb 01       	movw	r24, r22
    4312:	9c 01       	movw	r18, r24
    4314:	ad 01       	movw	r20, r26
    4316:	c8 01       	movw	r24, r16
    4318:	b7 01       	movw	r22, r14
    431a:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    431e:	dc 01       	movw	r26, r24
    4320:	cb 01       	movw	r24, r22
    4322:	bc 01       	movw	r22, r24
    4324:	cd 01       	movw	r24, r26
    4326:	2d 85       	ldd	r18, Y+13	; 0x0d
    4328:	3e 85       	ldd	r19, Y+14	; 0x0e
    432a:	4f 85       	ldd	r20, Y+15	; 0x0f
    432c:	58 89       	ldd	r21, Y+16	; 0x10
    432e:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    4332:	dc 01       	movw	r26, r24
    4334:	cb 01       	movw	r24, r22
}
    4336:	bc 01       	movw	r22, r24
    4338:	cd 01       	movw	r24, r26
    433a:	60 96       	adiw	r28, 0x10	; 16
    433c:	0f b6       	in	r0, 0x3f	; 63
    433e:	f8 94       	cli
    4340:	de bf       	out	0x3e, r29	; 62
    4342:	0f be       	out	0x3f, r0	; 63
    4344:	cd bf       	out	0x3d, r28	; 61
    4346:	cf 91       	pop	r28
    4348:	df 91       	pop	r29
    434a:	1f 91       	pop	r17
    434c:	0f 91       	pop	r16
    434e:	ff 90       	pop	r15
    4350:	ef 90       	pop	r14
    4352:	df 90       	pop	r13
    4354:	cf 90       	pop	r12
    4356:	bf 90       	pop	r11
    4358:	af 90       	pop	r10
    435a:	08 95       	ret

0000435c <__mulsi3>:
    435c:	62 9f       	mul	r22, r18
    435e:	d0 01       	movw	r26, r0
    4360:	73 9f       	mul	r23, r19
    4362:	f0 01       	movw	r30, r0
    4364:	82 9f       	mul	r24, r18
    4366:	e0 0d       	add	r30, r0
    4368:	f1 1d       	adc	r31, r1
    436a:	64 9f       	mul	r22, r20
    436c:	e0 0d       	add	r30, r0
    436e:	f1 1d       	adc	r31, r1
    4370:	92 9f       	mul	r25, r18
    4372:	f0 0d       	add	r31, r0
    4374:	83 9f       	mul	r24, r19
    4376:	f0 0d       	add	r31, r0
    4378:	74 9f       	mul	r23, r20
    437a:	f0 0d       	add	r31, r0
    437c:	65 9f       	mul	r22, r21
    437e:	f0 0d       	add	r31, r0
    4380:	99 27       	eor	r25, r25
    4382:	72 9f       	mul	r23, r18
    4384:	b0 0d       	add	r27, r0
    4386:	e1 1d       	adc	r30, r1
    4388:	f9 1f       	adc	r31, r25
    438a:	63 9f       	mul	r22, r19
    438c:	b0 0d       	add	r27, r0
    438e:	e1 1d       	adc	r30, r1
    4390:	f9 1f       	adc	r31, r25
    4392:	bd 01       	movw	r22, r26
    4394:	cf 01       	movw	r24, r30
    4396:	11 24       	eor	r1, r1
    4398:	08 95       	ret

0000439a <__udivmodhi4>:
    439a:	aa 1b       	sub	r26, r26
    439c:	bb 1b       	sub	r27, r27
    439e:	51 e1       	ldi	r21, 0x11	; 17
    43a0:	07 c0       	rjmp	.+14     	; 0x43b0 <__udivmodhi4_ep>

000043a2 <__udivmodhi4_loop>:
    43a2:	aa 1f       	adc	r26, r26
    43a4:	bb 1f       	adc	r27, r27
    43a6:	a6 17       	cp	r26, r22
    43a8:	b7 07       	cpc	r27, r23
    43aa:	10 f0       	brcs	.+4      	; 0x43b0 <__udivmodhi4_ep>
    43ac:	a6 1b       	sub	r26, r22
    43ae:	b7 0b       	sbc	r27, r23

000043b0 <__udivmodhi4_ep>:
    43b0:	88 1f       	adc	r24, r24
    43b2:	99 1f       	adc	r25, r25
    43b4:	5a 95       	dec	r21
    43b6:	a9 f7       	brne	.-22     	; 0x43a2 <__udivmodhi4_loop>
    43b8:	80 95       	com	r24
    43ba:	90 95       	com	r25
    43bc:	bc 01       	movw	r22, r24
    43be:	cd 01       	movw	r24, r26
    43c0:	08 95       	ret

000043c2 <__divmodhi4>:
    43c2:	97 fb       	bst	r25, 7
    43c4:	09 2e       	mov	r0, r25
    43c6:	07 26       	eor	r0, r23
    43c8:	0a d0       	rcall	.+20     	; 0x43de <__divmodhi4_neg1>
    43ca:	77 fd       	sbrc	r23, 7
    43cc:	04 d0       	rcall	.+8      	; 0x43d6 <__divmodhi4_neg2>
    43ce:	e5 df       	rcall	.-54     	; 0x439a <__udivmodhi4>
    43d0:	06 d0       	rcall	.+12     	; 0x43de <__divmodhi4_neg1>
    43d2:	00 20       	and	r0, r0
    43d4:	1a f4       	brpl	.+6      	; 0x43dc <__divmodhi4_exit>

000043d6 <__divmodhi4_neg2>:
    43d6:	70 95       	com	r23
    43d8:	61 95       	neg	r22
    43da:	7f 4f       	sbci	r23, 0xFF	; 255

000043dc <__divmodhi4_exit>:
    43dc:	08 95       	ret

000043de <__divmodhi4_neg1>:
    43de:	f6 f7       	brtc	.-4      	; 0x43dc <__divmodhi4_exit>
    43e0:	90 95       	com	r25
    43e2:	81 95       	neg	r24
    43e4:	9f 4f       	sbci	r25, 0xFF	; 255
    43e6:	08 95       	ret

000043e8 <__udivmodsi4>:
    43e8:	a1 e2       	ldi	r26, 0x21	; 33
    43ea:	1a 2e       	mov	r1, r26
    43ec:	aa 1b       	sub	r26, r26
    43ee:	bb 1b       	sub	r27, r27
    43f0:	fd 01       	movw	r30, r26
    43f2:	0d c0       	rjmp	.+26     	; 0x440e <__udivmodsi4_ep>

000043f4 <__udivmodsi4_loop>:
    43f4:	aa 1f       	adc	r26, r26
    43f6:	bb 1f       	adc	r27, r27
    43f8:	ee 1f       	adc	r30, r30
    43fa:	ff 1f       	adc	r31, r31
    43fc:	a2 17       	cp	r26, r18
    43fe:	b3 07       	cpc	r27, r19
    4400:	e4 07       	cpc	r30, r20
    4402:	f5 07       	cpc	r31, r21
    4404:	20 f0       	brcs	.+8      	; 0x440e <__udivmodsi4_ep>
    4406:	a2 1b       	sub	r26, r18
    4408:	b3 0b       	sbc	r27, r19
    440a:	e4 0b       	sbc	r30, r20
    440c:	f5 0b       	sbc	r31, r21

0000440e <__udivmodsi4_ep>:
    440e:	66 1f       	adc	r22, r22
    4410:	77 1f       	adc	r23, r23
    4412:	88 1f       	adc	r24, r24
    4414:	99 1f       	adc	r25, r25
    4416:	1a 94       	dec	r1
    4418:	69 f7       	brne	.-38     	; 0x43f4 <__udivmodsi4_loop>
    441a:	60 95       	com	r22
    441c:	70 95       	com	r23
    441e:	80 95       	com	r24
    4420:	90 95       	com	r25
    4422:	9b 01       	movw	r18, r22
    4424:	ac 01       	movw	r20, r24
    4426:	bd 01       	movw	r22, r26
    4428:	cf 01       	movw	r24, r30
    442a:	08 95       	ret

0000442c <__prologue_saves__>:
    442c:	2f 92       	push	r2
    442e:	3f 92       	push	r3
    4430:	4f 92       	push	r4
    4432:	5f 92       	push	r5
    4434:	6f 92       	push	r6
    4436:	7f 92       	push	r7
    4438:	8f 92       	push	r8
    443a:	9f 92       	push	r9
    443c:	af 92       	push	r10
    443e:	bf 92       	push	r11
    4440:	cf 92       	push	r12
    4442:	df 92       	push	r13
    4444:	ef 92       	push	r14
    4446:	ff 92       	push	r15
    4448:	0f 93       	push	r16
    444a:	1f 93       	push	r17
    444c:	cf 93       	push	r28
    444e:	df 93       	push	r29
    4450:	cd b7       	in	r28, 0x3d	; 61
    4452:	de b7       	in	r29, 0x3e	; 62
    4454:	ca 1b       	sub	r28, r26
    4456:	db 0b       	sbc	r29, r27
    4458:	0f b6       	in	r0, 0x3f	; 63
    445a:	f8 94       	cli
    445c:	de bf       	out	0x3e, r29	; 62
    445e:	0f be       	out	0x3f, r0	; 63
    4460:	cd bf       	out	0x3d, r28	; 61
    4462:	09 94       	ijmp

00004464 <__epilogue_restores__>:
    4464:	2a 88       	ldd	r2, Y+18	; 0x12
    4466:	39 88       	ldd	r3, Y+17	; 0x11
    4468:	48 88       	ldd	r4, Y+16	; 0x10
    446a:	5f 84       	ldd	r5, Y+15	; 0x0f
    446c:	6e 84       	ldd	r6, Y+14	; 0x0e
    446e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4470:	8c 84       	ldd	r8, Y+12	; 0x0c
    4472:	9b 84       	ldd	r9, Y+11	; 0x0b
    4474:	aa 84       	ldd	r10, Y+10	; 0x0a
    4476:	b9 84       	ldd	r11, Y+9	; 0x09
    4478:	c8 84       	ldd	r12, Y+8	; 0x08
    447a:	df 80       	ldd	r13, Y+7	; 0x07
    447c:	ee 80       	ldd	r14, Y+6	; 0x06
    447e:	fd 80       	ldd	r15, Y+5	; 0x05
    4480:	0c 81       	ldd	r16, Y+4	; 0x04
    4482:	1b 81       	ldd	r17, Y+3	; 0x03
    4484:	aa 81       	ldd	r26, Y+2	; 0x02
    4486:	b9 81       	ldd	r27, Y+1	; 0x01
    4488:	ce 0f       	add	r28, r30
    448a:	d1 1d       	adc	r29, r1
    448c:	0f b6       	in	r0, 0x3f	; 63
    448e:	f8 94       	cli
    4490:	de bf       	out	0x3e, r29	; 62
    4492:	0f be       	out	0x3f, r0	; 63
    4494:	cd bf       	out	0x3d, r28	; 61
    4496:	ed 01       	movw	r28, r26
    4498:	08 95       	ret

0000449a <dtostrf>:
    449a:	ef 92       	push	r14
    449c:	ff 92       	push	r15
    449e:	0f 93       	push	r16
    44a0:	1f 93       	push	r17
    44a2:	f2 2f       	mov	r31, r18
    44a4:	f0 2e       	mov	r15, r16
    44a6:	47 fd       	sbrc	r20, 7
    44a8:	02 c0       	rjmp	.+4      	; 0x44ae <dtostrf+0x14>
    44aa:	e4 e0       	ldi	r30, 0x04	; 4
    44ac:	01 c0       	rjmp	.+2      	; 0x44b0 <dtostrf+0x16>
    44ae:	e4 e1       	ldi	r30, 0x14	; 20
    44b0:	24 2f       	mov	r18, r20
    44b2:	33 27       	eor	r19, r19
    44b4:	27 fd       	sbrc	r18, 7
    44b6:	30 95       	com	r19
    44b8:	37 ff       	sbrs	r19, 7
    44ba:	03 c0       	rjmp	.+6      	; 0x44c2 <dtostrf+0x28>
    44bc:	30 95       	com	r19
    44be:	21 95       	neg	r18
    44c0:	3f 4f       	sbci	r19, 0xFF	; 255
    44c2:	4f 2d       	mov	r20, r15
    44c4:	51 2f       	mov	r21, r17
    44c6:	0f 2f       	mov	r16, r31
    44c8:	ee 2e       	mov	r14, r30
    44ca:	0e 94 6f 24 	call	0x48de	; 0x48de <dtoa_prf>
    44ce:	8f 2d       	mov	r24, r15
    44d0:	91 2f       	mov	r25, r17
    44d2:	1f 91       	pop	r17
    44d4:	0f 91       	pop	r16
    44d6:	ff 90       	pop	r15
    44d8:	ef 90       	pop	r14
    44da:	08 95       	ret

000044dc <sprintf>:
    44dc:	ae e0       	ldi	r26, 0x0E	; 14
    44de:	b0 e0       	ldi	r27, 0x00	; 0
    44e0:	e4 e7       	ldi	r30, 0x74	; 116
    44e2:	f2 e2       	ldi	r31, 0x22	; 34
    44e4:	0c 94 24 22 	jmp	0x4448	; 0x4448 <__prologue_saves__+0x1c>
    44e8:	0d 89       	ldd	r16, Y+21	; 0x15
    44ea:	1e 89       	ldd	r17, Y+22	; 0x16
    44ec:	86 e0       	ldi	r24, 0x06	; 6
    44ee:	8c 83       	std	Y+4, r24	; 0x04
    44f0:	1a 83       	std	Y+2, r17	; 0x02
    44f2:	09 83       	std	Y+1, r16	; 0x01
    44f4:	8f ef       	ldi	r24, 0xFF	; 255
    44f6:	9f e7       	ldi	r25, 0x7F	; 127
    44f8:	9e 83       	std	Y+6, r25	; 0x06
    44fa:	8d 83       	std	Y+5, r24	; 0x05
    44fc:	9e 01       	movw	r18, r28
    44fe:	27 5e       	subi	r18, 0xE7	; 231
    4500:	3f 4f       	sbci	r19, 0xFF	; 255
    4502:	ce 01       	movw	r24, r28
    4504:	01 96       	adiw	r24, 0x01	; 1
    4506:	6f 89       	ldd	r22, Y+23	; 0x17
    4508:	78 8d       	ldd	r23, Y+24	; 0x18
    450a:	a9 01       	movw	r20, r18
    450c:	0e 94 92 22 	call	0x4524	; 0x4524 <vfprintf>
    4510:	2f 81       	ldd	r18, Y+7	; 0x07
    4512:	38 85       	ldd	r19, Y+8	; 0x08
    4514:	02 0f       	add	r16, r18
    4516:	13 1f       	adc	r17, r19
    4518:	f8 01       	movw	r30, r16
    451a:	10 82       	st	Z, r1
    451c:	2e 96       	adiw	r28, 0x0e	; 14
    451e:	e4 e0       	ldi	r30, 0x04	; 4
    4520:	0c 94 40 22 	jmp	0x4480	; 0x4480 <__epilogue_restores__+0x1c>

00004524 <vfprintf>:
    4524:	ab e0       	ldi	r26, 0x0B	; 11
    4526:	b0 e0       	ldi	r27, 0x00	; 0
    4528:	e8 e9       	ldi	r30, 0x98	; 152
    452a:	f2 e2       	ldi	r31, 0x22	; 34
    452c:	0c 94 16 22 	jmp	0x442c	; 0x442c <__prologue_saves__>
    4530:	3c 01       	movw	r6, r24
    4532:	2b 01       	movw	r4, r22
    4534:	5a 01       	movw	r10, r20
    4536:	fc 01       	movw	r30, r24
    4538:	17 82       	std	Z+7, r1	; 0x07
    453a:	16 82       	std	Z+6, r1	; 0x06
    453c:	83 81       	ldd	r24, Z+3	; 0x03
    453e:	81 fd       	sbrc	r24, 1
    4540:	03 c0       	rjmp	.+6      	; 0x4548 <vfprintf+0x24>
    4542:	6f ef       	ldi	r22, 0xFF	; 255
    4544:	7f ef       	ldi	r23, 0xFF	; 255
    4546:	c6 c1       	rjmp	.+908    	; 0x48d4 <vfprintf+0x3b0>
    4548:	9a e0       	ldi	r25, 0x0A	; 10
    454a:	89 2e       	mov	r8, r25
    454c:	1e 01       	movw	r2, r28
    454e:	08 94       	sec
    4550:	21 1c       	adc	r2, r1
    4552:	31 1c       	adc	r3, r1
    4554:	f3 01       	movw	r30, r6
    4556:	23 81       	ldd	r18, Z+3	; 0x03
    4558:	f2 01       	movw	r30, r4
    455a:	23 fd       	sbrc	r18, 3
    455c:	85 91       	lpm	r24, Z+
    455e:	23 ff       	sbrs	r18, 3
    4560:	81 91       	ld	r24, Z+
    4562:	2f 01       	movw	r4, r30
    4564:	88 23       	and	r24, r24
    4566:	09 f4       	brne	.+2      	; 0x456a <vfprintf+0x46>
    4568:	b2 c1       	rjmp	.+868    	; 0x48ce <vfprintf+0x3aa>
    456a:	85 32       	cpi	r24, 0x25	; 37
    456c:	39 f4       	brne	.+14     	; 0x457c <vfprintf+0x58>
    456e:	23 fd       	sbrc	r18, 3
    4570:	85 91       	lpm	r24, Z+
    4572:	23 ff       	sbrs	r18, 3
    4574:	81 91       	ld	r24, Z+
    4576:	2f 01       	movw	r4, r30
    4578:	85 32       	cpi	r24, 0x25	; 37
    457a:	29 f4       	brne	.+10     	; 0x4586 <vfprintf+0x62>
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	b3 01       	movw	r22, r6
    4580:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <fputc>
    4584:	e7 cf       	rjmp	.-50     	; 0x4554 <vfprintf+0x30>
    4586:	98 2f       	mov	r25, r24
    4588:	ff 24       	eor	r15, r15
    458a:	ee 24       	eor	r14, r14
    458c:	99 24       	eor	r9, r9
    458e:	ff e1       	ldi	r31, 0x1F	; 31
    4590:	ff 15       	cp	r31, r15
    4592:	d0 f0       	brcs	.+52     	; 0x45c8 <vfprintf+0xa4>
    4594:	9b 32       	cpi	r25, 0x2B	; 43
    4596:	69 f0       	breq	.+26     	; 0x45b2 <vfprintf+0x8e>
    4598:	9c 32       	cpi	r25, 0x2C	; 44
    459a:	28 f4       	brcc	.+10     	; 0x45a6 <vfprintf+0x82>
    459c:	90 32       	cpi	r25, 0x20	; 32
    459e:	59 f0       	breq	.+22     	; 0x45b6 <vfprintf+0x92>
    45a0:	93 32       	cpi	r25, 0x23	; 35
    45a2:	91 f4       	brne	.+36     	; 0x45c8 <vfprintf+0xa4>
    45a4:	0e c0       	rjmp	.+28     	; 0x45c2 <vfprintf+0x9e>
    45a6:	9d 32       	cpi	r25, 0x2D	; 45
    45a8:	49 f0       	breq	.+18     	; 0x45bc <vfprintf+0x98>
    45aa:	90 33       	cpi	r25, 0x30	; 48
    45ac:	69 f4       	brne	.+26     	; 0x45c8 <vfprintf+0xa4>
    45ae:	41 e0       	ldi	r20, 0x01	; 1
    45b0:	24 c0       	rjmp	.+72     	; 0x45fa <vfprintf+0xd6>
    45b2:	52 e0       	ldi	r21, 0x02	; 2
    45b4:	f5 2a       	or	r15, r21
    45b6:	84 e0       	ldi	r24, 0x04	; 4
    45b8:	f8 2a       	or	r15, r24
    45ba:	28 c0       	rjmp	.+80     	; 0x460c <vfprintf+0xe8>
    45bc:	98 e0       	ldi	r25, 0x08	; 8
    45be:	f9 2a       	or	r15, r25
    45c0:	25 c0       	rjmp	.+74     	; 0x460c <vfprintf+0xe8>
    45c2:	e0 e1       	ldi	r30, 0x10	; 16
    45c4:	fe 2a       	or	r15, r30
    45c6:	22 c0       	rjmp	.+68     	; 0x460c <vfprintf+0xe8>
    45c8:	f7 fc       	sbrc	r15, 7
    45ca:	29 c0       	rjmp	.+82     	; 0x461e <vfprintf+0xfa>
    45cc:	89 2f       	mov	r24, r25
    45ce:	80 53       	subi	r24, 0x30	; 48
    45d0:	8a 30       	cpi	r24, 0x0A	; 10
    45d2:	70 f4       	brcc	.+28     	; 0x45f0 <vfprintf+0xcc>
    45d4:	f6 fe       	sbrs	r15, 6
    45d6:	05 c0       	rjmp	.+10     	; 0x45e2 <vfprintf+0xbe>
    45d8:	98 9c       	mul	r9, r8
    45da:	90 2c       	mov	r9, r0
    45dc:	11 24       	eor	r1, r1
    45de:	98 0e       	add	r9, r24
    45e0:	15 c0       	rjmp	.+42     	; 0x460c <vfprintf+0xe8>
    45e2:	e8 9c       	mul	r14, r8
    45e4:	e0 2c       	mov	r14, r0
    45e6:	11 24       	eor	r1, r1
    45e8:	e8 0e       	add	r14, r24
    45ea:	f0 e2       	ldi	r31, 0x20	; 32
    45ec:	ff 2a       	or	r15, r31
    45ee:	0e c0       	rjmp	.+28     	; 0x460c <vfprintf+0xe8>
    45f0:	9e 32       	cpi	r25, 0x2E	; 46
    45f2:	29 f4       	brne	.+10     	; 0x45fe <vfprintf+0xda>
    45f4:	f6 fc       	sbrc	r15, 6
    45f6:	6b c1       	rjmp	.+726    	; 0x48ce <vfprintf+0x3aa>
    45f8:	40 e4       	ldi	r20, 0x40	; 64
    45fa:	f4 2a       	or	r15, r20
    45fc:	07 c0       	rjmp	.+14     	; 0x460c <vfprintf+0xe8>
    45fe:	9c 36       	cpi	r25, 0x6C	; 108
    4600:	19 f4       	brne	.+6      	; 0x4608 <vfprintf+0xe4>
    4602:	50 e8       	ldi	r21, 0x80	; 128
    4604:	f5 2a       	or	r15, r21
    4606:	02 c0       	rjmp	.+4      	; 0x460c <vfprintf+0xe8>
    4608:	98 36       	cpi	r25, 0x68	; 104
    460a:	49 f4       	brne	.+18     	; 0x461e <vfprintf+0xfa>
    460c:	f2 01       	movw	r30, r4
    460e:	23 fd       	sbrc	r18, 3
    4610:	95 91       	lpm	r25, Z+
    4612:	23 ff       	sbrs	r18, 3
    4614:	91 91       	ld	r25, Z+
    4616:	2f 01       	movw	r4, r30
    4618:	99 23       	and	r25, r25
    461a:	09 f0       	breq	.+2      	; 0x461e <vfprintf+0xfa>
    461c:	b8 cf       	rjmp	.-144    	; 0x458e <vfprintf+0x6a>
    461e:	89 2f       	mov	r24, r25
    4620:	85 54       	subi	r24, 0x45	; 69
    4622:	83 30       	cpi	r24, 0x03	; 3
    4624:	18 f0       	brcs	.+6      	; 0x462c <vfprintf+0x108>
    4626:	80 52       	subi	r24, 0x20	; 32
    4628:	83 30       	cpi	r24, 0x03	; 3
    462a:	38 f4       	brcc	.+14     	; 0x463a <vfprintf+0x116>
    462c:	44 e0       	ldi	r20, 0x04	; 4
    462e:	50 e0       	ldi	r21, 0x00	; 0
    4630:	a4 0e       	add	r10, r20
    4632:	b5 1e       	adc	r11, r21
    4634:	5f e3       	ldi	r21, 0x3F	; 63
    4636:	59 83       	std	Y+1, r21	; 0x01
    4638:	0f c0       	rjmp	.+30     	; 0x4658 <vfprintf+0x134>
    463a:	93 36       	cpi	r25, 0x63	; 99
    463c:	31 f0       	breq	.+12     	; 0x464a <vfprintf+0x126>
    463e:	93 37       	cpi	r25, 0x73	; 115
    4640:	79 f0       	breq	.+30     	; 0x4660 <vfprintf+0x13c>
    4642:	93 35       	cpi	r25, 0x53	; 83
    4644:	09 f0       	breq	.+2      	; 0x4648 <vfprintf+0x124>
    4646:	56 c0       	rjmp	.+172    	; 0x46f4 <vfprintf+0x1d0>
    4648:	20 c0       	rjmp	.+64     	; 0x468a <vfprintf+0x166>
    464a:	f5 01       	movw	r30, r10
    464c:	80 81       	ld	r24, Z
    464e:	89 83       	std	Y+1, r24	; 0x01
    4650:	42 e0       	ldi	r20, 0x02	; 2
    4652:	50 e0       	ldi	r21, 0x00	; 0
    4654:	a4 0e       	add	r10, r20
    4656:	b5 1e       	adc	r11, r21
    4658:	61 01       	movw	r12, r2
    465a:	01 e0       	ldi	r16, 0x01	; 1
    465c:	10 e0       	ldi	r17, 0x00	; 0
    465e:	12 c0       	rjmp	.+36     	; 0x4684 <vfprintf+0x160>
    4660:	f5 01       	movw	r30, r10
    4662:	c0 80       	ld	r12, Z
    4664:	d1 80       	ldd	r13, Z+1	; 0x01
    4666:	f6 fc       	sbrc	r15, 6
    4668:	03 c0       	rjmp	.+6      	; 0x4670 <vfprintf+0x14c>
    466a:	6f ef       	ldi	r22, 0xFF	; 255
    466c:	7f ef       	ldi	r23, 0xFF	; 255
    466e:	02 c0       	rjmp	.+4      	; 0x4674 <vfprintf+0x150>
    4670:	69 2d       	mov	r22, r9
    4672:	70 e0       	ldi	r23, 0x00	; 0
    4674:	42 e0       	ldi	r20, 0x02	; 2
    4676:	50 e0       	ldi	r21, 0x00	; 0
    4678:	a4 0e       	add	r10, r20
    467a:	b5 1e       	adc	r11, r21
    467c:	c6 01       	movw	r24, r12
    467e:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <strnlen>
    4682:	8c 01       	movw	r16, r24
    4684:	5f e7       	ldi	r21, 0x7F	; 127
    4686:	f5 22       	and	r15, r21
    4688:	14 c0       	rjmp	.+40     	; 0x46b2 <vfprintf+0x18e>
    468a:	f5 01       	movw	r30, r10
    468c:	c0 80       	ld	r12, Z
    468e:	d1 80       	ldd	r13, Z+1	; 0x01
    4690:	f6 fc       	sbrc	r15, 6
    4692:	03 c0       	rjmp	.+6      	; 0x469a <vfprintf+0x176>
    4694:	6f ef       	ldi	r22, 0xFF	; 255
    4696:	7f ef       	ldi	r23, 0xFF	; 255
    4698:	02 c0       	rjmp	.+4      	; 0x469e <vfprintf+0x17a>
    469a:	69 2d       	mov	r22, r9
    469c:	70 e0       	ldi	r23, 0x00	; 0
    469e:	42 e0       	ldi	r20, 0x02	; 2
    46a0:	50 e0       	ldi	r21, 0x00	; 0
    46a2:	a4 0e       	add	r10, r20
    46a4:	b5 1e       	adc	r11, r21
    46a6:	c6 01       	movw	r24, r12
    46a8:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <strnlen_P>
    46ac:	8c 01       	movw	r16, r24
    46ae:	50 e8       	ldi	r21, 0x80	; 128
    46b0:	f5 2a       	or	r15, r21
    46b2:	f3 fe       	sbrs	r15, 3
    46b4:	07 c0       	rjmp	.+14     	; 0x46c4 <vfprintf+0x1a0>
    46b6:	1a c0       	rjmp	.+52     	; 0x46ec <vfprintf+0x1c8>
    46b8:	80 e2       	ldi	r24, 0x20	; 32
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	b3 01       	movw	r22, r6
    46be:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <fputc>
    46c2:	ea 94       	dec	r14
    46c4:	8e 2d       	mov	r24, r14
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	08 17       	cp	r16, r24
    46ca:	19 07       	cpc	r17, r25
    46cc:	a8 f3       	brcs	.-22     	; 0x46b8 <vfprintf+0x194>
    46ce:	0e c0       	rjmp	.+28     	; 0x46ec <vfprintf+0x1c8>
    46d0:	f6 01       	movw	r30, r12
    46d2:	f7 fc       	sbrc	r15, 7
    46d4:	85 91       	lpm	r24, Z+
    46d6:	f7 fe       	sbrs	r15, 7
    46d8:	81 91       	ld	r24, Z+
    46da:	6f 01       	movw	r12, r30
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	b3 01       	movw	r22, r6
    46e0:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <fputc>
    46e4:	e1 10       	cpse	r14, r1
    46e6:	ea 94       	dec	r14
    46e8:	01 50       	subi	r16, 0x01	; 1
    46ea:	10 40       	sbci	r17, 0x00	; 0
    46ec:	01 15       	cp	r16, r1
    46ee:	11 05       	cpc	r17, r1
    46f0:	79 f7       	brne	.-34     	; 0x46d0 <vfprintf+0x1ac>
    46f2:	ea c0       	rjmp	.+468    	; 0x48c8 <vfprintf+0x3a4>
    46f4:	94 36       	cpi	r25, 0x64	; 100
    46f6:	11 f0       	breq	.+4      	; 0x46fc <vfprintf+0x1d8>
    46f8:	99 36       	cpi	r25, 0x69	; 105
    46fa:	69 f5       	brne	.+90     	; 0x4756 <vfprintf+0x232>
    46fc:	f7 fe       	sbrs	r15, 7
    46fe:	08 c0       	rjmp	.+16     	; 0x4710 <vfprintf+0x1ec>
    4700:	f5 01       	movw	r30, r10
    4702:	20 81       	ld	r18, Z
    4704:	31 81       	ldd	r19, Z+1	; 0x01
    4706:	42 81       	ldd	r20, Z+2	; 0x02
    4708:	53 81       	ldd	r21, Z+3	; 0x03
    470a:	84 e0       	ldi	r24, 0x04	; 4
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	0a c0       	rjmp	.+20     	; 0x4724 <vfprintf+0x200>
    4710:	f5 01       	movw	r30, r10
    4712:	80 81       	ld	r24, Z
    4714:	91 81       	ldd	r25, Z+1	; 0x01
    4716:	9c 01       	movw	r18, r24
    4718:	44 27       	eor	r20, r20
    471a:	37 fd       	sbrc	r19, 7
    471c:	40 95       	com	r20
    471e:	54 2f       	mov	r21, r20
    4720:	82 e0       	ldi	r24, 0x02	; 2
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	a8 0e       	add	r10, r24
    4726:	b9 1e       	adc	r11, r25
    4728:	9f e6       	ldi	r25, 0x6F	; 111
    472a:	f9 22       	and	r15, r25
    472c:	57 ff       	sbrs	r21, 7
    472e:	09 c0       	rjmp	.+18     	; 0x4742 <vfprintf+0x21e>
    4730:	50 95       	com	r21
    4732:	40 95       	com	r20
    4734:	30 95       	com	r19
    4736:	21 95       	neg	r18
    4738:	3f 4f       	sbci	r19, 0xFF	; 255
    473a:	4f 4f       	sbci	r20, 0xFF	; 255
    473c:	5f 4f       	sbci	r21, 0xFF	; 255
    473e:	e0 e8       	ldi	r30, 0x80	; 128
    4740:	fe 2a       	or	r15, r30
    4742:	ca 01       	movw	r24, r20
    4744:	b9 01       	movw	r22, r18
    4746:	a1 01       	movw	r20, r2
    4748:	2a e0       	ldi	r18, 0x0A	; 10
    474a:	30 e0       	ldi	r19, 0x00	; 0
    474c:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <__ultoa_invert>
    4750:	d8 2e       	mov	r13, r24
    4752:	d2 18       	sub	r13, r2
    4754:	40 c0       	rjmp	.+128    	; 0x47d6 <vfprintf+0x2b2>
    4756:	95 37       	cpi	r25, 0x75	; 117
    4758:	29 f4       	brne	.+10     	; 0x4764 <vfprintf+0x240>
    475a:	1f 2d       	mov	r17, r15
    475c:	1f 7e       	andi	r17, 0xEF	; 239
    475e:	2a e0       	ldi	r18, 0x0A	; 10
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	1d c0       	rjmp	.+58     	; 0x479e <vfprintf+0x27a>
    4764:	1f 2d       	mov	r17, r15
    4766:	19 7f       	andi	r17, 0xF9	; 249
    4768:	9f 36       	cpi	r25, 0x6F	; 111
    476a:	61 f0       	breq	.+24     	; 0x4784 <vfprintf+0x260>
    476c:	90 37       	cpi	r25, 0x70	; 112
    476e:	20 f4       	brcc	.+8      	; 0x4778 <vfprintf+0x254>
    4770:	98 35       	cpi	r25, 0x58	; 88
    4772:	09 f0       	breq	.+2      	; 0x4776 <vfprintf+0x252>
    4774:	ac c0       	rjmp	.+344    	; 0x48ce <vfprintf+0x3aa>
    4776:	0f c0       	rjmp	.+30     	; 0x4796 <vfprintf+0x272>
    4778:	90 37       	cpi	r25, 0x70	; 112
    477a:	39 f0       	breq	.+14     	; 0x478a <vfprintf+0x266>
    477c:	98 37       	cpi	r25, 0x78	; 120
    477e:	09 f0       	breq	.+2      	; 0x4782 <vfprintf+0x25e>
    4780:	a6 c0       	rjmp	.+332    	; 0x48ce <vfprintf+0x3aa>
    4782:	04 c0       	rjmp	.+8      	; 0x478c <vfprintf+0x268>
    4784:	28 e0       	ldi	r18, 0x08	; 8
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	0a c0       	rjmp	.+20     	; 0x479e <vfprintf+0x27a>
    478a:	10 61       	ori	r17, 0x10	; 16
    478c:	14 fd       	sbrc	r17, 4
    478e:	14 60       	ori	r17, 0x04	; 4
    4790:	20 e1       	ldi	r18, 0x10	; 16
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	04 c0       	rjmp	.+8      	; 0x479e <vfprintf+0x27a>
    4796:	14 fd       	sbrc	r17, 4
    4798:	16 60       	ori	r17, 0x06	; 6
    479a:	20 e1       	ldi	r18, 0x10	; 16
    479c:	32 e0       	ldi	r19, 0x02	; 2
    479e:	17 ff       	sbrs	r17, 7
    47a0:	08 c0       	rjmp	.+16     	; 0x47b2 <vfprintf+0x28e>
    47a2:	f5 01       	movw	r30, r10
    47a4:	60 81       	ld	r22, Z
    47a6:	71 81       	ldd	r23, Z+1	; 0x01
    47a8:	82 81       	ldd	r24, Z+2	; 0x02
    47aa:	93 81       	ldd	r25, Z+3	; 0x03
    47ac:	44 e0       	ldi	r20, 0x04	; 4
    47ae:	50 e0       	ldi	r21, 0x00	; 0
    47b0:	08 c0       	rjmp	.+16     	; 0x47c2 <vfprintf+0x29e>
    47b2:	f5 01       	movw	r30, r10
    47b4:	80 81       	ld	r24, Z
    47b6:	91 81       	ldd	r25, Z+1	; 0x01
    47b8:	bc 01       	movw	r22, r24
    47ba:	80 e0       	ldi	r24, 0x00	; 0
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	42 e0       	ldi	r20, 0x02	; 2
    47c0:	50 e0       	ldi	r21, 0x00	; 0
    47c2:	a4 0e       	add	r10, r20
    47c4:	b5 1e       	adc	r11, r21
    47c6:	a1 01       	movw	r20, r2
    47c8:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <__ultoa_invert>
    47cc:	d8 2e       	mov	r13, r24
    47ce:	d2 18       	sub	r13, r2
    47d0:	8f e7       	ldi	r24, 0x7F	; 127
    47d2:	f8 2e       	mov	r15, r24
    47d4:	f1 22       	and	r15, r17
    47d6:	f6 fe       	sbrs	r15, 6
    47d8:	0b c0       	rjmp	.+22     	; 0x47f0 <vfprintf+0x2cc>
    47da:	5e ef       	ldi	r21, 0xFE	; 254
    47dc:	f5 22       	and	r15, r21
    47de:	d9 14       	cp	r13, r9
    47e0:	38 f4       	brcc	.+14     	; 0x47f0 <vfprintf+0x2cc>
    47e2:	f4 fe       	sbrs	r15, 4
    47e4:	07 c0       	rjmp	.+14     	; 0x47f4 <vfprintf+0x2d0>
    47e6:	f2 fc       	sbrc	r15, 2
    47e8:	05 c0       	rjmp	.+10     	; 0x47f4 <vfprintf+0x2d0>
    47ea:	8f ee       	ldi	r24, 0xEF	; 239
    47ec:	f8 22       	and	r15, r24
    47ee:	02 c0       	rjmp	.+4      	; 0x47f4 <vfprintf+0x2d0>
    47f0:	1d 2d       	mov	r17, r13
    47f2:	01 c0       	rjmp	.+2      	; 0x47f6 <vfprintf+0x2d2>
    47f4:	19 2d       	mov	r17, r9
    47f6:	f4 fe       	sbrs	r15, 4
    47f8:	0d c0       	rjmp	.+26     	; 0x4814 <vfprintf+0x2f0>
    47fa:	fe 01       	movw	r30, r28
    47fc:	ed 0d       	add	r30, r13
    47fe:	f1 1d       	adc	r31, r1
    4800:	80 81       	ld	r24, Z
    4802:	80 33       	cpi	r24, 0x30	; 48
    4804:	19 f4       	brne	.+6      	; 0x480c <vfprintf+0x2e8>
    4806:	99 ee       	ldi	r25, 0xE9	; 233
    4808:	f9 22       	and	r15, r25
    480a:	08 c0       	rjmp	.+16     	; 0x481c <vfprintf+0x2f8>
    480c:	1f 5f       	subi	r17, 0xFF	; 255
    480e:	f2 fe       	sbrs	r15, 2
    4810:	05 c0       	rjmp	.+10     	; 0x481c <vfprintf+0x2f8>
    4812:	03 c0       	rjmp	.+6      	; 0x481a <vfprintf+0x2f6>
    4814:	8f 2d       	mov	r24, r15
    4816:	86 78       	andi	r24, 0x86	; 134
    4818:	09 f0       	breq	.+2      	; 0x481c <vfprintf+0x2f8>
    481a:	1f 5f       	subi	r17, 0xFF	; 255
    481c:	0f 2d       	mov	r16, r15
    481e:	f3 fc       	sbrc	r15, 3
    4820:	14 c0       	rjmp	.+40     	; 0x484a <vfprintf+0x326>
    4822:	f0 fe       	sbrs	r15, 0
    4824:	0f c0       	rjmp	.+30     	; 0x4844 <vfprintf+0x320>
    4826:	1e 15       	cp	r17, r14
    4828:	10 f0       	brcs	.+4      	; 0x482e <vfprintf+0x30a>
    482a:	9d 2c       	mov	r9, r13
    482c:	0b c0       	rjmp	.+22     	; 0x4844 <vfprintf+0x320>
    482e:	9d 2c       	mov	r9, r13
    4830:	9e 0c       	add	r9, r14
    4832:	91 1a       	sub	r9, r17
    4834:	1e 2d       	mov	r17, r14
    4836:	06 c0       	rjmp	.+12     	; 0x4844 <vfprintf+0x320>
    4838:	80 e2       	ldi	r24, 0x20	; 32
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	b3 01       	movw	r22, r6
    483e:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <fputc>
    4842:	1f 5f       	subi	r17, 0xFF	; 255
    4844:	1e 15       	cp	r17, r14
    4846:	c0 f3       	brcs	.-16     	; 0x4838 <vfprintf+0x314>
    4848:	04 c0       	rjmp	.+8      	; 0x4852 <vfprintf+0x32e>
    484a:	1e 15       	cp	r17, r14
    484c:	10 f4       	brcc	.+4      	; 0x4852 <vfprintf+0x32e>
    484e:	e1 1a       	sub	r14, r17
    4850:	01 c0       	rjmp	.+2      	; 0x4854 <vfprintf+0x330>
    4852:	ee 24       	eor	r14, r14
    4854:	04 ff       	sbrs	r16, 4
    4856:	0f c0       	rjmp	.+30     	; 0x4876 <vfprintf+0x352>
    4858:	80 e3       	ldi	r24, 0x30	; 48
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	b3 01       	movw	r22, r6
    485e:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <fputc>
    4862:	02 ff       	sbrs	r16, 2
    4864:	1d c0       	rjmp	.+58     	; 0x48a0 <vfprintf+0x37c>
    4866:	01 fd       	sbrc	r16, 1
    4868:	03 c0       	rjmp	.+6      	; 0x4870 <vfprintf+0x34c>
    486a:	88 e7       	ldi	r24, 0x78	; 120
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	0e c0       	rjmp	.+28     	; 0x488c <vfprintf+0x368>
    4870:	88 e5       	ldi	r24, 0x58	; 88
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	0b c0       	rjmp	.+22     	; 0x488c <vfprintf+0x368>
    4876:	80 2f       	mov	r24, r16
    4878:	86 78       	andi	r24, 0x86	; 134
    487a:	91 f0       	breq	.+36     	; 0x48a0 <vfprintf+0x37c>
    487c:	01 ff       	sbrs	r16, 1
    487e:	02 c0       	rjmp	.+4      	; 0x4884 <vfprintf+0x360>
    4880:	8b e2       	ldi	r24, 0x2B	; 43
    4882:	01 c0       	rjmp	.+2      	; 0x4886 <vfprintf+0x362>
    4884:	80 e2       	ldi	r24, 0x20	; 32
    4886:	f7 fc       	sbrc	r15, 7
    4888:	8d e2       	ldi	r24, 0x2D	; 45
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	b3 01       	movw	r22, r6
    488e:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <fputc>
    4892:	06 c0       	rjmp	.+12     	; 0x48a0 <vfprintf+0x37c>
    4894:	80 e3       	ldi	r24, 0x30	; 48
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	b3 01       	movw	r22, r6
    489a:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <fputc>
    489e:	9a 94       	dec	r9
    48a0:	d9 14       	cp	r13, r9
    48a2:	c0 f3       	brcs	.-16     	; 0x4894 <vfprintf+0x370>
    48a4:	da 94       	dec	r13
    48a6:	f1 01       	movw	r30, r2
    48a8:	ed 0d       	add	r30, r13
    48aa:	f1 1d       	adc	r31, r1
    48ac:	80 81       	ld	r24, Z
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	b3 01       	movw	r22, r6
    48b2:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <fputc>
    48b6:	dd 20       	and	r13, r13
    48b8:	a9 f7       	brne	.-22     	; 0x48a4 <vfprintf+0x380>
    48ba:	06 c0       	rjmp	.+12     	; 0x48c8 <vfprintf+0x3a4>
    48bc:	80 e2       	ldi	r24, 0x20	; 32
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	b3 01       	movw	r22, r6
    48c2:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <fputc>
    48c6:	ea 94       	dec	r14
    48c8:	ee 20       	and	r14, r14
    48ca:	c1 f7       	brne	.-16     	; 0x48bc <vfprintf+0x398>
    48cc:	43 ce       	rjmp	.-890    	; 0x4554 <vfprintf+0x30>
    48ce:	f3 01       	movw	r30, r6
    48d0:	66 81       	ldd	r22, Z+6	; 0x06
    48d2:	77 81       	ldd	r23, Z+7	; 0x07
    48d4:	cb 01       	movw	r24, r22
    48d6:	2b 96       	adiw	r28, 0x0b	; 11
    48d8:	e2 e1       	ldi	r30, 0x12	; 18
    48da:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__epilogue_restores__>

000048de <dtoa_prf>:
    48de:	a9 e0       	ldi	r26, 0x09	; 9
    48e0:	b0 e0       	ldi	r27, 0x00	; 0
    48e2:	e5 e7       	ldi	r30, 0x75	; 117
    48e4:	f4 e2       	ldi	r31, 0x24	; 36
    48e6:	0c 94 1a 22 	jmp	0x4434	; 0x4434 <__prologue_saves__+0x8>
    48ea:	6a 01       	movw	r12, r20
    48ec:	12 2f       	mov	r17, r18
    48ee:	a0 2e       	mov	r10, r16
    48f0:	be 2c       	mov	r11, r14
    48f2:	2b e3       	ldi	r18, 0x3B	; 59
    48f4:	20 17       	cp	r18, r16
    48f6:	18 f4       	brcc	.+6      	; 0x48fe <dtoa_prf+0x20>
    48f8:	2c e3       	ldi	r18, 0x3C	; 60
    48fa:	92 2e       	mov	r9, r18
    48fc:	02 c0       	rjmp	.+4      	; 0x4902 <dtoa_prf+0x24>
    48fe:	90 2e       	mov	r9, r16
    4900:	93 94       	inc	r9
    4902:	ae 01       	movw	r20, r28
    4904:	4f 5f       	subi	r20, 0xFF	; 255
    4906:	5f 4f       	sbci	r21, 0xFF	; 255
    4908:	27 e0       	ldi	r18, 0x07	; 7
    490a:	09 2d       	mov	r16, r9
    490c:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <__ftoa_engine>
    4910:	bc 01       	movw	r22, r24
    4912:	89 81       	ldd	r24, Y+1	; 0x01
    4914:	e8 2e       	mov	r14, r24
    4916:	ff 24       	eor	r15, r15
    4918:	c7 01       	movw	r24, r14
    491a:	89 70       	andi	r24, 0x09	; 9
    491c:	90 70       	andi	r25, 0x00	; 0
    491e:	01 97       	sbiw	r24, 0x01	; 1
    4920:	11 f4       	brne	.+4      	; 0x4926 <dtoa_prf+0x48>
    4922:	ad e2       	ldi	r26, 0x2D	; 45
    4924:	09 c0       	rjmp	.+18     	; 0x4938 <dtoa_prf+0x5a>
    4926:	b1 fe       	sbrs	r11, 1
    4928:	02 c0       	rjmp	.+4      	; 0x492e <dtoa_prf+0x50>
    492a:	ab e2       	ldi	r26, 0x2B	; 43
    492c:	05 c0       	rjmp	.+10     	; 0x4938 <dtoa_prf+0x5a>
    492e:	b0 fc       	sbrc	r11, 0
    4930:	02 c0       	rjmp	.+4      	; 0x4936 <dtoa_prf+0x58>
    4932:	a0 e0       	ldi	r26, 0x00	; 0
    4934:	01 c0       	rjmp	.+2      	; 0x4938 <dtoa_prf+0x5a>
    4936:	a0 e2       	ldi	r26, 0x20	; 32
    4938:	e3 fe       	sbrs	r14, 3
    493a:	3b c0       	rjmp	.+118    	; 0x49b2 <dtoa_prf+0xd4>
    493c:	aa 23       	and	r26, r26
    493e:	11 f4       	brne	.+4      	; 0x4944 <dtoa_prf+0x66>
    4940:	23 e0       	ldi	r18, 0x03	; 3
    4942:	01 c0       	rjmp	.+2      	; 0x4946 <dtoa_prf+0x68>
    4944:	24 e0       	ldi	r18, 0x04	; 4
    4946:	21 17       	cp	r18, r17
    4948:	10 f0       	brcs	.+4      	; 0x494e <dtoa_prf+0x70>
    494a:	20 e0       	ldi	r18, 0x00	; 0
    494c:	02 c0       	rjmp	.+4      	; 0x4952 <dtoa_prf+0x74>
    494e:	12 1b       	sub	r17, r18
    4950:	21 2f       	mov	r18, r17
    4952:	eb 2c       	mov	r14, r11
    4954:	b4 fe       	sbrs	r11, 4
    4956:	02 c0       	rjmp	.+4      	; 0x495c <dtoa_prf+0x7e>
    4958:	32 2f       	mov	r19, r18
    495a:	0a c0       	rjmp	.+20     	; 0x4970 <dtoa_prf+0x92>
    495c:	f6 01       	movw	r30, r12
    495e:	32 2f       	mov	r19, r18
    4960:	80 e2       	ldi	r24, 0x20	; 32
    4962:	02 c0       	rjmp	.+4      	; 0x4968 <dtoa_prf+0x8a>
    4964:	81 93       	st	Z+, r24
    4966:	31 50       	subi	r19, 0x01	; 1
    4968:	33 23       	and	r19, r19
    496a:	e1 f7       	brne	.-8      	; 0x4964 <dtoa_prf+0x86>
    496c:	c2 0e       	add	r12, r18
    496e:	d1 1c       	adc	r13, r1
    4970:	aa 23       	and	r26, r26
    4972:	19 f0       	breq	.+6      	; 0x497a <dtoa_prf+0x9c>
    4974:	f6 01       	movw	r30, r12
    4976:	a1 93       	st	Z+, r26
    4978:	6f 01       	movw	r12, r30
    497a:	f6 01       	movw	r30, r12
    497c:	31 96       	adiw	r30, 0x01	; 1
    497e:	e2 fe       	sbrs	r14, 2
    4980:	05 c0       	rjmp	.+10     	; 0x498c <dtoa_prf+0xae>
    4982:	9e e4       	ldi	r25, 0x4E	; 78
    4984:	d6 01       	movw	r26, r12
    4986:	9c 93       	st	X, r25
    4988:	81 e4       	ldi	r24, 0x41	; 65
    498a:	04 c0       	rjmp	.+8      	; 0x4994 <dtoa_prf+0xb6>
    498c:	9e e6       	ldi	r25, 0x6E	; 110
    498e:	d6 01       	movw	r26, r12
    4990:	9c 93       	st	X, r25
    4992:	81 e6       	ldi	r24, 0x61	; 97
    4994:	11 96       	adiw	r26, 0x01	; 1
    4996:	8c 93       	st	X, r24
    4998:	91 83       	std	Z+1, r25	; 0x01
    499a:	32 96       	adiw	r30, 0x02	; 2
    499c:	df 01       	movw	r26, r30
    499e:	83 2f       	mov	r24, r19
    49a0:	90 e2       	ldi	r25, 0x20	; 32
    49a2:	02 c0       	rjmp	.+4      	; 0x49a8 <dtoa_prf+0xca>
    49a4:	9d 93       	st	X+, r25
    49a6:	81 50       	subi	r24, 0x01	; 1
    49a8:	88 23       	and	r24, r24
    49aa:	e1 f7       	brne	.-8      	; 0x49a4 <dtoa_prf+0xc6>
    49ac:	e3 0f       	add	r30, r19
    49ae:	f1 1d       	adc	r31, r1
    49b0:	40 c0       	rjmp	.+128    	; 0x4a32 <dtoa_prf+0x154>
    49b2:	e2 fe       	sbrs	r14, 2
    49b4:	42 c0       	rjmp	.+132    	; 0x4a3a <dtoa_prf+0x15c>
    49b6:	aa 23       	and	r26, r26
    49b8:	11 f4       	brne	.+4      	; 0x49be <dtoa_prf+0xe0>
    49ba:	23 e0       	ldi	r18, 0x03	; 3
    49bc:	01 c0       	rjmp	.+2      	; 0x49c0 <dtoa_prf+0xe2>
    49be:	24 e0       	ldi	r18, 0x04	; 4
    49c0:	21 17       	cp	r18, r17
    49c2:	10 f0       	brcs	.+4      	; 0x49c8 <dtoa_prf+0xea>
    49c4:	20 e0       	ldi	r18, 0x00	; 0
    49c6:	02 c0       	rjmp	.+4      	; 0x49cc <dtoa_prf+0xee>
    49c8:	12 1b       	sub	r17, r18
    49ca:	21 2f       	mov	r18, r17
    49cc:	eb 2c       	mov	r14, r11
    49ce:	b4 fe       	sbrs	r11, 4
    49d0:	02 c0       	rjmp	.+4      	; 0x49d6 <dtoa_prf+0xf8>
    49d2:	92 2f       	mov	r25, r18
    49d4:	0a c0       	rjmp	.+20     	; 0x49ea <dtoa_prf+0x10c>
    49d6:	f6 01       	movw	r30, r12
    49d8:	92 2f       	mov	r25, r18
    49da:	80 e2       	ldi	r24, 0x20	; 32
    49dc:	02 c0       	rjmp	.+4      	; 0x49e2 <dtoa_prf+0x104>
    49de:	81 93       	st	Z+, r24
    49e0:	91 50       	subi	r25, 0x01	; 1
    49e2:	99 23       	and	r25, r25
    49e4:	e1 f7       	brne	.-8      	; 0x49de <dtoa_prf+0x100>
    49e6:	c2 0e       	add	r12, r18
    49e8:	d1 1c       	adc	r13, r1
    49ea:	aa 23       	and	r26, r26
    49ec:	19 f0       	breq	.+6      	; 0x49f4 <dtoa_prf+0x116>
    49ee:	f6 01       	movw	r30, r12
    49f0:	a1 93       	st	Z+, r26
    49f2:	6f 01       	movw	r12, r30
    49f4:	f6 01       	movw	r30, r12
    49f6:	31 96       	adiw	r30, 0x01	; 1
    49f8:	e2 fe       	sbrs	r14, 2
    49fa:	08 c0       	rjmp	.+16     	; 0x4a0c <dtoa_prf+0x12e>
    49fc:	89 e4       	ldi	r24, 0x49	; 73
    49fe:	d6 01       	movw	r26, r12
    4a00:	8c 93       	st	X, r24
    4a02:	8e e4       	ldi	r24, 0x4E	; 78
    4a04:	11 96       	adiw	r26, 0x01	; 1
    4a06:	8c 93       	st	X, r24
    4a08:	86 e4       	ldi	r24, 0x46	; 70
    4a0a:	07 c0       	rjmp	.+14     	; 0x4a1a <dtoa_prf+0x13c>
    4a0c:	89 e6       	ldi	r24, 0x69	; 105
    4a0e:	d6 01       	movw	r26, r12
    4a10:	8c 93       	st	X, r24
    4a12:	8e e6       	ldi	r24, 0x6E	; 110
    4a14:	11 96       	adiw	r26, 0x01	; 1
    4a16:	8c 93       	st	X, r24
    4a18:	86 e6       	ldi	r24, 0x66	; 102
    4a1a:	81 83       	std	Z+1, r24	; 0x01
    4a1c:	32 96       	adiw	r30, 0x02	; 2
    4a1e:	df 01       	movw	r26, r30
    4a20:	89 2f       	mov	r24, r25
    4a22:	20 e2       	ldi	r18, 0x20	; 32
    4a24:	02 c0       	rjmp	.+4      	; 0x4a2a <dtoa_prf+0x14c>
    4a26:	2d 93       	st	X+, r18
    4a28:	81 50       	subi	r24, 0x01	; 1
    4a2a:	88 23       	and	r24, r24
    4a2c:	e1 f7       	brne	.-8      	; 0x4a26 <dtoa_prf+0x148>
    4a2e:	e9 0f       	add	r30, r25
    4a30:	f1 1d       	adc	r31, r1
    4a32:	10 82       	st	Z, r1
    4a34:	2e ef       	ldi	r18, 0xFE	; 254
    4a36:	3f ef       	ldi	r19, 0xFF	; 255
    4a38:	af c0       	rjmp	.+350    	; 0x4b98 <dtoa_prf+0x2ba>
    4a3a:	16 16       	cp	r1, r22
    4a3c:	17 06       	cpc	r1, r23
    4a3e:	1c f0       	brlt	.+6      	; 0x4a46 <dtoa_prf+0x168>
    4a40:	41 e0       	ldi	r20, 0x01	; 1
    4a42:	50 e0       	ldi	r21, 0x00	; 0
    4a44:	03 c0       	rjmp	.+6      	; 0x4a4c <dtoa_prf+0x16e>
    4a46:	ab 01       	movw	r20, r22
    4a48:	4f 5f       	subi	r20, 0xFF	; 255
    4a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    4a4c:	aa 20       	and	r10, r10
    4a4e:	19 f4       	brne	.+6      	; 0x4a56 <dtoa_prf+0x178>
    4a50:	80 e0       	ldi	r24, 0x00	; 0
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	03 c0       	rjmp	.+6      	; 0x4a5c <dtoa_prf+0x17e>
    4a56:	8a 2d       	mov	r24, r10
    4a58:	90 e0       	ldi	r25, 0x00	; 0
    4a5a:	01 96       	adiw	r24, 0x01	; 1
    4a5c:	20 e0       	ldi	r18, 0x00	; 0
    4a5e:	30 e0       	ldi	r19, 0x00	; 0
    4a60:	aa 23       	and	r26, r26
    4a62:	11 f0       	breq	.+4      	; 0x4a68 <dtoa_prf+0x18a>
    4a64:	21 e0       	ldi	r18, 0x01	; 1
    4a66:	30 e0       	ldi	r19, 0x00	; 0
    4a68:	24 0f       	add	r18, r20
    4a6a:	35 1f       	adc	r19, r21
    4a6c:	28 0f       	add	r18, r24
    4a6e:	39 1f       	adc	r19, r25
    4a70:	81 2f       	mov	r24, r17
    4a72:	90 e0       	ldi	r25, 0x00	; 0
    4a74:	28 17       	cp	r18, r24
    4a76:	39 07       	cpc	r19, r25
    4a78:	14 f0       	brlt	.+4      	; 0x4a7e <dtoa_prf+0x1a0>
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	02 c0       	rjmp	.+4      	; 0x4a82 <dtoa_prf+0x1a4>
    4a7e:	12 1b       	sub	r17, r18
    4a80:	21 2f       	mov	r18, r17
    4a82:	4b 2d       	mov	r20, r11
    4a84:	50 e0       	ldi	r21, 0x00	; 0
    4a86:	ca 01       	movw	r24, r20
    4a88:	80 71       	andi	r24, 0x10	; 16
    4a8a:	90 70       	andi	r25, 0x00	; 0
    4a8c:	b4 fc       	sbrc	r11, 4
    4a8e:	0d c0       	rjmp	.+26     	; 0x4aaa <dtoa_prf+0x1cc>
    4a90:	b3 fc       	sbrc	r11, 3
    4a92:	0b c0       	rjmp	.+22     	; 0x4aaa <dtoa_prf+0x1cc>
    4a94:	f6 01       	movw	r30, r12
    4a96:	32 2f       	mov	r19, r18
    4a98:	40 e2       	ldi	r20, 0x20	; 32
    4a9a:	02 c0       	rjmp	.+4      	; 0x4aa0 <dtoa_prf+0x1c2>
    4a9c:	41 93       	st	Z+, r20
    4a9e:	31 50       	subi	r19, 0x01	; 1
    4aa0:	33 23       	and	r19, r19
    4aa2:	e1 f7       	brne	.-8      	; 0x4a9c <dtoa_prf+0x1be>
    4aa4:	c2 0e       	add	r12, r18
    4aa6:	d1 1c       	adc	r13, r1
    4aa8:	01 c0       	rjmp	.+2      	; 0x4aac <dtoa_prf+0x1ce>
    4aaa:	32 2f       	mov	r19, r18
    4aac:	aa 23       	and	r26, r26
    4aae:	19 f0       	breq	.+6      	; 0x4ab6 <dtoa_prf+0x1d8>
    4ab0:	f6 01       	movw	r30, r12
    4ab2:	a1 93       	st	Z+, r26
    4ab4:	6f 01       	movw	r12, r30
    4ab6:	89 2b       	or	r24, r25
    4ab8:	11 f0       	breq	.+4      	; 0x4abe <dtoa_prf+0x1e0>
    4aba:	13 2f       	mov	r17, r19
    4abc:	0a c0       	rjmp	.+20     	; 0x4ad2 <dtoa_prf+0x1f4>
    4abe:	f6 01       	movw	r30, r12
    4ac0:	13 2f       	mov	r17, r19
    4ac2:	80 e3       	ldi	r24, 0x30	; 48
    4ac4:	02 c0       	rjmp	.+4      	; 0x4aca <dtoa_prf+0x1ec>
    4ac6:	81 93       	st	Z+, r24
    4ac8:	11 50       	subi	r17, 0x01	; 1
    4aca:	11 23       	and	r17, r17
    4acc:	e1 f7       	brne	.-8      	; 0x4ac6 <dtoa_prf+0x1e8>
    4ace:	c3 0e       	add	r12, r19
    4ad0:	d1 1c       	adc	r13, r1
    4ad2:	09 2d       	mov	r16, r9
    4ad4:	06 0f       	add	r16, r22
    4ad6:	ba 80       	ldd	r11, Y+2	; 0x02
    4ad8:	90 e1       	ldi	r25, 0x10	; 16
    4ada:	89 2e       	mov	r8, r25
    4adc:	91 2c       	mov	r9, r1
    4ade:	8e 20       	and	r8, r14
    4ae0:	9f 20       	and	r9, r15
    4ae2:	e4 fe       	sbrs	r14, 4
    4ae4:	04 c0       	rjmp	.+8      	; 0x4aee <dtoa_prf+0x210>
    4ae6:	f1 e3       	ldi	r31, 0x31	; 49
    4ae8:	bf 16       	cp	r11, r31
    4aea:	09 f4       	brne	.+2      	; 0x4aee <dtoa_prf+0x210>
    4aec:	01 50       	subi	r16, 0x01	; 1
    4aee:	10 16       	cp	r1, r16
    4af0:	14 f0       	brlt	.+4      	; 0x4af6 <dtoa_prf+0x218>
    4af2:	01 e0       	ldi	r16, 0x01	; 1
    4af4:	03 c0       	rjmp	.+6      	; 0x4afc <dtoa_prf+0x21e>
    4af6:	09 30       	cpi	r16, 0x09	; 9
    4af8:	08 f0       	brcs	.+2      	; 0x4afc <dtoa_prf+0x21e>
    4afa:	08 e0       	ldi	r16, 0x08	; 8
    4afc:	9b 01       	movw	r18, r22
    4afe:	77 ff       	sbrs	r23, 7
    4b00:	02 c0       	rjmp	.+4      	; 0x4b06 <dtoa_prf+0x228>
    4b02:	20 e0       	ldi	r18, 0x00	; 0
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	cb 01       	movw	r24, r22
    4b08:	01 96       	adiw	r24, 0x01	; 1
    4b0a:	82 1b       	sub	r24, r18
    4b0c:	93 0b       	sbc	r25, r19
    4b0e:	fe 01       	movw	r30, r28
    4b10:	31 96       	adiw	r30, 0x01	; 1
    4b12:	e8 0f       	add	r30, r24
    4b14:	f9 1f       	adc	r31, r25
    4b16:	8e e2       	ldi	r24, 0x2E	; 46
    4b18:	f8 2e       	mov	r15, r24
    4b1a:	3b 01       	movw	r6, r22
    4b1c:	60 1a       	sub	r6, r16
    4b1e:	71 08       	sbc	r7, r1
    4b20:	8a 2d       	mov	r24, r10
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	44 27       	eor	r20, r20
    4b26:	55 27       	eor	r21, r21
    4b28:	48 1b       	sub	r20, r24
    4b2a:	59 0b       	sbc	r21, r25
    4b2c:	8f ef       	ldi	r24, 0xFF	; 255
    4b2e:	2f 3f       	cpi	r18, 0xFF	; 255
    4b30:	38 07       	cpc	r19, r24
    4b32:	19 f4       	brne	.+6      	; 0x4b3a <dtoa_prf+0x25c>
    4b34:	d6 01       	movw	r26, r12
    4b36:	fd 92       	st	X+, r15
    4b38:	6d 01       	movw	r12, r26
    4b3a:	62 17       	cp	r22, r18
    4b3c:	73 07       	cpc	r23, r19
    4b3e:	2c f0       	brlt	.+10     	; 0x4b4a <dtoa_prf+0x26c>
    4b40:	62 16       	cp	r6, r18
    4b42:	73 06       	cpc	r7, r19
    4b44:	14 f4       	brge	.+4      	; 0x4b4a <dtoa_prf+0x26c>
    4b46:	80 81       	ld	r24, Z
    4b48:	01 c0       	rjmp	.+2      	; 0x4b4c <dtoa_prf+0x26e>
    4b4a:	80 e3       	ldi	r24, 0x30	; 48
    4b4c:	21 50       	subi	r18, 0x01	; 1
    4b4e:	30 40       	sbci	r19, 0x00	; 0
    4b50:	31 96       	adiw	r30, 0x01	; 1
    4b52:	24 17       	cp	r18, r20
    4b54:	35 07       	cpc	r19, r21
    4b56:	24 f0       	brlt	.+8      	; 0x4b60 <dtoa_prf+0x282>
    4b58:	d6 01       	movw	r26, r12
    4b5a:	8d 93       	st	X+, r24
    4b5c:	6d 01       	movw	r12, r26
    4b5e:	e6 cf       	rjmp	.-52     	; 0x4b2c <dtoa_prf+0x24e>
    4b60:	26 17       	cp	r18, r22
    4b62:	37 07       	cpc	r19, r23
    4b64:	49 f4       	brne	.+18     	; 0x4b78 <dtoa_prf+0x29a>
    4b66:	b5 e3       	ldi	r27, 0x35	; 53
    4b68:	bb 15       	cp	r27, r11
    4b6a:	28 f0       	brcs	.+10     	; 0x4b76 <dtoa_prf+0x298>
    4b6c:	bb 16       	cp	r11, r27
    4b6e:	21 f4       	brne	.+8      	; 0x4b78 <dtoa_prf+0x29a>
    4b70:	81 14       	cp	r8, r1
    4b72:	91 04       	cpc	r9, r1
    4b74:	09 f4       	brne	.+2      	; 0x4b78 <dtoa_prf+0x29a>
    4b76:	81 e3       	ldi	r24, 0x31	; 49
    4b78:	f6 01       	movw	r30, r12
    4b7a:	81 93       	st	Z+, r24
    4b7c:	d6 01       	movw	r26, r12
    4b7e:	81 2f       	mov	r24, r17
    4b80:	90 e2       	ldi	r25, 0x20	; 32
    4b82:	02 c0       	rjmp	.+4      	; 0x4b88 <dtoa_prf+0x2aa>
    4b84:	9c 93       	st	X, r25
    4b86:	81 50       	subi	r24, 0x01	; 1
    4b88:	11 96       	adiw	r26, 0x01	; 1
    4b8a:	88 23       	and	r24, r24
    4b8c:	d9 f7       	brne	.-10     	; 0x4b84 <dtoa_prf+0x2a6>
    4b8e:	e1 0f       	add	r30, r17
    4b90:	f1 1d       	adc	r31, r1
    4b92:	10 82       	st	Z, r1
    4b94:	20 e0       	ldi	r18, 0x00	; 0
    4b96:	30 e0       	ldi	r19, 0x00	; 0
    4b98:	c9 01       	movw	r24, r18
    4b9a:	29 96       	adiw	r28, 0x09	; 9
    4b9c:	ee e0       	ldi	r30, 0x0E	; 14
    4b9e:	0c 94 36 22 	jmp	0x446c	; 0x446c <__epilogue_restores__+0x8>

00004ba2 <__ftoa_engine>:
    4ba2:	28 30       	cpi	r18, 0x08	; 8
    4ba4:	08 f0       	brcs	.+2      	; 0x4ba8 <__ftoa_engine+0x6>
    4ba6:	27 e0       	ldi	r18, 0x07	; 7
    4ba8:	33 27       	eor	r19, r19
    4baa:	da 01       	movw	r26, r20
    4bac:	99 0f       	add	r25, r25
    4bae:	31 1d       	adc	r19, r1
    4bb0:	87 fd       	sbrc	r24, 7
    4bb2:	91 60       	ori	r25, 0x01	; 1
    4bb4:	00 96       	adiw	r24, 0x00	; 0
    4bb6:	61 05       	cpc	r22, r1
    4bb8:	71 05       	cpc	r23, r1
    4bba:	39 f4       	brne	.+14     	; 0x4bca <__ftoa_engine+0x28>
    4bbc:	32 60       	ori	r19, 0x02	; 2
    4bbe:	2e 5f       	subi	r18, 0xFE	; 254
    4bc0:	3d 93       	st	X+, r19
    4bc2:	30 e3       	ldi	r19, 0x30	; 48
    4bc4:	2a 95       	dec	r18
    4bc6:	e1 f7       	brne	.-8      	; 0x4bc0 <__ftoa_engine+0x1e>
    4bc8:	08 95       	ret
    4bca:	9f 3f       	cpi	r25, 0xFF	; 255
    4bcc:	30 f0       	brcs	.+12     	; 0x4bda <__ftoa_engine+0x38>
    4bce:	80 38       	cpi	r24, 0x80	; 128
    4bd0:	71 05       	cpc	r23, r1
    4bd2:	61 05       	cpc	r22, r1
    4bd4:	09 f0       	breq	.+2      	; 0x4bd8 <__ftoa_engine+0x36>
    4bd6:	3c 5f       	subi	r19, 0xFC	; 252
    4bd8:	3c 5f       	subi	r19, 0xFC	; 252
    4bda:	3d 93       	st	X+, r19
    4bdc:	91 30       	cpi	r25, 0x01	; 1
    4bde:	08 f0       	brcs	.+2      	; 0x4be2 <__ftoa_engine+0x40>
    4be0:	80 68       	ori	r24, 0x80	; 128
    4be2:	91 1d       	adc	r25, r1
    4be4:	df 93       	push	r29
    4be6:	cf 93       	push	r28
    4be8:	1f 93       	push	r17
    4bea:	0f 93       	push	r16
    4bec:	ff 92       	push	r15
    4bee:	ef 92       	push	r14
    4bf0:	19 2f       	mov	r17, r25
    4bf2:	98 7f       	andi	r25, 0xF8	; 248
    4bf4:	96 95       	lsr	r25
    4bf6:	e9 2f       	mov	r30, r25
    4bf8:	96 95       	lsr	r25
    4bfa:	96 95       	lsr	r25
    4bfc:	e9 0f       	add	r30, r25
    4bfe:	ff 27       	eor	r31, r31
    4c00:	e2 55       	subi	r30, 0x52	; 82
    4c02:	ff 4f       	sbci	r31, 0xFF	; 255
    4c04:	99 27       	eor	r25, r25
    4c06:	33 27       	eor	r19, r19
    4c08:	ee 24       	eor	r14, r14
    4c0a:	ff 24       	eor	r15, r15
    4c0c:	a7 01       	movw	r20, r14
    4c0e:	e7 01       	movw	r28, r14
    4c10:	05 90       	lpm	r0, Z+
    4c12:	08 94       	sec
    4c14:	07 94       	ror	r0
    4c16:	28 f4       	brcc	.+10     	; 0x4c22 <__ftoa_engine+0x80>
    4c18:	36 0f       	add	r19, r22
    4c1a:	e7 1e       	adc	r14, r23
    4c1c:	f8 1e       	adc	r15, r24
    4c1e:	49 1f       	adc	r20, r25
    4c20:	51 1d       	adc	r21, r1
    4c22:	66 0f       	add	r22, r22
    4c24:	77 1f       	adc	r23, r23
    4c26:	88 1f       	adc	r24, r24
    4c28:	99 1f       	adc	r25, r25
    4c2a:	06 94       	lsr	r0
    4c2c:	a1 f7       	brne	.-24     	; 0x4c16 <__ftoa_engine+0x74>
    4c2e:	05 90       	lpm	r0, Z+
    4c30:	07 94       	ror	r0
    4c32:	28 f4       	brcc	.+10     	; 0x4c3e <__ftoa_engine+0x9c>
    4c34:	e7 0e       	add	r14, r23
    4c36:	f8 1e       	adc	r15, r24
    4c38:	49 1f       	adc	r20, r25
    4c3a:	56 1f       	adc	r21, r22
    4c3c:	c1 1d       	adc	r28, r1
    4c3e:	77 0f       	add	r23, r23
    4c40:	88 1f       	adc	r24, r24
    4c42:	99 1f       	adc	r25, r25
    4c44:	66 1f       	adc	r22, r22
    4c46:	06 94       	lsr	r0
    4c48:	a1 f7       	brne	.-24     	; 0x4c32 <__ftoa_engine+0x90>
    4c4a:	05 90       	lpm	r0, Z+
    4c4c:	07 94       	ror	r0
    4c4e:	28 f4       	brcc	.+10     	; 0x4c5a <__ftoa_engine+0xb8>
    4c50:	f8 0e       	add	r15, r24
    4c52:	49 1f       	adc	r20, r25
    4c54:	56 1f       	adc	r21, r22
    4c56:	c7 1f       	adc	r28, r23
    4c58:	d1 1d       	adc	r29, r1
    4c5a:	88 0f       	add	r24, r24
    4c5c:	99 1f       	adc	r25, r25
    4c5e:	66 1f       	adc	r22, r22
    4c60:	77 1f       	adc	r23, r23
    4c62:	06 94       	lsr	r0
    4c64:	a1 f7       	brne	.-24     	; 0x4c4e <__ftoa_engine+0xac>
    4c66:	05 90       	lpm	r0, Z+
    4c68:	07 94       	ror	r0
    4c6a:	20 f4       	brcc	.+8      	; 0x4c74 <__ftoa_engine+0xd2>
    4c6c:	49 0f       	add	r20, r25
    4c6e:	56 1f       	adc	r21, r22
    4c70:	c7 1f       	adc	r28, r23
    4c72:	d8 1f       	adc	r29, r24
    4c74:	99 0f       	add	r25, r25
    4c76:	66 1f       	adc	r22, r22
    4c78:	77 1f       	adc	r23, r23
    4c7a:	88 1f       	adc	r24, r24
    4c7c:	06 94       	lsr	r0
    4c7e:	a9 f7       	brne	.-22     	; 0x4c6a <__ftoa_engine+0xc8>
    4c80:	84 91       	lpm	r24, Z+
    4c82:	10 95       	com	r17
    4c84:	17 70       	andi	r17, 0x07	; 7
    4c86:	41 f0       	breq	.+16     	; 0x4c98 <__ftoa_engine+0xf6>
    4c88:	d6 95       	lsr	r29
    4c8a:	c7 95       	ror	r28
    4c8c:	57 95       	ror	r21
    4c8e:	47 95       	ror	r20
    4c90:	f7 94       	ror	r15
    4c92:	e7 94       	ror	r14
    4c94:	1a 95       	dec	r17
    4c96:	c1 f7       	brne	.-16     	; 0x4c88 <__ftoa_engine+0xe6>
    4c98:	e4 e5       	ldi	r30, 0x54	; 84
    4c9a:	f0 e0       	ldi	r31, 0x00	; 0
    4c9c:	68 94       	set
    4c9e:	15 90       	lpm	r1, Z+
    4ca0:	15 91       	lpm	r17, Z+
    4ca2:	35 91       	lpm	r19, Z+
    4ca4:	65 91       	lpm	r22, Z+
    4ca6:	95 91       	lpm	r25, Z+
    4ca8:	05 90       	lpm	r0, Z+
    4caa:	7f e2       	ldi	r23, 0x2F	; 47
    4cac:	73 95       	inc	r23
    4cae:	e1 18       	sub	r14, r1
    4cb0:	f1 0a       	sbc	r15, r17
    4cb2:	43 0b       	sbc	r20, r19
    4cb4:	56 0b       	sbc	r21, r22
    4cb6:	c9 0b       	sbc	r28, r25
    4cb8:	d0 09       	sbc	r29, r0
    4cba:	c0 f7       	brcc	.-16     	; 0x4cac <__ftoa_engine+0x10a>
    4cbc:	e1 0c       	add	r14, r1
    4cbe:	f1 1e       	adc	r15, r17
    4cc0:	43 1f       	adc	r20, r19
    4cc2:	56 1f       	adc	r21, r22
    4cc4:	c9 1f       	adc	r28, r25
    4cc6:	d0 1d       	adc	r29, r0
    4cc8:	7e f4       	brtc	.+30     	; 0x4ce8 <__ftoa_engine+0x146>
    4cca:	70 33       	cpi	r23, 0x30	; 48
    4ccc:	11 f4       	brne	.+4      	; 0x4cd2 <__ftoa_engine+0x130>
    4cce:	8a 95       	dec	r24
    4cd0:	e6 cf       	rjmp	.-52     	; 0x4c9e <__ftoa_engine+0xfc>
    4cd2:	e8 94       	clt
    4cd4:	01 50       	subi	r16, 0x01	; 1
    4cd6:	30 f0       	brcs	.+12     	; 0x4ce4 <__ftoa_engine+0x142>
    4cd8:	08 0f       	add	r16, r24
    4cda:	0a f4       	brpl	.+2      	; 0x4cde <__ftoa_engine+0x13c>
    4cdc:	00 27       	eor	r16, r16
    4cde:	02 17       	cp	r16, r18
    4ce0:	08 f4       	brcc	.+2      	; 0x4ce4 <__ftoa_engine+0x142>
    4ce2:	20 2f       	mov	r18, r16
    4ce4:	23 95       	inc	r18
    4ce6:	02 2f       	mov	r16, r18
    4ce8:	7a 33       	cpi	r23, 0x3A	; 58
    4cea:	28 f0       	brcs	.+10     	; 0x4cf6 <__ftoa_engine+0x154>
    4cec:	79 e3       	ldi	r23, 0x39	; 57
    4cee:	7d 93       	st	X+, r23
    4cf0:	2a 95       	dec	r18
    4cf2:	e9 f7       	brne	.-6      	; 0x4cee <__ftoa_engine+0x14c>
    4cf4:	10 c0       	rjmp	.+32     	; 0x4d16 <__ftoa_engine+0x174>
    4cf6:	7d 93       	st	X+, r23
    4cf8:	2a 95       	dec	r18
    4cfa:	89 f6       	brne	.-94     	; 0x4c9e <__ftoa_engine+0xfc>
    4cfc:	06 94       	lsr	r0
    4cfe:	97 95       	ror	r25
    4d00:	67 95       	ror	r22
    4d02:	37 95       	ror	r19
    4d04:	17 95       	ror	r17
    4d06:	17 94       	ror	r1
    4d08:	e1 18       	sub	r14, r1
    4d0a:	f1 0a       	sbc	r15, r17
    4d0c:	43 0b       	sbc	r20, r19
    4d0e:	56 0b       	sbc	r21, r22
    4d10:	c9 0b       	sbc	r28, r25
    4d12:	d0 09       	sbc	r29, r0
    4d14:	98 f0       	brcs	.+38     	; 0x4d3c <__ftoa_engine+0x19a>
    4d16:	23 95       	inc	r18
    4d18:	7e 91       	ld	r23, -X
    4d1a:	73 95       	inc	r23
    4d1c:	7a 33       	cpi	r23, 0x3A	; 58
    4d1e:	08 f0       	brcs	.+2      	; 0x4d22 <__ftoa_engine+0x180>
    4d20:	70 e3       	ldi	r23, 0x30	; 48
    4d22:	7c 93       	st	X, r23
    4d24:	20 13       	cpse	r18, r16
    4d26:	b8 f7       	brcc	.-18     	; 0x4d16 <__ftoa_engine+0x174>
    4d28:	7e 91       	ld	r23, -X
    4d2a:	70 61       	ori	r23, 0x10	; 16
    4d2c:	7d 93       	st	X+, r23
    4d2e:	30 f0       	brcs	.+12     	; 0x4d3c <__ftoa_engine+0x19a>
    4d30:	83 95       	inc	r24
    4d32:	71 e3       	ldi	r23, 0x31	; 49
    4d34:	7d 93       	st	X+, r23
    4d36:	70 e3       	ldi	r23, 0x30	; 48
    4d38:	2a 95       	dec	r18
    4d3a:	e1 f7       	brne	.-8      	; 0x4d34 <__ftoa_engine+0x192>
    4d3c:	11 24       	eor	r1, r1
    4d3e:	ef 90       	pop	r14
    4d40:	ff 90       	pop	r15
    4d42:	0f 91       	pop	r16
    4d44:	1f 91       	pop	r17
    4d46:	cf 91       	pop	r28
    4d48:	df 91       	pop	r29
    4d4a:	99 27       	eor	r25, r25
    4d4c:	87 fd       	sbrc	r24, 7
    4d4e:	90 95       	com	r25
    4d50:	08 95       	ret

00004d52 <strnlen_P>:
    4d52:	fc 01       	movw	r30, r24
    4d54:	05 90       	lpm	r0, Z+
    4d56:	61 50       	subi	r22, 0x01	; 1
    4d58:	70 40       	sbci	r23, 0x00	; 0
    4d5a:	01 10       	cpse	r0, r1
    4d5c:	d8 f7       	brcc	.-10     	; 0x4d54 <strnlen_P+0x2>
    4d5e:	80 95       	com	r24
    4d60:	90 95       	com	r25
    4d62:	8e 0f       	add	r24, r30
    4d64:	9f 1f       	adc	r25, r31
    4d66:	08 95       	ret

00004d68 <strnlen>:
    4d68:	fc 01       	movw	r30, r24
    4d6a:	61 50       	subi	r22, 0x01	; 1
    4d6c:	70 40       	sbci	r23, 0x00	; 0
    4d6e:	01 90       	ld	r0, Z+
    4d70:	01 10       	cpse	r0, r1
    4d72:	d8 f7       	brcc	.-10     	; 0x4d6a <strnlen+0x2>
    4d74:	80 95       	com	r24
    4d76:	90 95       	com	r25
    4d78:	8e 0f       	add	r24, r30
    4d7a:	9f 1f       	adc	r25, r31
    4d7c:	08 95       	ret

00004d7e <fputc>:
    4d7e:	0f 93       	push	r16
    4d80:	1f 93       	push	r17
    4d82:	cf 93       	push	r28
    4d84:	df 93       	push	r29
    4d86:	8c 01       	movw	r16, r24
    4d88:	eb 01       	movw	r28, r22
    4d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d8c:	81 ff       	sbrs	r24, 1
    4d8e:	1b c0       	rjmp	.+54     	; 0x4dc6 <fputc+0x48>
    4d90:	82 ff       	sbrs	r24, 2
    4d92:	0d c0       	rjmp	.+26     	; 0x4dae <fputc+0x30>
    4d94:	2e 81       	ldd	r18, Y+6	; 0x06
    4d96:	3f 81       	ldd	r19, Y+7	; 0x07
    4d98:	8c 81       	ldd	r24, Y+4	; 0x04
    4d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    4d9c:	28 17       	cp	r18, r24
    4d9e:	39 07       	cpc	r19, r25
    4da0:	64 f4       	brge	.+24     	; 0x4dba <fputc+0x3c>
    4da2:	e8 81       	ld	r30, Y
    4da4:	f9 81       	ldd	r31, Y+1	; 0x01
    4da6:	01 93       	st	Z+, r16
    4da8:	f9 83       	std	Y+1, r31	; 0x01
    4daa:	e8 83       	st	Y, r30
    4dac:	06 c0       	rjmp	.+12     	; 0x4dba <fputc+0x3c>
    4dae:	e8 85       	ldd	r30, Y+8	; 0x08
    4db0:	f9 85       	ldd	r31, Y+9	; 0x09
    4db2:	80 2f       	mov	r24, r16
    4db4:	09 95       	icall
    4db6:	89 2b       	or	r24, r25
    4db8:	31 f4       	brne	.+12     	; 0x4dc6 <fputc+0x48>
    4dba:	8e 81       	ldd	r24, Y+6	; 0x06
    4dbc:	9f 81       	ldd	r25, Y+7	; 0x07
    4dbe:	01 96       	adiw	r24, 0x01	; 1
    4dc0:	9f 83       	std	Y+7, r25	; 0x07
    4dc2:	8e 83       	std	Y+6, r24	; 0x06
    4dc4:	02 c0       	rjmp	.+4      	; 0x4dca <fputc+0x4c>
    4dc6:	0f ef       	ldi	r16, 0xFF	; 255
    4dc8:	1f ef       	ldi	r17, 0xFF	; 255
    4dca:	c8 01       	movw	r24, r16
    4dcc:	df 91       	pop	r29
    4dce:	cf 91       	pop	r28
    4dd0:	1f 91       	pop	r17
    4dd2:	0f 91       	pop	r16
    4dd4:	08 95       	ret

00004dd6 <__ultoa_invert>:
    4dd6:	fa 01       	movw	r30, r20
    4dd8:	aa 27       	eor	r26, r26
    4dda:	28 30       	cpi	r18, 0x08	; 8
    4ddc:	51 f1       	breq	.+84     	; 0x4e32 <__ultoa_invert+0x5c>
    4dde:	20 31       	cpi	r18, 0x10	; 16
    4de0:	81 f1       	breq	.+96     	; 0x4e42 <__ultoa_invert+0x6c>
    4de2:	e8 94       	clt
    4de4:	6f 93       	push	r22
    4de6:	6e 7f       	andi	r22, 0xFE	; 254
    4de8:	6e 5f       	subi	r22, 0xFE	; 254
    4dea:	7f 4f       	sbci	r23, 0xFF	; 255
    4dec:	8f 4f       	sbci	r24, 0xFF	; 255
    4dee:	9f 4f       	sbci	r25, 0xFF	; 255
    4df0:	af 4f       	sbci	r26, 0xFF	; 255
    4df2:	b1 e0       	ldi	r27, 0x01	; 1
    4df4:	3e d0       	rcall	.+124    	; 0x4e72 <__ultoa_invert+0x9c>
    4df6:	b4 e0       	ldi	r27, 0x04	; 4
    4df8:	3c d0       	rcall	.+120    	; 0x4e72 <__ultoa_invert+0x9c>
    4dfa:	67 0f       	add	r22, r23
    4dfc:	78 1f       	adc	r23, r24
    4dfe:	89 1f       	adc	r24, r25
    4e00:	9a 1f       	adc	r25, r26
    4e02:	a1 1d       	adc	r26, r1
    4e04:	68 0f       	add	r22, r24
    4e06:	79 1f       	adc	r23, r25
    4e08:	8a 1f       	adc	r24, r26
    4e0a:	91 1d       	adc	r25, r1
    4e0c:	a1 1d       	adc	r26, r1
    4e0e:	6a 0f       	add	r22, r26
    4e10:	71 1d       	adc	r23, r1
    4e12:	81 1d       	adc	r24, r1
    4e14:	91 1d       	adc	r25, r1
    4e16:	a1 1d       	adc	r26, r1
    4e18:	20 d0       	rcall	.+64     	; 0x4e5a <__ultoa_invert+0x84>
    4e1a:	09 f4       	brne	.+2      	; 0x4e1e <__ultoa_invert+0x48>
    4e1c:	68 94       	set
    4e1e:	3f 91       	pop	r19
    4e20:	2a e0       	ldi	r18, 0x0A	; 10
    4e22:	26 9f       	mul	r18, r22
    4e24:	11 24       	eor	r1, r1
    4e26:	30 19       	sub	r19, r0
    4e28:	30 5d       	subi	r19, 0xD0	; 208
    4e2a:	31 93       	st	Z+, r19
    4e2c:	de f6       	brtc	.-74     	; 0x4de4 <__ultoa_invert+0xe>
    4e2e:	cf 01       	movw	r24, r30
    4e30:	08 95       	ret
    4e32:	46 2f       	mov	r20, r22
    4e34:	47 70       	andi	r20, 0x07	; 7
    4e36:	40 5d       	subi	r20, 0xD0	; 208
    4e38:	41 93       	st	Z+, r20
    4e3a:	b3 e0       	ldi	r27, 0x03	; 3
    4e3c:	0f d0       	rcall	.+30     	; 0x4e5c <__ultoa_invert+0x86>
    4e3e:	c9 f7       	brne	.-14     	; 0x4e32 <__ultoa_invert+0x5c>
    4e40:	f6 cf       	rjmp	.-20     	; 0x4e2e <__ultoa_invert+0x58>
    4e42:	46 2f       	mov	r20, r22
    4e44:	4f 70       	andi	r20, 0x0F	; 15
    4e46:	40 5d       	subi	r20, 0xD0	; 208
    4e48:	4a 33       	cpi	r20, 0x3A	; 58
    4e4a:	18 f0       	brcs	.+6      	; 0x4e52 <__ultoa_invert+0x7c>
    4e4c:	49 5d       	subi	r20, 0xD9	; 217
    4e4e:	31 fd       	sbrc	r19, 1
    4e50:	40 52       	subi	r20, 0x20	; 32
    4e52:	41 93       	st	Z+, r20
    4e54:	02 d0       	rcall	.+4      	; 0x4e5a <__ultoa_invert+0x84>
    4e56:	a9 f7       	brne	.-22     	; 0x4e42 <__ultoa_invert+0x6c>
    4e58:	ea cf       	rjmp	.-44     	; 0x4e2e <__ultoa_invert+0x58>
    4e5a:	b4 e0       	ldi	r27, 0x04	; 4
    4e5c:	a6 95       	lsr	r26
    4e5e:	97 95       	ror	r25
    4e60:	87 95       	ror	r24
    4e62:	77 95       	ror	r23
    4e64:	67 95       	ror	r22
    4e66:	ba 95       	dec	r27
    4e68:	c9 f7       	brne	.-14     	; 0x4e5c <__ultoa_invert+0x86>
    4e6a:	00 97       	sbiw	r24, 0x00	; 0
    4e6c:	61 05       	cpc	r22, r1
    4e6e:	71 05       	cpc	r23, r1
    4e70:	08 95       	ret
    4e72:	9b 01       	movw	r18, r22
    4e74:	ac 01       	movw	r20, r24
    4e76:	0a 2e       	mov	r0, r26
    4e78:	06 94       	lsr	r0
    4e7a:	57 95       	ror	r21
    4e7c:	47 95       	ror	r20
    4e7e:	37 95       	ror	r19
    4e80:	27 95       	ror	r18
    4e82:	ba 95       	dec	r27
    4e84:	c9 f7       	brne	.-14     	; 0x4e78 <__ultoa_invert+0xa2>
    4e86:	62 0f       	add	r22, r18
    4e88:	73 1f       	adc	r23, r19
    4e8a:	84 1f       	adc	r24, r20
    4e8c:	95 1f       	adc	r25, r21
    4e8e:	a0 1d       	adc	r26, r0
    4e90:	08 95       	ret

00004e92 <_exit>:
    4e92:	f8 94       	cli

00004e94 <__stop_program>:
    4e94:	ff cf       	rjmp	.-2      	; 0x4e94 <__stop_program>
